
kocherga_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000637c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e4  080066e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066ec  080066ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080066f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000074  08006768  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006768  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e61a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035d2  00000000  00000000  0003e6be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  00041c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea8  00000000  00000000  00042ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026670  00000000  00000000  00043a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb21  00000000  00000000  0006a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e262e  00000000  00000000  00076bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007f  00000000  00000000  00159207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a0  00000000  00000000  00159288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064f4 	.word	0x080064f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080064f4 	.word	0x080064f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <_ZN8kocherga5CRC643addEPKvj>:
    static constexpr std::uint64_t Mask = std::uint64_t(1) << 63U;

    std::uint64_t crc_ = std::uint64_t(0xFFFFFFFFFFFFFFFFULL);

public:
    void add(const void* data, std::size_t len)
 8000588:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800058c:	b086      	sub	sp, #24
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
    {
        auto bytes = static_cast<const std::uint8_t*>(data);
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	617b      	str	r3, [r7, #20]
        assert(bytes != nullptr);
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d105      	bne.n	80005ac <_ZN8kocherga5CRC643addEPKvj+0x24>
 80005a0:	4ba1      	ldr	r3, [pc, #644]	; (8000828 <_ZN8kocherga5CRC643addEPKvj+0x2a0>)
 80005a2:	4aa2      	ldr	r2, [pc, #648]	; (800082c <_ZN8kocherga5CRC643addEPKvj+0x2a4>)
 80005a4:	215b      	movs	r1, #91	; 0x5b
 80005a6:	48a2      	ldr	r0, [pc, #648]	; (8000830 <_ZN8kocherga5CRC643addEPKvj+0x2a8>)
 80005a8:	f005 f81a 	bl	80055e0 <__assert_func>
        while (len --> 0)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	607a      	str	r2, [r7, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf14      	ite	ne
 80005b6:	2301      	movne	r3, #1
 80005b8:	2300      	moveq	r3, #0
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	f000 812a 	beq.w	8000816 <_ZN8kocherga5CRC643addEPKvj+0x28e>
        {
            crc_ ^= std::uint64_t(*bytes++) << 56U;
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	1c5a      	adds	r2, r3, #1
 80005c6:	617a      	str	r2, [r7, #20]
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b2d9      	uxtb	r1, r3
 80005cc:	f04f 0200 	mov.w	r2, #0
 80005d0:	f04f 0b00 	mov.w	fp, #0
 80005d4:	f04f 0c00 	mov.w	ip, #0
 80005d8:	ea4f 6c01 	mov.w	ip, r1, lsl #24
 80005dc:	f04f 0b00 	mov.w	fp, #0
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80005e6:	ea8b 0301 	eor.w	r3, fp, r1
 80005ea:	ea8c 0402 	eor.w	r4, ip, r2
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	e9c2 3400 	strd	r3, r4, [r2]
            // Unrolled for performance reasons. This path directly affects the boot-up time, so it is very
            // important to keep it optimized for speed. Rolling this into a loop causes a significant performance
            // degradation at least with GCC since the compiler refuses to unroll the loop when size optimization
            // is selected (which is normally used for bootloaders).
            crc_ = (crc_ & Mask) ? (crc_ << 1U) ^ Poly : crc_ << 1U;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f174 0300 	sbcs.w	r3, r4, #0
 8000600:	da0f      	bge.n	8000622 <_ZN8kocherga5CRC643addEPKvj+0x9a>
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000608:	184b      	adds	r3, r1, r1
 800060a:	eb42 0402 	adc.w	r4, r2, r2
 800060e:	4619      	mov	r1, r3
 8000610:	4622      	mov	r2, r4
 8000612:	a483      	add	r4, pc, #524	; (adr r4, 8000820 <_ZN8kocherga5CRC643addEPKvj+0x298>)
 8000614:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000618:	ea83 0b01 	eor.w	fp, r3, r1
 800061c:	ea84 0c02 	eor.w	ip, r4, r2
 8000620:	e007      	b.n	8000632 <_ZN8kocherga5CRC643addEPKvj+0xaa>
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000628:	184b      	adds	r3, r1, r1
 800062a:	eb42 0402 	adc.w	r4, r2, r2
 800062e:	469b      	mov	fp, r3
 8000630:	46a4      	mov	ip, r4
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	e9c2 bc00 	strd	fp, ip, [r2]
            crc_ = (crc_ & Mask) ? (crc_ << 1U) ^ Poly : crc_ << 1U;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800063e:	2b00      	cmp	r3, #0
 8000640:	f174 0300 	sbcs.w	r3, r4, #0
 8000644:	da0f      	bge.n	8000666 <_ZN8kocherga5CRC643addEPKvj+0xde>
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	e9d3 1200 	ldrd	r1, r2, [r3]
 800064c:	184b      	adds	r3, r1, r1
 800064e:	eb42 0402 	adc.w	r4, r2, r2
 8000652:	4619      	mov	r1, r3
 8000654:	4622      	mov	r2, r4
 8000656:	a472      	add	r4, pc, #456	; (adr r4, 8000820 <_ZN8kocherga5CRC643addEPKvj+0x298>)
 8000658:	e9d4 3400 	ldrd	r3, r4, [r4]
 800065c:	ea83 0b01 	eor.w	fp, r3, r1
 8000660:	ea84 0c02 	eor.w	ip, r4, r2
 8000664:	e007      	b.n	8000676 <_ZN8kocherga5CRC643addEPKvj+0xee>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	e9d3 1200 	ldrd	r1, r2, [r3]
 800066c:	184b      	adds	r3, r1, r1
 800066e:	eb42 0402 	adc.w	r4, r2, r2
 8000672:	469b      	mov	fp, r3
 8000674:	46a4      	mov	ip, r4
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	e9c2 bc00 	strd	fp, ip, [r2]
            crc_ = (crc_ & Mask) ? (crc_ << 1U) ^ Poly : crc_ << 1U;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000682:	2b00      	cmp	r3, #0
 8000684:	f174 0300 	sbcs.w	r3, r4, #0
 8000688:	da0f      	bge.n	80006aa <_ZN8kocherga5CRC643addEPKvj+0x122>
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000690:	184b      	adds	r3, r1, r1
 8000692:	eb42 0402 	adc.w	r4, r2, r2
 8000696:	4619      	mov	r1, r3
 8000698:	4622      	mov	r2, r4
 800069a:	a461      	add	r4, pc, #388	; (adr r4, 8000820 <_ZN8kocherga5CRC643addEPKvj+0x298>)
 800069c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80006a0:	ea83 0b01 	eor.w	fp, r3, r1
 80006a4:	ea84 0c02 	eor.w	ip, r4, r2
 80006a8:	e007      	b.n	80006ba <_ZN8kocherga5CRC643addEPKvj+0x132>
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	e9d3 1200 	ldrd	r1, r2, [r3]
 80006b0:	184b      	adds	r3, r1, r1
 80006b2:	eb42 0402 	adc.w	r4, r2, r2
 80006b6:	469b      	mov	fp, r3
 80006b8:	46a4      	mov	ip, r4
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	e9c2 bc00 	strd	fp, ip, [r2]
            crc_ = (crc_ & Mask) ? (crc_ << 1U) ^ Poly : crc_ << 1U;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	f174 0300 	sbcs.w	r3, r4, #0
 80006cc:	da0f      	bge.n	80006ee <_ZN8kocherga5CRC643addEPKvj+0x166>
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80006d4:	184b      	adds	r3, r1, r1
 80006d6:	eb42 0402 	adc.w	r4, r2, r2
 80006da:	4619      	mov	r1, r3
 80006dc:	4622      	mov	r2, r4
 80006de:	a450      	add	r4, pc, #320	; (adr r4, 8000820 <_ZN8kocherga5CRC643addEPKvj+0x298>)
 80006e0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80006e4:	ea83 0b01 	eor.w	fp, r3, r1
 80006e8:	ea84 0c02 	eor.w	ip, r4, r2
 80006ec:	e007      	b.n	80006fe <_ZN8kocherga5CRC643addEPKvj+0x176>
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80006f4:	184b      	adds	r3, r1, r1
 80006f6:	eb42 0402 	adc.w	r4, r2, r2
 80006fa:	469b      	mov	fp, r3
 80006fc:	46a4      	mov	ip, r4
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	e9c2 bc00 	strd	fp, ip, [r2]
            crc_ = (crc_ & Mask) ? (crc_ << 1U) ^ Poly : crc_ << 1U;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	e9d3 3400 	ldrd	r3, r4, [r3]
 800070a:	2b00      	cmp	r3, #0
 800070c:	f174 0300 	sbcs.w	r3, r4, #0
 8000710:	da0f      	bge.n	8000732 <_ZN8kocherga5CRC643addEPKvj+0x1aa>
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000718:	184b      	adds	r3, r1, r1
 800071a:	eb42 0402 	adc.w	r4, r2, r2
 800071e:	4619      	mov	r1, r3
 8000720:	4622      	mov	r2, r4
 8000722:	a43f      	add	r4, pc, #252	; (adr r4, 8000820 <_ZN8kocherga5CRC643addEPKvj+0x298>)
 8000724:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000728:	ea83 0b01 	eor.w	fp, r3, r1
 800072c:	ea84 0c02 	eor.w	ip, r4, r2
 8000730:	e007      	b.n	8000742 <_ZN8kocherga5CRC643addEPKvj+0x1ba>
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000738:	184b      	adds	r3, r1, r1
 800073a:	eb42 0402 	adc.w	r4, r2, r2
 800073e:	469b      	mov	fp, r3
 8000740:	46a4      	mov	ip, r4
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	e9c2 bc00 	strd	fp, ip, [r2]
            crc_ = (crc_ & Mask) ? (crc_ << 1U) ^ Poly : crc_ << 1U;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800074e:	2b00      	cmp	r3, #0
 8000750:	f174 0300 	sbcs.w	r3, r4, #0
 8000754:	da0f      	bge.n	8000776 <_ZN8kocherga5CRC643addEPKvj+0x1ee>
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	e9d3 1200 	ldrd	r1, r2, [r3]
 800075c:	184b      	adds	r3, r1, r1
 800075e:	eb42 0402 	adc.w	r4, r2, r2
 8000762:	4619      	mov	r1, r3
 8000764:	4622      	mov	r2, r4
 8000766:	a42e      	add	r4, pc, #184	; (adr r4, 8000820 <_ZN8kocherga5CRC643addEPKvj+0x298>)
 8000768:	e9d4 3400 	ldrd	r3, r4, [r4]
 800076c:	ea83 0b01 	eor.w	fp, r3, r1
 8000770:	ea84 0c02 	eor.w	ip, r4, r2
 8000774:	e007      	b.n	8000786 <_ZN8kocherga5CRC643addEPKvj+0x1fe>
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	e9d3 1200 	ldrd	r1, r2, [r3]
 800077c:	184b      	adds	r3, r1, r1
 800077e:	eb42 0402 	adc.w	r4, r2, r2
 8000782:	469b      	mov	fp, r3
 8000784:	46a4      	mov	ip, r4
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	e9c2 bc00 	strd	fp, ip, [r2]
            crc_ = (crc_ & Mask) ? (crc_ << 1U) ^ Poly : crc_ << 1U;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000792:	2b00      	cmp	r3, #0
 8000794:	f174 0300 	sbcs.w	r3, r4, #0
 8000798:	da0f      	bge.n	80007ba <_ZN8kocherga5CRC643addEPKvj+0x232>
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	e9d3 1200 	ldrd	r1, r2, [r3]
 80007a0:	184b      	adds	r3, r1, r1
 80007a2:	eb42 0402 	adc.w	r4, r2, r2
 80007a6:	4619      	mov	r1, r3
 80007a8:	4622      	mov	r2, r4
 80007aa:	a41d      	add	r4, pc, #116	; (adr r4, 8000820 <_ZN8kocherga5CRC643addEPKvj+0x298>)
 80007ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80007b0:	ea83 0b01 	eor.w	fp, r3, r1
 80007b4:	ea84 0c02 	eor.w	ip, r4, r2
 80007b8:	e007      	b.n	80007ca <_ZN8kocherga5CRC643addEPKvj+0x242>
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	e9d3 1200 	ldrd	r1, r2, [r3]
 80007c0:	184b      	adds	r3, r1, r1
 80007c2:	eb42 0402 	adc.w	r4, r2, r2
 80007c6:	469b      	mov	fp, r3
 80007c8:	46a4      	mov	ip, r4
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	e9c2 bc00 	strd	fp, ip, [r2]
            crc_ = (crc_ & Mask) ? (crc_ << 1U) ^ Poly : crc_ << 1U;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f174 0300 	sbcs.w	r3, r4, #0
 80007dc:	da0f      	bge.n	80007fe <_ZN8kocherga5CRC643addEPKvj+0x276>
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80007e4:	184b      	adds	r3, r1, r1
 80007e6:	eb42 0402 	adc.w	r4, r2, r2
 80007ea:	4619      	mov	r1, r3
 80007ec:	4622      	mov	r2, r4
 80007ee:	a40c      	add	r4, pc, #48	; (adr r4, 8000820 <_ZN8kocherga5CRC643addEPKvj+0x298>)
 80007f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80007f4:	ea83 0b01 	eor.w	fp, r3, r1
 80007f8:	ea84 0c02 	eor.w	ip, r4, r2
 80007fc:	e007      	b.n	800080e <_ZN8kocherga5CRC643addEPKvj+0x286>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000804:	184b      	adds	r3, r1, r1
 8000806:	eb42 0402 	adc.w	r4, r2, r2
 800080a:	469b      	mov	fp, r3
 800080c:	46a4      	mov	ip, r4
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	e9c2 bc00 	strd	fp, ip, [r2]
        while (len --> 0)
 8000814:	e6ca      	b.n	80005ac <_ZN8kocherga5CRC643addEPKvj+0x24>
        }
    }
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000820:	a9ea3693 	.word	0xa9ea3693
 8000824:	42f0e1eb 	.word	0x42f0e1eb
 8000828:	0800650c 	.word	0x0800650c
 800082c:	080065c4 	.word	0x080065c4
 8000830:	08006520 	.word	0x08006520

08000834 <_ZNK8kocherga5CRC643getEv>:

    std::uint64_t get() const { return crc_ ^ 0xFFFFFFFFFFFFFFFFULL; }
 8000834:	b490      	push	{r4, r7}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000842:	ea6f 0301 	mvn.w	r3, r1
 8000846:	ea6f 0402 	mvn.w	r4, r2
 800084a:	4618      	mov	r0, r3
 800084c:	4621      	mov	r1, r4
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bc90      	pop	{r4, r7}
 8000854:	4770      	bx	lr

08000856 <_ZN8kocherga9IPlatform9lockMutexEv>:
     * where the bootloader's instance can be accessed concurrently from multiple threads.
     * Single-thread environments and also environments where the bootloader's instance is not
     * shared across different threads should not implement these methods.
     * Note that the mutex must be recursive.
     */
    virtual void lockMutex() { }
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_ZN8kocherga9IPlatform11unlockMutexEv>:
    virtual void unlockMutex() { }
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <_ZN8kocherga20BootloaderController11MutexLockerC1ERNS_9IPlatformE>:
     */
    class MutexLocker final
    {
        IPlatform& pl_;
    public:
        explicit MutexLocker(IPlatform& pl) : pl_(pl) { pl_.lockMutex(); }
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3308      	adds	r3, #8
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4610      	mov	r0, r2
 800089e:	4798      	blx	r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <_ZN8kocherga20BootloaderController11MutexLockerD1Ev>:
        ~MutexLocker()                                { pl_.unlockMutex(); }
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	330c      	adds	r3, #12
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4610      	mov	r0, r2
 80008c2:	4798      	blx	r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <_ZSt5beginISt5arrayIhLj8EEEDTcldtfp_5beginEERKT_>:
   *          the const container.
   *  @param  __cont  Container.
   */
  template<typename _Container>
    inline _GLIBCXX17_CONSTEXPR auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
    { return __cont.begin(); }
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f000 f805 	bl	80008e6 <_ZNKSt5arrayIhLj8EE5beginEv>
 80008dc:	4603      	mov	r3, r0
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_ZNKSt5arrayIhLj8EE5beginEv>:
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
      { return iterator(data()); }

      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 f810 	bl	8000914 <_ZNKSt5arrayIhLj8EE4dataEv>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <_ZNSt14__array_traitsIhLj8EE6_S_ptrERA8_Kh>:
      _S_ptr(const _Type& __t) noexcept
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_ZNKSt5arrayIhLj8EE4dataEv>:
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffed 	bl	80008fe <_ZNSt14__array_traitsIhLj8EE6_S_ptrERA8_Kh>
 8000924:	4603      	mov	r3, r0
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <_ZNK8kocherga20BootloaderController13AppDescriptor7isValidEm>:
        static constexpr std::array<std::uint8_t, 8> getSignatureValue()
        {
            return {{'A','P','D','e','s','c','0','0'}};
        }

        bool isValid(const std::uint32_t max_application_image_size) const
 8000930:	b5b0      	push	{r4, r5, r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
        {
            const auto sgn = getSignatureValue();
 800093a:	4a1a      	ldr	r2, [pc, #104]	; (80009a4 <_ZNK8kocherga20BootloaderController13AppDescriptor7isValidEm+0x74>)
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000944:	e883 0003 	stmia.w	r3, {r0, r1}
            return std::equal(std::begin(signature), std::end(signature), std::begin(sgn)) &&
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ffbf 	bl	80008ce <_ZSt5beginISt5arrayIhLj8EEEDTcldtfp_5beginEERKT_>
 8000950:	4604      	mov	r4, r0
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fd60 	bl	800141a <_ZSt3endISt5arrayIhLj8EEEDTcldtfp_3endEERKT_>
 800095a:	4605      	mov	r5, r0
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ffb4 	bl	80008ce <_ZSt5beginISt5arrayIhLj8EEEDTcldtfp_5beginEERKT_>
 8000966:	4603      	mov	r3, r0
 8000968:	461a      	mov	r2, r3
 800096a:	4629      	mov	r1, r5
 800096c:	4620      	mov	r0, r4
 800096e:	f000 fd60 	bl	8001432 <_ZSt5equalIPKhS1_EbT_S2_T0_>
 8000972:	4603      	mov	r3, r0
                   (app_info.image_size > 0) &&
                   (app_info.image_size <= max_application_image_size) &&
 8000974:	2b00      	cmp	r3, #0
 8000976:	d010      	beq.n	800099a <_ZNK8kocherga20BootloaderController13AppDescriptor7isValidEm+0x6a>
                   (app_info.image_size > 0) &&
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	691b      	ldr	r3, [r3, #16]
            return std::equal(std::begin(signature), std::end(signature), std::begin(sgn)) &&
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00c      	beq.n	800099a <_ZNK8kocherga20BootloaderController13AppDescriptor7isValidEm+0x6a>
                   (app_info.image_size <= max_application_image_size) &&
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	691b      	ldr	r3, [r3, #16]
                   (app_info.image_size > 0) &&
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	429a      	cmp	r2, r3
 8000988:	d307      	bcc.n	800099a <_ZNK8kocherga20BootloaderController13AppDescriptor7isValidEm+0x6a>
                   ((app_info.image_size % ImagePaddingBytes) == 0);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	f003 0307 	and.w	r3, r3, #7
                   (app_info.image_size <= max_application_image_size) &&
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <_ZNK8kocherga20BootloaderController13AppDescriptor7isValidEm+0x6a>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <_ZNK8kocherga20BootloaderController13AppDescriptor7isValidEm+0x6c>
 800099a:	2300      	movs	r3, #0
        }
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bdb0      	pop	{r4, r5, r7, pc}
 80009a4:	0800653c 	.word	0x0800653c

080009a8 <_ZSt5beginIhLj8EEPT_RAT0__S0_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm])
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    { return __arr; }
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <_ZSt3endIhLj8EEPT_RAT0__S0_>:
   *          of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm])
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3308      	adds	r3, #8
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <_ZNSt8optionalIN8kocherga20BootloaderController13AppDescriptorEEC1Ev>:
      using _Base = _Optional_base<_Tp>;

    public:
      using value_type = _Tp;

      constexpr optional() = default;
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fdb9 	bl	8001558 <_ZNSt14_Optional_baseIN8kocherga20BootloaderController13AppDescriptorEEC1Ev>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv>:
    };
    static_assert(sizeof(AppDescriptor) == 32, "Invalid packing");
    static_assert(std::is_standard_layout_v<AppDescriptor>, "AppInfo is not standard layout; check your compiler");
    static_assert(offsetof(AppDescriptor, app_info) + offsetof(AppInfo, image_crc) == 8);

    std::optional<AppDescriptor> locateAppDescriptor()
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	b09d      	sub	sp, #116	; 0x74
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
    {
        constexpr auto Step = 8;
 80009fa:	2308      	movs	r3, #8
 80009fc:	663b      	str	r3, [r7, #96]	; 0x60

        for (std::size_t offset = 0;; offset += Step)
 80009fe:	2300      	movs	r3, #0
 8000a00:	66fb      	str	r3, [r7, #108]	; 0x6c
        {
            // Reading the storage in 8 bytes increments until we've found the signature
            {
                std::uint8_t signature[Step] = {};
 8000a02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
                const auto res = backend_.read(offset, signature, sizeof(signature));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	6898      	ldr	r0, [r3, #8]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3314      	adds	r3, #20
 8000a18:	681c      	ldr	r4, [r3, #0]
 8000a1a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000a1e:	2308      	movs	r3, #8
 8000a20:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000a22:	47a0      	blx	r4
 8000a24:	4603      	mov	r3, r0
 8000a26:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                if (res != std::int16_t(sizeof(signature)))
 8000a2a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8000a2e:	2b08      	cmp	r3, #8
 8000a30:	f040 8108 	bne.w	8000c44 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x254>
                {
                    break;
                }
                const auto reference = AppDescriptor::getSignatureValue();
 8000a34:	4a91      	ldr	r2, [pc, #580]	; (8000c7c <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x28c>)
 8000a36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a3e:	e883 0003 	stmia.w	r3, {r0, r1}
                if (!std::equal(std::begin(signature), std::end(signature), std::begin(reference)))
 8000a42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ffae 	bl	80009a8 <_ZSt5beginIhLj8EEPT_RAT0__S0_>
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ffb3 	bl	80009be <_ZSt3endIhLj8EEPT_RAT0__S0_>
 8000a58:	4605      	mov	r5, r0
 8000a5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff35 	bl	80008ce <_ZSt5beginISt5arrayIhLj8EEEDTcldtfp_5beginEERKT_>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	4629      	mov	r1, r5
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f000 fcfd 	bl	800146a <_ZSt5equalIPhPKhEbT_S3_T0_>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f083 0301 	eor.w	r3, r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	f040 80f1 	bne.w	8000c60 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x270>
                    continue;
                }
            }

            // Reading the entire descriptor
            AppDescriptor desc;
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	2220      	movs	r2, #32
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f004 fe1b 	bl	80056c2 <memset>
            {
                const auto res = backend_.read(offset, &desc, sizeof(desc));
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	6898      	ldr	r0, [r3, #8]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3314      	adds	r3, #20
 8000a98:	681c      	ldr	r4, [r3, #0]
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	2320      	movs	r3, #32
 8000aa0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000aa2:	47a0      	blx	r4
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
                if (res != std::int16_t(sizeof(desc)))
 8000aaa:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8000aae:	2b20      	cmp	r3, #32
 8000ab0:	f040 80ca 	bne.w	8000c48 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x258>
                {
                    break;
                }
                if (!desc.isValid(max_application_image_size_))
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff36 	bl	8000930 <_ZNK8kocherga20BootloaderController13AppDescriptor7isValidEm>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f083 0301 	eor.w	r3, r3, #1
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f040 80c9 	bne.w	8000c64 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x274>
            }

            // Checking firmware CRC.
            // This block is computationally expensive, so it has been carefully optimized for speed.
            {
                const auto crc_offset = offset + offsetof(AppDescriptor, app_info) + offsetof(AppInfo, image_crc);
 8000ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ad4:	3308      	adds	r3, #8
 8000ad6:	65bb      	str	r3, [r7, #88]	; 0x58
                CRC64 crc;
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000adc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000ae0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

                // Read large chunks until the CRC field is reached (in most cases it will fit in just one chunk)
                for (std::size_t i = 0; i < crc_offset;)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ae8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d241      	bcs.n	8000b74 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x184>
                {
                    const auto res =
                        backend_.read(i, rom_buffer_.data(),
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	689d      	ldr	r5, [r3, #8]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	689b      	ldr	r3, [r3, #8]
                                      std::uint16_t(std::min<std::size_t>(rom_buffer_.size(), crc_offset - i)));
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3314      	adds	r3, #20
 8000afc:	681c      	ldr	r4, [r3, #0]
                        backend_.read(i, rom_buffer_.data(),
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	3320      	adds	r3, #32
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fccd 	bl	80014a2 <_ZNSt5arrayIhLj1024EE4dataEv>
 8000b08:	4606      	mov	r6, r0
                                      std::uint16_t(std::min<std::size_t>(rom_buffer_.size(), crc_offset - i)));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	3320      	adds	r3, #32
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fcd4 	bl	80014bc <_ZNKSt5arrayIhLj1024EE4sizeEv>
 8000b14:	4603      	mov	r3, r0
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44
 8000b18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000b24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fcd2 	bl	80014d4 <_ZSt3minIjERKT_S2_S2_>
 8000b30:	4603      	mov	r3, r0
 8000b32:	681b      	ldr	r3, [r3, #0]
                        backend_.read(i, rom_buffer_.data(),
 8000b34:	b29b      	uxth	r3, r3
                                      std::uint16_t(std::min<std::size_t>(rom_buffer_.size(), crc_offset - i)));
 8000b36:	4632      	mov	r2, r6
 8000b38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	47a0      	blx	r4
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    if (res > 0)
 8000b44:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	dd12      	ble.n	8000b72 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x182>
                    {
                        i += std::size_t(res);
 8000b4c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8000b50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000b52:	4413      	add	r3, r2
 8000b54:	66bb      	str	r3, [r7, #104]	; 0x68
                        crc.add(rom_buffer_.data(), std::size_t(res));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	3320      	adds	r3, #32
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fca1 	bl	80014a2 <_ZNSt5arrayIhLj1024EE4dataEv>
 8000b60:	4601      	mov	r1, r0
 8000b62:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8000b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fd0c 	bl	8000588 <_ZN8kocherga5CRC643addEPKvj>
                for (std::size_t i = 0; i < crc_offset;)
 8000b70:	e7ba      	b.n	8000ae8 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0xf8>
                    }
                    else
                    {
                        break;
 8000b72:	bf00      	nop
                }

                // Fill CRC with zero
                {
                    static const std::uint8_t dummy[8]{0};
                    crc.add(&dummy[0], sizeof(dummy));
 8000b74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b78:	2208      	movs	r2, #8
 8000b7a:	4941      	ldr	r1, [pc, #260]	; (8000c80 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x290>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fd03 	bl	8000588 <_ZN8kocherga5CRC643addEPKvj>
                }

                // Read the rest of the image in large chunks
                for (std::size_t i = crc_offset + 8; i < desc.app_info.image_size;)
 8000b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b84:	3308      	adds	r3, #8
 8000b86:	667b      	str	r3, [r7, #100]	; 0x64
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d241      	bcs.n	8000c14 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x224>
                {
                    const auto res = backend_.read(i, rom_buffer_.data(),
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	689d      	ldr	r5, [r3, #8]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
                                                   std::uint16_t(std::min<std::size_t>(rom_buffer_.size(),
                                                                                       desc.app_info.image_size - i)));
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3314      	adds	r3, #20
 8000b9c:	681c      	ldr	r4, [r3, #0]
                    const auto res = backend_.read(i, rom_buffer_.data(),
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	3320      	adds	r3, #32
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fc7d 	bl	80014a2 <_ZNSt5arrayIhLj1024EE4dataEv>
 8000ba8:	4606      	mov	r6, r0
                                                   std::uint16_t(std::min<std::size_t>(rom_buffer_.size(),
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	3320      	adds	r3, #32
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fc84 	bl	80014bc <_ZNKSt5arrayIhLj1024EE4sizeEv>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
                                                                                       desc.app_info.image_size - i)));
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8000bc0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000bc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fc82 	bl	80014d4 <_ZSt3minIjERKT_S2_S2_>
 8000bd0:	4603      	mov	r3, r0
                                                   std::uint16_t(std::min<std::size_t>(rom_buffer_.size(),
 8000bd2:	681b      	ldr	r3, [r3, #0]
                    const auto res = backend_.read(i, rom_buffer_.data(),
 8000bd4:	b29b      	uxth	r3, r3
                                                                                       desc.app_info.image_size - i)));
 8000bd6:	4632      	mov	r2, r6
 8000bd8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000bda:	4628      	mov	r0, r5
 8000bdc:	47a0      	blx	r4
 8000bde:	4603      	mov	r3, r0
 8000be0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                    if (res > 0)
 8000be4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	dd12      	ble.n	8000c12 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x222>
                    {
                        i += std::size_t(res);
 8000bec:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8000bf0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000bf2:	4413      	add	r3, r2
 8000bf4:	667b      	str	r3, [r7, #100]	; 0x64
                        crc.add(rom_buffer_.data(), std::size_t(res));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	3320      	adds	r3, #32
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fc51 	bl	80014a2 <_ZNSt5arrayIhLj1024EE4dataEv>
 8000c00:	4601      	mov	r1, r0
 8000c02:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8000c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fcbc 	bl	8000588 <_ZN8kocherga5CRC643addEPKvj>
                for (std::size_t i = crc_offset + 8; i < desc.app_info.image_size;)
 8000c10:	e7ba      	b.n	8000b88 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x198>
                    }
                    else
                    {
                        break;
 8000c12:	bf00      	nop
                    }
                }

                if (crc.get() != desc.app_info.image_crc)
 8000c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fe0b 	bl	8000834 <_ZNK8kocherga5CRC643getEv>
 8000c1e:	460a      	mov	r2, r1
 8000c20:	4601      	mov	r1, r0
 8000c22:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000c26:	42a2      	cmp	r2, r4
 8000c28:	bf0a      	itet	eq
 8000c2a:	4299      	cmpeq	r1, r3
 8000c2c:	2301      	movne	r3, #1
 8000c2e:	2300      	moveq	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d118      	bne.n	8000c68 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x278>
                }
            }

            // Returning if the descriptor is correct
            KOCHERGA_TRACE("App descriptor located at offset %x\n", unsigned(offset));
            return {desc};
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 fc68 	bl	8001512 <_ZNSt8optionalIN8kocherga20BootloaderController13AppDescriptorEEC1IRS2_Lb1EEEOT_>
 8000c42:	e016      	b.n	8000c72 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x282>
                    break;
 8000c44:	bf00      	nop
 8000c46:	e000      	b.n	8000c4a <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x25a>
                    break;
 8000c48:	bf00      	nop
        }

        return {};
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	2328      	movs	r3, #40	; 0x28
 8000c50:	461a      	mov	r2, r3
 8000c52:	2100      	movs	r1, #0
 8000c54:	f004 fd35 	bl	80056c2 <memset>
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff febc 	bl	80009d6 <_ZNSt8optionalIN8kocherga20BootloaderController13AppDescriptorEEC1Ev>
 8000c5e:	e008      	b.n	8000c72 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x282>
                    continue;
 8000c60:	bf00      	nop
 8000c62:	e002      	b.n	8000c6a <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x27a>
                    continue;
 8000c64:	bf00      	nop
 8000c66:	e000      	b.n	8000c6a <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x27a>
                    continue;       // Look further...
 8000c68:	bf00      	nop
        for (std::size_t offset = 0;; offset += Step)
 8000c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c6c:	3308      	adds	r3, #8
 8000c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
        }
 8000c70:	e6c7      	b.n	8000a02 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv+0x12>
    }
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	3774      	adds	r7, #116	; 0x74
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	0800653c 	.word	0x0800653c
 8000c80:	08006544 	.word	0x08006544

08000c84 <_ZNKSt14_Optional_baseIN8kocherga20BootloaderController13AppDescriptorEE6_M_getEv>:
      _M_get() const noexcept
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_payload; }
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_ZNKSt8optionalIN8kocherga20BootloaderController13AppDescriptorEEptEv>:
	  }
      }

      // Observers.
      constexpr const _Tp*
      operator->() const
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
      { return std::__addressof(this->_M_get()); }
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ffed 	bl	8000c84 <_ZNKSt14_Optional_baseIN8kocherga20BootloaderController13AppDescriptorEE6_M_getEv>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f805 	bl	8000cbc <_ZSt11__addressofIKN8kocherga20BootloaderController13AppDescriptorEEPT_RS4_>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_ZSt11__addressofIKN8kocherga20BootloaderController13AppDescriptorEEPT_RS4_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_ZN8kocherga20BootloaderController23verifyAppAndUpdateStateENS_5StateE>:

    void verifyAppAndUpdateState(const State state_on_success)
 8000cd2:	b5b0      	push	{r4, r5, r7, lr}
 8000cd4:	b08e      	sub	sp, #56	; 0x38
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	72fb      	strb	r3, [r7, #11]
    {
        if (const auto appdesc = locateAppDescriptor())
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	68f9      	ldr	r1, [r7, #12]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fe83 	bl	80009f0 <_ZN8kocherga20BootloaderController19locateAppDescriptorEv>
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fc3f 	bl	8001572 <_ZNKSt8optionalIN8kocherga20BootloaderController13AppDescriptorEEcvbEv>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d021      	beq.n	8000d3e <_ZN8kocherga20BootloaderController23verifyAppAndUpdateStateENS_5StateE+0x6c>
        {
            cached_app_info_ = appdesc->app_info;
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ffcb 	bl	8000c9a <_ZNKSt8optionalIN8kocherga20BootloaderController13AppDescriptorEEptEv>
 8000d04:	4603      	mov	r3, r0
 8000d06:	f103 0208 	add.w	r2, r3, #8
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fc45 	bl	80015a2 <_ZNSt8optionalIN8kocherga7AppInfoEEaSIRKS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_sameIS2_NSt5decayIT_E4typeEEESt16is_constructibleIS1_JSB_EES8_IS7_IJSt9is_scalarIS1_ES9_IS1_SD_EEEESt13is_assignableIRS1_SB_EEE5valueERS2_E4typeEOSB_>
            state_ = state_on_success;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	7afa      	ldrb	r2, [r7, #11]
 8000d1c:	701a      	strb	r2, [r3, #0]
            boot_delay_started_at_ =
                platform_.getMonotonicUptime();     // This only makes sense if the new state is BootDelay
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6859      	ldr	r1, [r3, #4]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3310      	adds	r3, #16
 8000d2a:	681b      	ldr	r3, [r3, #0]
            boot_delay_started_at_ =
 8000d2c:	68fd      	ldr	r5, [r7, #12]
 8000d2e:	463a      	mov	r2, r7
 8000d30:	4610      	mov	r0, r2
 8000d32:	4798      	blx	r3
 8000d34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000d38:	e9c5 3406 	strd	r3, r4, [r5, #24]
        {
            cached_app_info_.reset();
            state_ = State::NoAppToBoot;
            KOCHERGA_TRACE("App not found\n");
        }
    }
 8000d3c:	e008      	b.n	8000d50 <_ZN8kocherga20BootloaderController23verifyAppAndUpdateStateENS_5StateE+0x7e>
            cached_app_info_.reset();
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fc57 	bl	80015f8 <_ZNSt8optionalIN8kocherga7AppInfoEE5resetEv>
            state_ = State::NoAppToBoot;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
    }
 8000d50:	bf00      	nop
 8000d52:	3738      	adds	r7, #56	; 0x38
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bdb0      	pop	{r4, r5, r7, pc}

08000d58 <_ZNSt8optionalIN8kocherga7AppInfoEEC1Ev>:
      constexpr optional() = default;
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fc62 	bl	800162c <_ZNSt14_Optional_baseIN8kocherga7AppInfoEEC1Ev>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_ZN8kocherga20BootloaderControllerC1ERNS_9IPlatformERNS_11IROMBackendEmNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEE>:
     * Having an upper size limit for the application image allows the bootloader to weed out too large
     * values early, greatly improving the worst case boot time.
     *
     * By default, the boot delay is set to zero; i.e., if the application is valid it will be launched immediately.
     */
    BootloaderController(IPlatform& platform,
 8000d72:	b590      	push	{r4, r7, lr}
 8000d74:	b087      	sub	sp, #28
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	603b      	str	r3, [r7, #0]
                         std::uint32_t max_application_image_size = 0xFFFFFFFFUL,
                         std::chrono::microseconds boot_delay = std::chrono::microseconds(0)) :
        platform_(platform),
        backend_(rom_backend),
        max_application_image_size_(max_application_image_size),
        boot_delay_(boot_delay)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f103 0210 	add.w	r2, r3, #16
 8000d9e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000da2:	e9c2 3400 	strd	r3, r4, [r2]
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	f04f 0400 	mov.w	r4, #0
 8000db0:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3320      	adds	r3, #32
 8000db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f004 fc7f 	bl	80056c2 <memset>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ffc4 	bl	8000d58 <_ZNSt8optionalIN8kocherga7AppInfoEEC1Ev>
    {
        MutexLocker mlock(platform_);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fd4f 	bl	800087e <_ZN8kocherga20BootloaderController11MutexLockerC1ERNS_9IPlatformE>
        verifyAppAndUpdateState(State::BootDelay);
 8000de0:	2101      	movs	r1, #1
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f7ff ff75 	bl	8000cd2 <_ZN8kocherga20BootloaderController23verifyAppAndUpdateStateENS_5StateE>
        MutexLocker mlock(platform_);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fd5c 	bl	80008aa <_ZN8kocherga20BootloaderController11MutexLockerD1Ev>
    }
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4618      	mov	r0, r3
 8000df6:	371c      	adds	r7, #28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd90      	pop	{r4, r7, pc}

08000dfc <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEC1IivEERKT_>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
 8000dfc:	b490      	push	{r4, r7}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	e9c2 3400 	strd	r3, r4, [r2]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc90      	pop	{r4, r7}
 8000e1e:	4770      	bx	lr

08000e20 <_ZN13STM32Platform9lockMutexEv>:
};

class STM32Platform final : public kocherga::IPlatform
{
public:
    void lockMutex() { }
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_ZN13STM32Platform11unlockMutexEv>:
    void unlockMutex() { }
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_ZNK13STM32Platform18getMonotonicUptimeEv>:

    std::chrono::microseconds getMonotonicUptime() const final {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
    	std::chrono::microseconds ms {HAL_GetTick()};
 8000e52:	f000 ff65 	bl	8001d20 <HAL_GetTick>
 8000e56:	4603      	mov	r3, r0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 fbf0 	bl	8001646 <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEC1ImvEERKT_>
    	return ms;
 8000e66:	bf00      	nop
    }
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_ZN16STM32IROMBackend12beginUpgradeEv>:
    ~STM32IROMBackend() = default;

    /**
     * @return 0 on success, negative on error
     */
    std::int16_t beginUpgrade() {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    	return 0;
 8000e78:	2300      	movs	r3, #0
    }
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_ZN16STM32IROMBackend5writeEjPKvt>:

    /**
     * The size cannot exceed 32767 bytes.
     * @return number of bytes written; negative on error
     */
    std::int16_t write(std::size_t offset, const void* data, std::uint16_t size) {
 8000e86:	b590      	push	{r4, r7, lr}
 8000e88:	b08f      	sub	sp, #60	; 0x3c
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	807b      	strh	r3, [r7, #2]
    	uint32_t PageError = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
        FLASH_EraseInitTypeDef EraseInitStruct;
    	HAL_FLASH_Unlock();
 8000e98:	f001 f888 	bl	8001fac <HAL_FLASH_Unlock>
        if (counter_offset == START_OFFCET_FIRMWARE) {
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ea4:	d10f      	bne.n	8000ec6 <_ZN16STM32IROMBackend5writeEjPKvt+0x40>
			EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
			EraseInitStruct.Banks = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
			EraseInitStruct.Sector = START_SECTOR_FIRMWARE;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	61fb      	str	r3, [r7, #28]
			EraseInitStruct.NbSectors = SIZE_FIRMWARE;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	623b      	str	r3, [r7, #32]
			HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000eb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 f9d3 	bl	800226c <HAL_FLASHEx_Erase>
        }
    	const uint8_t* data_uint8 = static_cast<const uint8_t*>(data);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

    	for (int i = 0; i<size; i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	da1d      	bge.n	8000f12 <_ZN16STM32IROMBackend5writeEjPKvt+0x8c>
    		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, counter_offset+i, data_uint8[i]);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000edc:	18d1      	adds	r1, r2, r3
 8000ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f04f 0400 	mov.w	r4, #0
 8000eec:	461a      	mov	r2, r3
 8000eee:	4623      	mov	r3, r4
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f001 f807 	bl	8001f04 <HAL_FLASH_Program>
    		for(int i = 0; i<=1000; i++);
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8000efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f00:	dc03      	bgt.n	8000f0a <_ZN16STM32IROMBackend5writeEjPKvt+0x84>
 8000f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f04:	3301      	adds	r3, #1
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
 8000f08:	e7f7      	b.n	8000efa <_ZN16STM32IROMBackend5writeEjPKvt+0x74>
    	for (int i = 0; i<size; i++) {
 8000f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8000f10:	e7dd      	b.n	8000ece <_ZN16STM32IROMBackend5writeEjPKvt+0x48>
    	}
    	counter_offset +=size;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	441a      	add	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	605a      	str	r2, [r3, #4]
    	HAL_FLASH_Lock();
 8000f1e:	f001 f867 	bl	8001ff0 <HAL_FLASH_Lock>
    	return size;
 8000f22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    }
 8000f26:	4618      	mov	r0, r3
 8000f28:	373c      	adds	r7, #60	; 0x3c
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}

08000f2e <_ZN16STM32IROMBackend10endUpgradeEb>:

    /**
     * @return 0 on success, negative on error
     */
    std::int16_t endUpgrade(bool success) {
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	70fb      	strb	r3, [r7, #3]
    	return 0;
 8000f3a:	2300      	movs	r3, #0
    }
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_ZNK16STM32IROMBackend4readEjPvt>:

    /**
     * The size cannot exceed 32767 bytes.
     * @return number of bytes read; negative on error
     */
    std::int16_t read(std::size_t offset, void* data, std::uint16_t size)const {
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	807b      	strh	r3, [r7, #2]
    	uint8_t* data_uint8 = static_cast<uint8_t*>(data);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	613b      	str	r3, [r7, #16]
    	for(std::size_t i = 0; i< size; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d20d      	bcs.n	8000f82 <_ZNK16STM32IROMBackend4readEjPvt+0x3a>
    		data_uint8[i] = *(__IO uint8_t*)(offset+i);
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	4413      	add	r3, r2
 8000f74:	780a      	ldrb	r2, [r1, #0]
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
    	for(std::size_t i = 0; i< size; i++) {
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e7ed      	b.n	8000f5e <_ZNK16STM32IROMBackend4readEjPvt+0x16>
    	}
    	return size;
 8000f82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    }
 8000f86:	4618      	mov	r0, r3
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <_ZN8kocherga9IPlatformD1Ev>:
    virtual ~IPlatform() = default;
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <_ZN8kocherga9IPlatformD1Ev+0x1c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	080065b0 	.word	0x080065b0

08000fb4 <_ZN8kocherga9IPlatformD0Ev>:
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffe9 	bl	8000f94 <_ZN8kocherga9IPlatformD1Ev>
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f004 fb00 	bl	80055ca <_ZdlPvj>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_ZN8kocherga11IROMBackendD1Ev>:
    virtual ~IROMBackend() = default;
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <_ZN8kocherga11IROMBackendD1Ev+0x1c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	08006590 	.word	0x08006590

08000ff4 <_ZN8kocherga11IROMBackendD0Ev>:
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ffe9 	bl	8000fd4 <_ZN8kocherga11IROMBackendD1Ev>
 8001002:	2104      	movs	r1, #4
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f004 fae0 	bl	80055ca <_ZdlPvj>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <main>:
};

int main(void)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800101a:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f000 fe1a 	bl	8001c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f82e 	bl	8001080 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 f8e8 	bl	80011f8 <_ZL12MX_GPIO_Initv>
  MX_UART2_Init();
 8001028:	f000 f8ba 	bl	80011a0 <_ZL13MX_UART2_Initv>
  //MX_USB_HOST_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  STM32Platform stm_real_mc;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <main+0x64>)
 800102e:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
  STM32IROMBackend stm_irom;
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <main+0x68>)
 8001034:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8001038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800103c:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
  kocherga::BootloaderController stm32_boot(stm_real_mc, stm_irom);
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8001046:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 800104a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fed3 	bl	8000dfc <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEC1IivEERKT_>
 8001056:	f207 4244 	addw	r2, r7, #1092	; 0x444
 800105a:	f207 414c 	addw	r1, r7, #1100	; 0x44c
 800105e:	4638      	mov	r0, r7
 8001060:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001064:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001068:	e9cd 3400 	strd	r3, r4, [sp]
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001070:	f7ff fe7f 	bl	8000d72 <_ZN8kocherga20BootloaderControllerC1ERNS_9IPlatformERNS_11IROMBackendEmNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEE>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001074:	e7fe      	b.n	8001074 <main+0x60>
 8001076:	bf00      	nop
 8001078:	08006574 	.word	0x08006574
 800107c:	08006554 	.word	0x08006554

08001080 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b098      	sub	sp, #96	; 0x60
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108a:	2230      	movs	r2, #48	; 0x30
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f004 fb17 	bl	80056c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	4b38      	ldr	r3, [pc, #224]	; (8001198 <_Z18SystemClock_Configv+0x118>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a37      	ldr	r2, [pc, #220]	; (8001198 <_Z18SystemClock_Configv+0x118>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
 80010c2:	4b35      	ldr	r3, [pc, #212]	; (8001198 <_Z18SystemClock_Configv+0x118>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <_Z18SystemClock_Configv+0x11c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a31      	ldr	r2, [pc, #196]	; (800119c <_Z18SystemClock_Configv+0x11c>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b2f      	ldr	r3, [pc, #188]	; (800119c <_Z18SystemClock_Configv+0x11c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ea:	2301      	movs	r3, #1
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f4:	2302      	movs	r3, #2
 80010f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010fe:	2308      	movs	r3, #8
 8001100:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001102:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001106:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800110c:	2307      	movs	r3, #7
 800110e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001114:	4618      	mov	r0, r3
 8001116:	f002 fd0d 	bl	8003b34 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf14      	ite	ne
 8001120:	2301      	movne	r3, #1
 8001122:	2300      	moveq	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 800112a:	f000 f96f 	bl	800140c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2302      	movs	r3, #2
 8001134:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800113a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	2105      	movs	r1, #5
 800114c:	4618      	mov	r0, r3
 800114e:	f002 ff61 	bl	8004014 <HAL_RCC_ClockConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	bf14      	ite	ne
 8001158:	2301      	movne	r3, #1
 800115a:	2300      	moveq	r3, #0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <_Z18SystemClock_Configv+0xe6>
  {
    Error_Handler();
 8001162:	f000 f953 	bl	800140c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001166:	2301      	movs	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800116a:	23c0      	movs	r3, #192	; 0xc0
 800116c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	4618      	mov	r0, r3
 8001178:	f003 f93e 	bl	80043f8 <HAL_RCCEx_PeriphCLKConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf14      	ite	ne
 8001182:	2301      	movne	r3, #1
 8001184:	2300      	moveq	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <_Z18SystemClock_Configv+0x110>
  {
    Error_Handler();
 800118c:	f000 f93e 	bl	800140c <Error_Handler>
  }
}
 8001190:	bf00      	nop
 8001192:	3760      	adds	r7, #96	; 0x60
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	40007000 	.word	0x40007000

080011a0 <_ZL13MX_UART2_Initv>:
  /* USER CODE END SPI1_Init 2 */

}

static void MX_UART2_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  huart1.Instance = USART2;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <_ZL13MX_UART2_Initv+0x50>)
 80011a6:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <_ZL13MX_UART2_Initv+0x54>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200; //скорость 9600
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <_ZL13MX_UART2_Initv+0x50>)
 80011ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b0:	605a      	str	r2, [r3, #4]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE; //нет контроля потока
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <_ZL13MX_UART2_Initv+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart1.Init.Mode =  UART_MODE_TX | UART_MODE_RX; //только передатчик
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <_ZL13MX_UART2_Initv+0x50>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart1.Init.Parity = UART_PARITY_NONE; //без контроля четности
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <_ZL13MX_UART2_Initv+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart1.Init.StopBits = UART_STOPBITS_1; //1 стоп бит
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <_ZL13MX_UART2_Initv+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart1.Init.WordLength = UART_WORDLENGTH_8B; //8 бит данных
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <_ZL13MX_UART2_Initv+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <_ZL13MX_UART2_Initv+0x50>)
 80011d2:	f003 f9f3 	bl	80045bc <HAL_UART_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf14      	ite	ne
 80011dc:	2301      	movne	r3, #1
 80011de:	2300      	moveq	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <_ZL13MX_UART2_Initv+0x4a>
  {
    Error_Handler();
 80011e6:	f000 f911 	bl	800140c <Error_Handler>
  }

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000090 	.word	0x20000090
 80011f4:	40004400 	.word	0x40004400

080011f8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	4b77      	ldr	r3, [pc, #476]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a76      	ldr	r2, [pc, #472]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b74      	ldr	r3, [pc, #464]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a6f      	ldr	r2, [pc, #444]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b6d      	ldr	r3, [pc, #436]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b69      	ldr	r3, [pc, #420]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a68      	ldr	r2, [pc, #416]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b66      	ldr	r3, [pc, #408]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b62      	ldr	r3, [pc, #392]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a61      	ldr	r2, [pc, #388]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b5f      	ldr	r3, [pc, #380]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a5a      	ldr	r2, [pc, #360]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b54      	ldr	r3, [pc, #336]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a53      	ldr	r2, [pc, #332]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b51      	ldr	r3, [pc, #324]	; (80013f0 <_ZL12MX_GPIO_Initv+0x1f8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2108      	movs	r1, #8
 80012ba:	484e      	ldr	r0, [pc, #312]	; (80013f4 <_ZL12MX_GPIO_Initv+0x1fc>)
 80012bc:	f001 fa92 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2101      	movs	r1, #1
 80012c4:	484c      	ldr	r0, [pc, #304]	; (80013f8 <_ZL12MX_GPIO_Initv+0x200>)
 80012c6:	f001 fa8d 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80012ca:	2200      	movs	r2, #0
 80012cc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80012d0:	484a      	ldr	r0, [pc, #296]	; (80013fc <_ZL12MX_GPIO_Initv+0x204>)
 80012d2:	f001 fa87 	bl	80027e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012d6:	2308      	movs	r3, #8
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	4841      	ldr	r0, [pc, #260]	; (80013f4 <_ZL12MX_GPIO_Initv+0x1fc>)
 80012ee:	f001 f8df 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	483b      	ldr	r0, [pc, #236]	; (80013f8 <_ZL12MX_GPIO_Initv+0x200>)
 800130a:	f001 f8d1 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800130e:	2308      	movs	r3, #8
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800131e:	2305      	movs	r3, #5
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4833      	ldr	r0, [pc, #204]	; (80013f8 <_ZL12MX_GPIO_Initv+0x200>)
 800132a:	f001 f8c1 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132e:	2301      	movs	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <_ZL12MX_GPIO_Initv+0x208>)
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4830      	ldr	r0, [pc, #192]	; (8001404 <_ZL12MX_GPIO_Initv+0x20c>)
 8001342:	f001 f8b5 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001346:	2304      	movs	r3, #4
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	482b      	ldr	r0, [pc, #172]	; (8001408 <_ZL12MX_GPIO_Initv+0x210>)
 800135a:	f001 f8a9 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800135e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001370:	2305      	movs	r3, #5
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4823      	ldr	r0, [pc, #140]	; (8001408 <_ZL12MX_GPIO_Initv+0x210>)
 800137c:	f001 f898 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001380:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001384:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	4818      	ldr	r0, [pc, #96]	; (80013fc <_ZL12MX_GPIO_Initv+0x204>)
 800139a:	f001 f889 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800139e:	2320      	movs	r3, #32
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	4812      	ldr	r0, [pc, #72]	; (80013fc <_ZL12MX_GPIO_Initv+0x204>)
 80013b2:	f001 f87d 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_ZL12MX_GPIO_Initv+0x208>)
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	480a      	ldr	r0, [pc, #40]	; (80013f4 <_ZL12MX_GPIO_Initv+0x1fc>)
 80013ca:	f001 f871 	bl	80024b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; //альтернативная функция ножки
 80013ce:	2302      	movs	r3, #2
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP; //ножка пуш-пул
 80013d2:	2301      	movs	r3, #1
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3; //2 ножка
 80013d6:	230c      	movs	r3, #12
 80013d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4808      	ldr	r0, [pc, #32]	; (8001404 <_ZL12MX_GPIO_Initv+0x20c>)
 80013e2:	f001 f865 	bl	80024b0 <HAL_GPIO_Init>

}
 80013e6:	bf00      	nop
 80013e8:	3730      	adds	r7, #48	; 0x30
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	10120000 	.word	0x10120000
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400

0800140c <Error_Handler>:

/* USER CODE BEGIN 4 */
void Error_Handler() {
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_ZSt3endISt5arrayIhLj8EEEDTcldtfp_3endEERKT_>:
    end(const _Container& __cont) -> decltype(__cont.end())
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
    { return __cont.end(); }
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f921 	bl	800166a <_ZNKSt5arrayIhLj8EE3endEv>
 8001428:	4603      	mov	r3, r0
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <_ZSt5equalIPKhS1_EbT_S2_T0_>:
   *  false depending on whether all of the corresponding elements of the
   *  ranges are equal.
  */
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
 8001432:	b5b0      	push	{r4, r5, r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_II1>::value_type,
	    typename iterator_traits<_II2>::value_type>)
      __glibcxx_requires_valid_range(__first1, __last1);

      return std::__equal_aux(std::__niter_base(__first1),
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 f920 	bl	8001684 <_ZSt12__niter_baseIPKhET_S2_>
 8001444:	4604      	mov	r4, r0
 8001446:	68b8      	ldr	r0, [r7, #8]
 8001448:	f000 f91c 	bl	8001684 <_ZSt12__niter_baseIPKhET_S2_>
 800144c:	4605      	mov	r5, r0
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f918 	bl	8001684 <_ZSt12__niter_baseIPKhET_S2_>
 8001454:	4603      	mov	r3, r0
			      std::__niter_base(__last1),
			      std::__niter_base(__first2));
 8001456:	461a      	mov	r2, r3
 8001458:	4629      	mov	r1, r5
 800145a:	4620      	mov	r0, r4
 800145c:	f000 f91d 	bl	800169a <_ZSt11__equal_auxIPKhS1_EbT_S2_T0_>
 8001460:	4603      	mov	r3, r0
    }
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bdb0      	pop	{r4, r5, r7, pc}

0800146a <_ZSt5equalIPhPKhEbT_S3_T0_>:
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
 800146a:	b5b0      	push	{r4, r5, r7, lr}
 800146c:	b084      	sub	sp, #16
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
      return std::__equal_aux(std::__niter_base(__first1),
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 f921 	bl	80016be <_ZSt12__niter_baseIPhET_S1_>
 800147c:	4604      	mov	r4, r0
 800147e:	68b8      	ldr	r0, [r7, #8]
 8001480:	f000 f91d 	bl	80016be <_ZSt12__niter_baseIPhET_S1_>
 8001484:	4605      	mov	r5, r0
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f8fc 	bl	8001684 <_ZSt12__niter_baseIPKhET_S2_>
 800148c:	4603      	mov	r3, r0
			      std::__niter_base(__first2));
 800148e:	461a      	mov	r2, r3
 8001490:	4629      	mov	r1, r5
 8001492:	4620      	mov	r0, r4
 8001494:	f000 f91e 	bl	80016d4 <_ZSt11__equal_auxIPhPKhEbT_S3_T0_>
 8001498:	4603      	mov	r3, r0
    }
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bdb0      	pop	{r4, r5, r7, pc}

080014a2 <_ZNSt5arrayIhLj1024EE4dataEv>:
      data() noexcept
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f923 	bl	80016f8 <_ZNSt14__array_traitsIhLj1024EE6_S_ptrERA1024_Kh>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_ZNKSt5arrayIhLj1024EE4sizeEv>:
      size() const noexcept { return _Nm; }
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d201      	bcs.n	80014ee <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	e000      	b.n	80014f0 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80014ee:	687b      	ldr	r3, [r7, #4]
    }
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_ZSt7forwardIRN8kocherga20BootloaderController13AppDescriptorEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_ZNSt8optionalIN8kocherga20BootloaderController13AppDescriptorEEC1IRS2_Lb1EEEOT_>:
      constexpr optional(_Up&& __t)
 8001512:	b5b0      	push	{r4, r5, r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
        : _Base(std::in_place, std::forward<_Up>(__t)) { }
 800151c:	687c      	ldr	r4, [r7, #4]
 800151e:	6838      	ldr	r0, [r7, #0]
 8001520:	f7ff ffec 	bl	80014fc <_ZSt7forwardIRN8kocherga20BootloaderController13AppDescriptorEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4629      	mov	r1, r5
 800152a:	4620      	mov	r0, r4
 800152c:	f000 f90b 	bl	8001746 <_ZNSt14_Optional_baseIN8kocherga20BootloaderController13AppDescriptorEEC1IJRS2_ELb0EEESt10in_place_tDpOT_>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bdb0      	pop	{r4, r5, r7, pc}

0800153a <_ZNSt17_Optional_payloadIN8kocherga20BootloaderController13AppDescriptorELb1ELb1EEC1Ev>:
      constexpr _Optional_payload()
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	: _M_empty() {}
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2020 	strb.w	r2, [r3, #32]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_ZNSt14_Optional_baseIN8kocherga20BootloaderController13AppDescriptorEEC1Ev>:
      constexpr _Optional_base() noexcept
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
      { }
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ffe9 	bl	800153a <_ZNSt17_Optional_payloadIN8kocherga20BootloaderController13AppDescriptorELb1ELb1EEC1Ev>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_ZNKSt8optionalIN8kocherga20BootloaderController13AppDescriptorEEcvbEv>:

      constexpr const _Tp&&
      operator*() const&&
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f8f7 	bl	8001770 <_ZNKSt14_Optional_baseIN8kocherga20BootloaderController13AppDescriptorEE13_M_is_engagedEv>
 8001582:	4603      	mov	r3, r0
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_ZSt7forwardIRKN8kocherga7AppInfoEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_ZNSt8optionalIN8kocherga7AppInfoEEaSIRKS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_sameIS2_NSt5decayIT_E4typeEEESt16is_constructibleIS1_JSB_EES8_IS7_IJSt9is_scalarIS1_ES9_IS1_SD_EEEESt13is_assignableIRS1_SB_EEE5valueERS2_E4typeEOSB_>:
        operator=(_Up&& __u)
 80015a2:	b5b0      	push	{r4, r5, r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
          if (this->_M_is_engaged())
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f8eb 	bl	800178a <_ZNKSt14_Optional_baseIN8kocherga7AppInfoEE13_M_is_engagedEv>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d010      	beq.n	80015dc <_ZNSt8optionalIN8kocherga7AppInfoEEaSIRKS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_sameIS2_NSt5decayIT_E4typeEEESt16is_constructibleIS1_JSB_EES8_IS7_IJSt9is_scalarIS1_ES9_IS1_SD_EEEESt13is_assignableIRS1_SB_EEE5valueERS2_E4typeEOSB_+0x3a>
            this->_M_get() = std::forward<_Up>(__u);
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	f7ff ffe6 	bl	800158c <_ZSt7forwardIRKN8kocherga7AppInfoEEOT_RNSt16remove_referenceIS4_E4typeE>
 80015c0:	4605      	mov	r5, r0
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f8ec 	bl	80017a2 <_ZNSt14_Optional_baseIN8kocherga7AppInfoEE6_M_getEv>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461c      	mov	r4, r3
 80015ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80015da:	e008      	b.n	80015ee <_ZNSt8optionalIN8kocherga7AppInfoEEaSIRKS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_sameIS2_NSt5decayIT_E4typeEEESt16is_constructibleIS1_JSB_EES8_IS7_IJSt9is_scalarIS1_ES9_IS1_SD_EEEESt13is_assignableIRS1_SB_EEE5valueERS2_E4typeEOSB_+0x4c>
            this->_M_construct(std::forward<_Up>(__u));
 80015dc:	687c      	ldr	r4, [r7, #4]
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f7ff ffd4 	bl	800158c <_ZSt7forwardIRKN8kocherga7AppInfoEEOT_RNSt16remove_referenceIS4_E4typeE>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4619      	mov	r1, r3
 80015e8:	4620      	mov	r0, r4
 80015ea:	f000 f8e5 	bl	80017b8 <_ZNSt14_Optional_baseIN8kocherga7AppInfoEE12_M_constructIJRKS1_EEEvDpOT_>
          return *this;
 80015ee:	687b      	ldr	r3, [r7, #4]
        }
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bdb0      	pop	{r4, r5, r7, pc}

080015f8 <_ZNSt8optionalIN8kocherga7AppInfoEE5resetEv>:

	  return this->_M_is_engaged()
	    ? std::move(this->_M_get())
	    : static_cast<_Tp>(std::forward<_Up>(__u));
	}
      void reset() noexcept { this->_M_reset(); }
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f8f9 	bl	80017fa <_ZNSt14_Optional_baseIN8kocherga7AppInfoEE8_M_resetEv>
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_ZNSt17_Optional_payloadIN8kocherga7AppInfoELb1ELb1EEC1Ev>:
      constexpr _Optional_payload()
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	: _M_empty() {}
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	761a      	strb	r2, [r3, #24]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_ZNSt14_Optional_baseIN8kocherga7AppInfoEEC1Ev>:
      constexpr _Optional_base() noexcept
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
      { }
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ffea 	bl	8001610 <_ZNSt17_Optional_payloadIN8kocherga7AppInfoELb1ELb1EEC1Ev>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEC1ImvEERKT_>:
	  constexpr explicit duration(const _Rep2& __rep)
 8001646:	b490      	push	{r4, r7}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f04f 0400 	mov.w	r4, #0
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	e9c2 3400 	strd	r3, r4, [r2]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bc90      	pop	{r4, r7}
 8001668:	4770      	bx	lr

0800166a <_ZNKSt5arrayIhLj8EE3endEv>:
      end() const noexcept
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff f94e 	bl	8000914 <_ZNKSt5arrayIhLj8EE4dataEv>
 8001678:	4603      	mov	r3, r0
 800167a:	3308      	adds	r3, #8
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_ZSt12__niter_baseIPKhET_S2_>:
    __niter_base(_Iterator __it)
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_ZSt11__equal_auxIPKhS1_EbT_S2_T0_>:
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
      const bool __simple = ((__is_integer<_ValueType1>::__value
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
      return std::__equal<__simple>::equal(__first1, __last1, __first2);
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 f8b2 	bl	8001818 <_ZNSt7__equalILb1EE5equalIhEEbPKT_S4_S4_>
 80016b4:	4603      	mov	r3, r0
    }
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_ZSt11__equal_auxIPhPKhEbT_S3_T0_>:
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
      const bool __simple = ((__is_integer<_ValueType1>::__value
 80016e0:	2301      	movs	r3, #1
 80016e2:	75fb      	strb	r3, [r7, #23]
      return std::__equal<__simple>::equal(__first1, __last1, __first2);
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 f895 	bl	8001818 <_ZNSt7__equalILb1EE5equalIhEEbPKT_S4_S4_>
 80016ee:	4603      	mov	r3, r0
    }
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZNSt14__array_traitsIhLj1024EE6_S_ptrERA1024_Kh>:
      _S_ptr(const _Type& __t) noexcept
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_ZNSt17_Optional_payloadIN8kocherga20BootloaderController13AppDescriptorELb1ELb1EEC1IJRS2_EEESt10in_place_tDpOT_>:
      constexpr _Optional_payload(in_place_t, _Args&&... __args)
 800170e:	b5b0      	push	{r4, r5, r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	7239      	strb	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
	: _M_payload(std::forward<_Args>(__args)...),
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff feee 	bl	80014fc <_ZSt7forwardIRN8kocherga20BootloaderController13AppDescriptorEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001720:	4602      	mov	r2, r0
	  _M_engaged(true)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	461c      	mov	r4, r3
 8001726:	4615      	mov	r5, r2
 8001728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800172a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2020 	strb.w	r2, [r3, #32]
      {}
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bdb0      	pop	{r4, r5, r7, pc}

08001746 <_ZNSt14_Optional_baseIN8kocherga20BootloaderController13AppDescriptorEEC1IJRS2_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8001746:	b5b0      	push	{r4, r5, r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	7239      	strb	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 8001752:	68fc      	ldr	r4, [r7, #12]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fed1 	bl	80014fc <_ZSt7forwardIRN8kocherga20BootloaderController13AppDescriptorEEOT_RNSt16remove_referenceIS4_E4typeE>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	4629      	mov	r1, r5
 8001760:	4620      	mov	r0, r4
 8001762:	f7ff ffd4 	bl	800170e <_ZNSt17_Optional_payloadIN8kocherga20BootloaderController13AppDescriptorELb1ELb1EEC1IJRS2_EEESt10in_place_tDpOT_>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bdb0      	pop	{r4, r5, r7, pc}

08001770 <_ZNKSt14_Optional_baseIN8kocherga20BootloaderController13AppDescriptorEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_engaged; }
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_ZNKSt14_Optional_baseIN8kocherga7AppInfoEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_engaged; }
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7e1b      	ldrb	r3, [r3, #24]
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_ZNSt14_Optional_baseIN8kocherga7AppInfoEE6_M_getEv>:
      _M_get() noexcept
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_payload; }
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_ZNSt14_Optional_baseIN8kocherga7AppInfoEE12_M_constructIJRKS1_EEEvDpOT_>:
        _M_construct(_Args&&... __args)
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
          ::new (std::__addressof(this->_M_payload._M_payload))
 80017c2:	6838      	ldr	r0, [r7, #0]
 80017c4:	f7ff fee2 	bl	800158c <_ZSt7forwardIRKN8kocherga7AppInfoEEOT_RNSt16remove_referenceIS4_E4typeE>
 80017c8:	4605      	mov	r5, r0
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 f841 	bl	8001854 <_ZSt11__addressofIN8kocherga7AppInfoEEPT_RS2_>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4619      	mov	r1, r3
 80017d6:	2018      	movs	r0, #24
 80017d8:	f7fe feca 	bl	8000570 <_ZnwjPv>
 80017dc:	4603      	mov	r3, r0
 80017de:	461c      	mov	r4, r3
 80017e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017e8:	e884 0003 	stmia.w	r4, {r0, r1}
          this->_M_payload._M_engaged = true;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	761a      	strb	r2, [r3, #24]
        }
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdb0      	pop	{r4, r5, r7, pc}

080017fa <_ZNSt14_Optional_baseIN8kocherga7AppInfoEE8_M_resetEv>:
      _M_reset()
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
        if (this->_M_payload._M_engaged)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7e1b      	ldrb	r3, [r3, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <_ZNSt14_Optional_baseIN8kocherga7AppInfoEE8_M_resetEv+0x16>
          this->_M_destruct();
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f82d 	bl	800186a <_ZNSt14_Optional_baseIN8kocherga7AppInfoEE11_M_destructEv>
      }
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_ZNSt7__equalILb1EE5equalIhEEbPKT_S4_S4_>:
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
	  if (const size_t __len = (__last1 - __first1))
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <_ZNSt7__equalILb1EE5equalIhEEbPKT_S4_S4_+0x32>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f003 ff34 	bl	80056a4 <memcmp>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	bf0c      	ite	eq
 8001842:	2301      	moveq	r3, #1
 8001844:	2300      	movne	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	e000      	b.n	800184c <_ZNSt7__equalILb1EE5equalIhEEbPKT_S4_S4_+0x34>
	  return true;
 800184a:	2301      	movs	r3, #1
	}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_ZSt11__addressofIN8kocherga7AppInfoEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_ZNSt14_Optional_baseIN8kocherga7AppInfoEE11_M_destructEv>:
      _M_destruct()
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
        this->_M_payload._M_engaged = false;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	761a      	strb	r2, [r3, #24]
      }
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_ZN16STM32IROMBackendD1Ev>:
    ~STM32IROMBackend() = default;
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_ZN16STM32IROMBackendD1Ev+0x20>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fb9d 	bl	8000fd4 <_ZN8kocherga11IROMBackendD1Ev>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	08006554 	.word	0x08006554

080018a8 <_ZN16STM32IROMBackendD0Ev>:
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffe7 	bl	8001884 <_ZN16STM32IROMBackendD1Ev>
 80018b6:	2108      	movs	r1, #8
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f003 fe86 	bl	80055ca <_ZdlPvj>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZN13STM32PlatformD1Ev>:
    ~STM32Platform() = default;
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <_ZN13STM32PlatformD1Ev+0x20>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fb5b 	bl	8000f94 <_ZN8kocherga9IPlatformD1Ev>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	08006574 	.word	0x08006574

080018ec <_ZN13STM32PlatformD0Ev>:
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ffe7 	bl	80018c8 <_ZN13STM32PlatformD1Ev>
 80018fa:	2104      	movs	r1, #4
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f003 fe64 	bl	80055ca <_ZdlPvj>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_MspInit+0x4c>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <HAL_MspInit+0x4c>)
 800191c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001920:	6453      	str	r3, [r2, #68]	; 0x44
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_MspInit+0x4c>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_MspInit+0x4c>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <HAL_MspInit+0x4c>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_MspInit+0x4c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800194a:	2007      	movs	r0, #7
 800194c:	f000 faa6 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800

0800195c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_UART_MspInit+0x84>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d12b      	bne.n	80019d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_UART_MspInit+0x88>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <HAL_UART_MspInit+0x88>)
 8001988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_UART_MspInit+0x88>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_UART_MspInit+0x88>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <HAL_UART_MspInit+0x88>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_UART_MspInit+0x88>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019b6:	230c      	movs	r3, #12
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019c6:	2307      	movs	r3, #7
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <HAL_UART_MspInit+0x8c>)
 80019d2:	f000 fd6d 	bl	80024b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	; 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40004400 	.word	0x40004400
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020000 	.word	0x40020000

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <HardFault_Handler+0x4>

08001a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <MemManage_Handler+0x4>

08001a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a40:	f000 f95a 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <OTG_FS_IRQHandler+0x10>)
 8001a4e:	f000 fee2 	bl	8002816 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000100 	.word	0x20000100

08001a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	return 1;
 8001a60:	2301      	movs	r3, #1
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_kill>:

int _kill(int pid, int sig)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a76:	f003 fdd1 	bl	800561c <__errno>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	2316      	movs	r3, #22
 8001a7e:	6013      	str	r3, [r2, #0]
	return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_exit>:

void _exit (int status)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ffe7 	bl	8001a6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a9e:	e7fe      	b.n	8001a9e <_exit+0x12>

08001aa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	e00a      	b.n	8001ac8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ab2:	f3af 8000 	nop.w
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	60ba      	str	r2, [r7, #8]
 8001abe:	b2ca      	uxtb	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbf0      	blt.n	8001ab2 <_read+0x12>
	}

return len;
 8001ad0:	687b      	ldr	r3, [r7, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e009      	b.n	8001b00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	60ba      	str	r2, [r7, #8]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf1      	blt.n	8001aec <_write+0x12>
	}
	return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_close>:

int _close(int file)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
	return -1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_isatty>:

int _isatty(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
	return 1;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <_sbrk+0x50>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <_sbrk+0x16>
		heap_end = &end;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <_sbrk+0x50>)
 8001b8e:	4a10      	ldr	r2, [pc, #64]	; (8001bd0 <_sbrk+0x54>)
 8001b90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <_sbrk+0x50>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <_sbrk+0x50>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	466a      	mov	r2, sp
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d907      	bls.n	8001bb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ba6:	f003 fd39 	bl	800561c <__errno>
 8001baa:	4602      	mov	r2, r0
 8001bac:	230c      	movs	r3, #12
 8001bae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb4:	e006      	b.n	8001bc4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <_sbrk+0x50>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <_sbrk+0x50>)
 8001bc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200000d0 	.word	0x200000d0
 8001bd0:	200003c8 	.word	0x200003c8

08001bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <SystemInit+0x28>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bde:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <SystemInit+0x28>)
 8001be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SystemInit+0x28>)
 8001bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bee:	609a      	str	r2, [r3, #8]
#endif
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c06:	e003      	b.n	8001c10 <LoopCopyDataInit>

08001c08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c0e:	3104      	adds	r1, #4

08001c10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c18:	d3f6      	bcc.n	8001c08 <CopyDataInit>
  ldr  r2, =_sbss
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c1c:	e002      	b.n	8001c24 <LoopFillZerobss>

08001c1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c20:	f842 3b04 	str.w	r3, [r2], #4

08001c24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c28:	d3f9      	bcc.n	8001c1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c2a:	f7ff ffd3 	bl	8001bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f003 fd0d 	bl	800564c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c32:	f7ff f9ef 	bl	8001014 <main>
  bx  lr    
 8001c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c3c:	080066f4 	.word	0x080066f4
  ldr  r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c44:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001c48:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001c4c:	200003c8 	.word	0x200003c8

08001c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <HAL_Init+0x40>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_Init+0x40>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_Init+0x40>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f90d 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f000 f808 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff fe40 	bl	800190c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_InitTick+0x54>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_InitTick+0x58>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f917 	bl	8001eea <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d80a      	bhi.n	8001ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cd4:	f000 f8ed 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4a06      	ldr	r2, [pc, #24]	; (8001cf4 <HAL_InitTick+0x5c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000004 	.word	0x20000004

08001cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_IncTick+0x20>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x24>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <HAL_IncTick+0x24>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000008 	.word	0x20000008
 8001d1c:	200000dc 	.word	0x200000dc

08001d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return uwTick;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_GetTick+0x14>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	200000dc 	.word	0x200000dc

08001d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	; (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	; (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e7c:	f7ff ff8e 	bl	8001d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff47 	bl	8001d38 <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff5c 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff8e 	bl	8001df0 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5d 	bl	8001d9c <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffb0 	bl	8001e58 <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_FLASH_Program+0xa0>)
 8001f18:	7e1b      	ldrb	r3, [r3, #24]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_FLASH_Program+0x1e>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e03b      	b.n	8001f9a <HAL_FLASH_Program+0x96>
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_FLASH_Program+0xa0>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f2c:	f000 f870 	bl	8002010 <FLASH_WaitForLastOperation>
 8001f30:	4603      	mov	r3, r0
 8001f32:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d12b      	bne.n	8001f92 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001f40:	783b      	ldrb	r3, [r7, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	68b8      	ldr	r0, [r7, #8]
 8001f46:	f000 f919 	bl	800217c <FLASH_Program_Byte>
 8001f4a:	e016      	b.n	8001f7a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d105      	bne.n	8001f5e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001f52:	883b      	ldrh	r3, [r7, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	68b8      	ldr	r0, [r7, #8]
 8001f58:	f000 f8ec 	bl	8002134 <FLASH_Program_HalfWord>
 8001f5c:	e00d      	b.n	8001f7a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d105      	bne.n	8001f70 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4619      	mov	r1, r3
 8001f68:	68b8      	ldr	r0, [r7, #8]
 8001f6a:	f000 f8c1 	bl	80020f0 <FLASH_Program_Word>
 8001f6e:	e004      	b.n	8001f7a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f74:	68b8      	ldr	r0, [r7, #8]
 8001f76:	f000 f88b 	bl	8002090 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f7e:	f000 f847 	bl	8002010 <FLASH_WaitForLastOperation>
 8001f82:	4603      	mov	r3, r0
 8001f84:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_FLASH_Program+0xa4>)
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <HAL_FLASH_Program+0xa4>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <HAL_FLASH_Program+0xa0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200000e0 	.word	0x200000e0
 8001fa8:	40023c00 	.word	0x40023c00

08001fac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_FLASH_Unlock+0x38>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	da0b      	bge.n	8001fd6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_FLASH_Unlock+0x38>)
 8001fc0:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_FLASH_Unlock+0x3c>)
 8001fc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_FLASH_Unlock+0x38>)
 8001fc6:	4a09      	ldr	r2, [pc, #36]	; (8001fec <HAL_FLASH_Unlock+0x40>)
 8001fc8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_FLASH_Unlock+0x38>)
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	da01      	bge.n	8001fd6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40023c00 	.word	0x40023c00
 8001fe8:	45670123 	.word	0x45670123
 8001fec:	cdef89ab 	.word	0xcdef89ab

08001ff0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_FLASH_Lock+0x1c>)
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_FLASH_Lock+0x1c>)
 8001ffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ffe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40023c00 	.word	0x40023c00

08002010 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <FLASH_WaitForLastOperation+0x78>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002022:	f7ff fe7d 	bl	8001d20 <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002028:	e010      	b.n	800204c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002030:	d00c      	beq.n	800204c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <FLASH_WaitForLastOperation+0x38>
 8002038:	f7ff fe72 	bl	8001d20 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	d201      	bcs.n	800204c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e019      	b.n	8002080 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <FLASH_WaitForLastOperation+0x7c>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e8      	bne.n	800202a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <FLASH_WaitForLastOperation+0x7c>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <FLASH_WaitForLastOperation+0x7c>)
 8002066:	2201      	movs	r2, #1
 8002068:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <FLASH_WaitForLastOperation+0x7c>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002076:	f000 f8a3 	bl	80021c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
  
}  
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200000e0 	.word	0x200000e0
 800208c:	40023c00 	.word	0x40023c00

08002090 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002090:	b490      	push	{r4, r7}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <FLASH_Program_DoubleWord+0x5c>)
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	4a12      	ldr	r2, [pc, #72]	; (80020ec <FLASH_Program_DoubleWord+0x5c>)
 80020a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80020a8:	4b10      	ldr	r3, [pc, #64]	; (80020ec <FLASH_Program_DoubleWord+0x5c>)
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <FLASH_Program_DoubleWord+0x5c>)
 80020ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80020b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <FLASH_Program_DoubleWord+0x5c>)
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	4a0c      	ldr	r2, [pc, #48]	; (80020ec <FLASH_Program_DoubleWord+0x5c>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80020c6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80020ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	f04f 0400 	mov.w	r4, #0
 80020d6:	0013      	movs	r3, r2
 80020d8:	2400      	movs	r4, #0
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	3204      	adds	r2, #4
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc90      	pop	{r4, r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023c00 	.word	0x40023c00

080020f0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <FLASH_Program_Word+0x40>)
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <FLASH_Program_Word+0x40>)
 8002100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002104:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <FLASH_Program_Word+0x40>)
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <FLASH_Program_Word+0x40>)
 800210c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002110:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <FLASH_Program_Word+0x40>)
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	4a06      	ldr	r2, [pc, #24]	; (8002130 <FLASH_Program_Word+0x40>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	601a      	str	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40023c00 	.word	0x40023c00

08002134 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <FLASH_Program_HalfWord+0x44>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <FLASH_Program_HalfWord+0x44>)
 8002146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800214a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <FLASH_Program_HalfWord+0x44>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4a09      	ldr	r2, [pc, #36]	; (8002178 <FLASH_Program_HalfWord+0x44>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002156:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <FLASH_Program_HalfWord+0x44>)
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4a06      	ldr	r2, [pc, #24]	; (8002178 <FLASH_Program_HalfWord+0x44>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	801a      	strh	r2, [r3, #0]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023c00 	.word	0x40023c00

0800217c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <FLASH_Program_Byte+0x40>)
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <FLASH_Program_Byte+0x40>)
 800218e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002192:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <FLASH_Program_Byte+0x40>)
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <FLASH_Program_Byte+0x40>)
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <FLASH_Program_Byte+0x40>)
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	4a06      	ldr	r2, [pc, #24]	; (80021bc <FLASH_Program_Byte+0x40>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	701a      	strb	r2, [r3, #0]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023c00 	.word	0x40023c00

080021c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <FLASH_SetErrorCode+0xa4>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <FLASH_SetErrorCode+0xa8>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	4a23      	ldr	r2, [pc, #140]	; (8002268 <FLASH_SetErrorCode+0xa8>)
 80021da:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80021dc:	4b21      	ldr	r3, [pc, #132]	; (8002264 <FLASH_SetErrorCode+0xa4>)
 80021de:	2210      	movs	r2, #16
 80021e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <FLASH_SetErrorCode+0xa4>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80021ee:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <FLASH_SetErrorCode+0xa8>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f043 0308 	orr.w	r3, r3, #8
 80021f6:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <FLASH_SetErrorCode+0xa8>)
 80021f8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <FLASH_SetErrorCode+0xa4>)
 80021fc:	2220      	movs	r2, #32
 80021fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002200:	4b18      	ldr	r3, [pc, #96]	; (8002264 <FLASH_SetErrorCode+0xa4>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <FLASH_SetErrorCode+0xa8>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <FLASH_SetErrorCode+0xa8>)
 8002216:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <FLASH_SetErrorCode+0xa4>)
 800221a:	2240      	movs	r2, #64	; 0x40
 800221c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <FLASH_SetErrorCode+0xa4>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002226:	2b00      	cmp	r3, #0
 8002228:	d008      	beq.n	800223c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <FLASH_SetErrorCode+0xa8>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f043 0302 	orr.w	r3, r3, #2
 8002232:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <FLASH_SetErrorCode+0xa8>)
 8002234:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <FLASH_SetErrorCode+0xa4>)
 8002238:	2280      	movs	r2, #128	; 0x80
 800223a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <FLASH_SetErrorCode+0xa4>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <FLASH_SetErrorCode+0xa8>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f043 0320 	orr.w	r3, r3, #32
 8002250:	4a05      	ldr	r2, [pc, #20]	; (8002268 <FLASH_SetErrorCode+0xa8>)
 8002252:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <FLASH_SetErrorCode+0xa4>)
 8002256:	2202      	movs	r2, #2
 8002258:	60da      	str	r2, [r3, #12]
  }
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40023c00 	.word	0x40023c00
 8002268:	200000e0 	.word	0x200000e0

0800226c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800227e:	4b31      	ldr	r3, [pc, #196]	; (8002344 <HAL_FLASHEx_Erase+0xd8>)
 8002280:	7e1b      	ldrb	r3, [r3, #24]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_FLASHEx_Erase+0x1e>
 8002286:	2302      	movs	r3, #2
 8002288:	e058      	b.n	800233c <HAL_FLASHEx_Erase+0xd0>
 800228a:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <HAL_FLASHEx_Erase+0xd8>)
 800228c:	2201      	movs	r2, #1
 800228e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002290:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002294:	f7ff febc 	bl	8002010 <FLASH_WaitForLastOperation>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d148      	bne.n	8002334 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022a8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d115      	bne.n	80022de <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f000 f844 	bl	800234c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022c8:	f7ff fea2 	bl	8002010 <FLASH_WaitForLastOperation>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_FLASHEx_Erase+0xdc>)
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <HAL_FLASHEx_Erase+0xdc>)
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	6113      	str	r3, [r2, #16]
 80022dc:	e028      	b.n	8002330 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	e01c      	b.n	8002320 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	4619      	mov	r1, r3
 80022ee:	68b8      	ldr	r0, [r7, #8]
 80022f0:	f000 f850 	bl	8002394 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022f8:	f7ff fe8a 	bl	8002010 <FLASH_WaitForLastOperation>
 80022fc:	4603      	mov	r3, r0
 80022fe:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_FLASHEx_Erase+0xdc>)
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	4a10      	ldr	r2, [pc, #64]	; (8002348 <HAL_FLASHEx_Erase+0xdc>)
 8002306:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800230a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	601a      	str	r2, [r3, #0]
          break;
 8002318:	e00a      	b.n	8002330 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3301      	adds	r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4413      	add	r3, r2
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	429a      	cmp	r2, r3
 800232e:	d3da      	bcc.n	80022e6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002330:	f000 f878 	bl	8002424 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_FLASHEx_Erase+0xd8>)
 8002336:	2200      	movs	r2, #0
 8002338:	761a      	strb	r2, [r3, #24]

  return status;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200000e0 	.word	0x200000e0
 8002348:	40023c00 	.word	0x40023c00

0800234c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <FLASH_MassErase+0x44>)
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <FLASH_MassErase+0x44>)
 800235e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002362:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <FLASH_MassErase+0x44>)
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	4a09      	ldr	r2, [pc, #36]	; (8002390 <FLASH_MassErase+0x44>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <FLASH_MassErase+0x44>)
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	4313      	orrs	r3, r2
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <FLASH_MassErase+0x44>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6113      	str	r3, [r2, #16]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00

08002394 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e010      	b.n	80023d2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d103      	bne.n	80023be <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80023b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e009      	b.n	80023d2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d103      	bne.n	80023cc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80023c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e002      	b.n	80023d2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80023cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <FLASH_Erase_Sector+0x8c>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <FLASH_Erase_Sector+0x8c>)
 80023d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <FLASH_Erase_Sector+0x8c>)
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	490f      	ldr	r1, [pc, #60]	; (8002420 <FLASH_Erase_Sector+0x8c>)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <FLASH_Erase_Sector+0x8c>)
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <FLASH_Erase_Sector+0x8c>)
 80023f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <FLASH_Erase_Sector+0x8c>)
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4313      	orrs	r3, r2
 8002400:	4a07      	ldr	r2, [pc, #28]	; (8002420 <FLASH_Erase_Sector+0x8c>)
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <FLASH_Erase_Sector+0x8c>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <FLASH_Erase_Sector+0x8c>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002412:	6113      	str	r3, [r2, #16]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40023c00 	.word	0x40023c00

08002424 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002428:	4b20      	ldr	r3, [pc, #128]	; (80024ac <FLASH_FlushCaches+0x88>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002430:	2b00      	cmp	r3, #0
 8002432:	d017      	beq.n	8002464 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <FLASH_FlushCaches+0x88>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <FLASH_FlushCaches+0x88>)
 800243a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800243e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002440:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <FLASH_FlushCaches+0x88>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a19      	ldr	r2, [pc, #100]	; (80024ac <FLASH_FlushCaches+0x88>)
 8002446:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <FLASH_FlushCaches+0x88>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a16      	ldr	r2, [pc, #88]	; (80024ac <FLASH_FlushCaches+0x88>)
 8002452:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002456:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <FLASH_FlushCaches+0x88>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a13      	ldr	r2, [pc, #76]	; (80024ac <FLASH_FlushCaches+0x88>)
 800245e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002462:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <FLASH_FlushCaches+0x88>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d017      	beq.n	80024a0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <FLASH_FlushCaches+0x88>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <FLASH_FlushCaches+0x88>)
 8002476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800247a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <FLASH_FlushCaches+0x88>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <FLASH_FlushCaches+0x88>)
 8002482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <FLASH_FlushCaches+0x88>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a07      	ldr	r2, [pc, #28]	; (80024ac <FLASH_FlushCaches+0x88>)
 800248e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002492:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <FLASH_FlushCaches+0x88>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <FLASH_FlushCaches+0x88>)
 800249a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800249e:	6013      	str	r3, [r2, #0]
  }
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023c00 	.word	0x40023c00

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	e16b      	b.n	80027a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f040 815a 	bne.w	800279e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d00b      	beq.n	800250a <HAL_GPIO_Init+0x5a>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024fe:	2b11      	cmp	r3, #17
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b12      	cmp	r3, #18
 8002508:	d130      	bne.n	800256c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002540:	2201      	movs	r2, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 0201 	and.w	r2, r3, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0xfc>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b12      	cmp	r3, #18
 80025aa:	d123      	bne.n	80025f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	220f      	movs	r2, #15
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	08da      	lsrs	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3208      	adds	r2, #8
 80025ee:	69b9      	ldr	r1, [r7, #24]
 80025f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0203 	and.w	r2, r3, #3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80b4 	beq.w	800279e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b5f      	ldr	r3, [pc, #380]	; (80027b8 <HAL_GPIO_Init+0x308>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a5e      	ldr	r2, [pc, #376]	; (80027b8 <HAL_GPIO_Init+0x308>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <HAL_GPIO_Init+0x308>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002652:	4a5a      	ldr	r2, [pc, #360]	; (80027bc <HAL_GPIO_Init+0x30c>)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a51      	ldr	r2, [pc, #324]	; (80027c0 <HAL_GPIO_Init+0x310>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d02b      	beq.n	80026d6 <HAL_GPIO_Init+0x226>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a50      	ldr	r2, [pc, #320]	; (80027c4 <HAL_GPIO_Init+0x314>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d025      	beq.n	80026d2 <HAL_GPIO_Init+0x222>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4f      	ldr	r2, [pc, #316]	; (80027c8 <HAL_GPIO_Init+0x318>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01f      	beq.n	80026ce <HAL_GPIO_Init+0x21e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4e      	ldr	r2, [pc, #312]	; (80027cc <HAL_GPIO_Init+0x31c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d019      	beq.n	80026ca <HAL_GPIO_Init+0x21a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4d      	ldr	r2, [pc, #308]	; (80027d0 <HAL_GPIO_Init+0x320>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0x216>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4c      	ldr	r2, [pc, #304]	; (80027d4 <HAL_GPIO_Init+0x324>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x212>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4b      	ldr	r2, [pc, #300]	; (80027d8 <HAL_GPIO_Init+0x328>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x20e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4a      	ldr	r2, [pc, #296]	; (80027dc <HAL_GPIO_Init+0x32c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x20a>
 80026b6:	2307      	movs	r3, #7
 80026b8:	e00e      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026ba:	2308      	movs	r3, #8
 80026bc:	e00c      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026be:	2306      	movs	r3, #6
 80026c0:	e00a      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026c2:	2305      	movs	r3, #5
 80026c4:	e008      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026c6:	2304      	movs	r3, #4
 80026c8:	e006      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026ca:	2303      	movs	r3, #3
 80026cc:	e004      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e002      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026d6:	2300      	movs	r3, #0
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	f002 0203 	and.w	r2, r2, #3
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	4093      	lsls	r3, r2
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e8:	4934      	ldr	r1, [pc, #208]	; (80027bc <HAL_GPIO_Init+0x30c>)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	3302      	adds	r3, #2
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f6:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <HAL_GPIO_Init+0x330>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271a:	4a31      	ldr	r2, [pc, #196]	; (80027e0 <HAL_GPIO_Init+0x330>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002720:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <HAL_GPIO_Init+0x330>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002744:	4a26      	ldr	r2, [pc, #152]	; (80027e0 <HAL_GPIO_Init+0x330>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274a:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_GPIO_Init+0x330>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276e:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <HAL_GPIO_Init+0x330>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <HAL_GPIO_Init+0x330>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002798:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_GPIO_Init+0x330>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3301      	adds	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	f67f ae90 	bls.w	80024cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027ac:	bf00      	nop
 80027ae:	3724      	adds	r7, #36	; 0x24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40013800 	.word	0x40013800
 80027c0:	40020000 	.word	0x40020000
 80027c4:	40020400 	.word	0x40020400
 80027c8:	40020800 	.word	0x40020800
 80027cc:	40020c00 	.word	0x40020c00
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40021400 	.word	0x40021400
 80027d8:	40021800 	.word	0x40021800
 80027dc:	40021c00 	.word	0x40021c00
 80027e0:	40013c00 	.word	0x40013c00

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002800:	e003      	b.n	800280a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	041a      	lsls	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	619a      	str	r2, [r3, #24]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f002 fb35 	bl	8004e9c <USB_GetMode>
 8002832:	4603      	mov	r3, r0
 8002834:	2b01      	cmp	r3, #1
 8002836:	f040 80f1 	bne.w	8002a1c <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f002 fb19 	bl	8004e76 <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80e7 	beq.w	8002a1a <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f002 fb10 	bl	8004e76 <USB_ReadInterrupts>
 8002856:	4603      	mov	r3, r0
 8002858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002860:	d104      	bne.n	800286c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800286a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f002 fb00 	bl	8004e76 <USB_ReadInterrupts>
 8002876:	4603      	mov	r3, r0
 8002878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002880:	d104      	bne.n	800288c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800288a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f002 faf0 	bl	8004e76 <USB_ReadInterrupts>
 8002896:	4603      	mov	r3, r0
 8002898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800289c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028a0:	d104      	bne.n	80028ac <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80028aa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 fae0 	bl	8004e76 <USB_ReadInterrupts>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d103      	bne.n	80028c8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2202      	movs	r2, #2
 80028c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 fad2 	bl	8004e76 <USB_ReadInterrupts>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028dc:	d117      	bne.n	800290e <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80028ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80028f0:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f002 fdba 	bl	800546c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f002 fada 	bl	8004eb8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800290c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f002 faaf 	bl	8004e76 <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002922:	d102      	bne.n	800292a <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f001 f875 	bl	8003a14 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f002 faa1 	bl	8004e76 <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b08      	cmp	r3, #8
 800293c:	d106      	bne.n	800294c <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f002 fd78 	bl	8005434 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2208      	movs	r2, #8
 800294a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f002 fa90 	bl	8004e76 <USB_ReadInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002960:	d138      	bne.n	80029d4 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f002 fb19 	bl	8004f9e <USB_HC_ReadInterrupt>
 800296c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e025      	b.n	80029c0 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d018      	beq.n	80029ba <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800299a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299e:	d106      	bne.n	80029ae <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f87b 	bl	8002aa2 <HCD_HC_IN_IRQHandler>
 80029ac:	e005      	b.n	80029ba <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fc0b 	bl	80031d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3301      	adds	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d3d4      	bcc.n	8002974 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f002 fa4c 	bl	8004e76 <USB_ReadInterrupts>
 80029de:	4603      	mov	r3, r0
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d101      	bne.n	80029ec <HAL_HCD_IRQHandler+0x1d6>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_HCD_IRQHandler+0x1d8>
 80029ec:	2300      	movs	r3, #0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d014      	beq.n	8002a1c <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699a      	ldr	r2, [r3, #24]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0210 	bic.w	r2, r2, #16
 8002a00:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 ff5a 	bl	80038bc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0210 	orr.w	r2, r2, #16
 8002a16:	619a      	str	r2, [r3, #24]
 8002a18:	e000      	b.n	8002a1c <HAL_HCD_IRQHandler+0x206>
      return;
 8002a1a:	bf00      	nop
    }
  }
}
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_HCD_Start+0x16>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e013      	b.n	8002a60 <HAL_HCD_Start+0x3e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 f983 	bl	8004d50 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 fa6b 	bl	8004f2c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_HCD_Stop+0x16>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e00d      	b.n	8002a9a <HAL_HCD_Stop+0x32>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f002 fb97 	bl	80051be <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b086      	sub	sp, #24
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d119      	bne.n	8002b06 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	0151      	lsls	r1, r2, #5
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	440a      	add	r2, r1
 8002afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002afe:	f043 0302 	orr.w	r3, r3, #2
 8002b02:	60d3      	str	r3, [r2, #12]
 8002b04:	e095      	b.n	8002c32 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d109      	bne.n	8002b30 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	6093      	str	r3, [r2, #8]
 8002b2e:	e080      	b.n	8002c32 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d134      	bne.n	8002bb0 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	0151      	lsls	r1, r2, #5
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	440a      	add	r2, r1
 8002b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	440b      	add	r3, r1
 8002b74:	335d      	adds	r3, #93	; 0x5d
 8002b76:	2205      	movs	r2, #5
 8002b78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	461a      	mov	r2, r3
 8002b88:	2310      	movs	r3, #16
 8002b8a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f002 fa09 	bl	8004fc0 <USB_HC_Halt>
 8002bae:	e040      	b.n	8002c32 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc6:	d134      	bne.n	8002c32 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	0151      	lsls	r1, r2, #5
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	440a      	add	r2, r1
 8002bde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002be2:	f043 0302 	orr.w	r3, r3, #2
 8002be6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 f9e4 	bl	8004fc0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	461a      	mov	r2, r3
 8002c06:	2310      	movs	r3, #16
 8002c08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	335d      	adds	r3, #93	; 0x5d
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c30:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c48:	d122      	bne.n	8002c90 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	0151      	lsls	r1, r2, #5
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	440a      	add	r2, r1
 8002c60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 f9a3 	bl	8004fc0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	461a      	mov	r2, r3
 8002c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c8c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c8e:	e29b      	b.n	80031c8 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	f040 80c1 	bne.w	8002e2a <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01b      	beq.n	8002ce8 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3348      	adds	r3, #72	; 0x48
 8002cc0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	0159      	lsls	r1, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	440b      	add	r3, r1
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002cd4:	1ad1      	subs	r1, r2, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4403      	add	r3, r0
 8002ce4:	334c      	adds	r3, #76	; 0x4c
 8002ce6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	335d      	adds	r3, #93	; 0x5d
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	3358      	adds	r3, #88	; 0x58
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2301      	movs	r3, #1
 8002d20:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	333f      	adds	r3, #63	; 0x3f
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	333f      	adds	r3, #63	; 0x3f
 8002d48:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d121      	bne.n	8002d92 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	0151      	lsls	r1, r2, #5
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	440a      	add	r2, r1
 8002d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f002 f921 	bl	8004fc0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	6093      	str	r3, [r2, #8]
 8002d90:	e034      	b.n	8002dfc <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	440b      	add	r3, r1
 8002da0:	333f      	adds	r3, #63	; 0x3f
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d129      	bne.n	8002dfc <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	0151      	lsls	r1, r2, #5
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	440a      	add	r2, r1
 8002dbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002dc6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	335c      	adds	r3, #92	; 0x5c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	b2d8      	uxtb	r0, r3
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	335c      	adds	r3, #92	; 0x5c
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4601      	mov	r1, r0
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f002 fb46 	bl	8005488 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	3350      	adds	r3, #80	; 0x50
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	f083 0301 	eor.w	r3, r3, #1
 8002e12:	b2d8      	uxtb	r0, r3
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	3350      	adds	r3, #80	; 0x50
 8002e24:	4602      	mov	r2, r0
 8002e26:	701a      	strb	r2, [r3, #0]
}
 8002e28:	e1ce      	b.n	80031c8 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	f040 80f1 	bne.w	8003024 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	0151      	lsls	r1, r2, #5
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	440a      	add	r2, r1
 8002e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e5c:	f023 0302 	bic.w	r3, r3, #2
 8002e60:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	335d      	adds	r3, #93	; 0x5d
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10a      	bne.n	8002e8e <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	335c      	adds	r3, #92	; 0x5c
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e0b0      	b.n	8002ff0 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	335d      	adds	r3, #93	; 0x5d
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d10a      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	335c      	adds	r3, #92	; 0x5c
 8002eb4:	2205      	movs	r2, #5
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	e09a      	b.n	8002ff0 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	440b      	add	r3, r1
 8002ec8:	335d      	adds	r3, #93	; 0x5d
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b06      	cmp	r3, #6
 8002ece:	d00a      	beq.n	8002ee6 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	440b      	add	r3, r1
 8002ede:	335d      	adds	r3, #93	; 0x5d
 8002ee0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d156      	bne.n	8002f94 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3358      	adds	r3, #88	; 0x58
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	1c59      	adds	r1, r3, #1
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4403      	add	r3, r0
 8002f08:	3358      	adds	r3, #88	; 0x58
 8002f0a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	3358      	adds	r3, #88	; 0x58
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d914      	bls.n	8002f4c <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	440b      	add	r3, r1
 8002f30:	3358      	adds	r3, #88	; 0x58
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	440b      	add	r3, r1
 8002f44:	335c      	adds	r3, #92	; 0x5c
 8002f46:	2204      	movs	r2, #4
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e009      	b.n	8002f60 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	440b      	add	r3, r1
 8002f5a:	335c      	adds	r3, #92	; 0x5c
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f76:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f7e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e02d      	b.n	8002ff0 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	440b      	add	r3, r1
 8002fa2:	335d      	adds	r3, #93	; 0x5d
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d122      	bne.n	8002ff0 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	440b      	add	r3, r1
 8002fb8:	335c      	adds	r3, #92	; 0x5c
 8002fba:	2202      	movs	r2, #2
 8002fbc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fd4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fdc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fea:	461a      	mov	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2302      	movs	r3, #2
 8003000:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	b2d8      	uxtb	r0, r3
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	440b      	add	r3, r1
 8003014:	335c      	adds	r3, #92	; 0x5c
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4601      	mov	r1, r0
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f002 fa33 	bl	8005488 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003022:	e0d1      	b.n	80031c8 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b80      	cmp	r3, #128	; 0x80
 8003038:	d13e      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	0151      	lsls	r1, r2, #5
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	440a      	add	r2, r1
 8003050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	3358      	adds	r3, #88	; 0x58
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	1c59      	adds	r1, r3, #1
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4403      	add	r3, r0
 800307c:	3358      	adds	r3, #88	; 0x58
 800307e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	335d      	adds	r3, #93	; 0x5d
 8003090:	2206      	movs	r2, #6
 8003092:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 ff8e 	bl	8004fc0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	461a      	mov	r2, r3
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	6093      	str	r3, [r2, #8]
}
 80030b6:	e087      	b.n	80031c8 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	2b10      	cmp	r3, #16
 80030cc:	d17c      	bne.n	80031c8 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	440b      	add	r3, r1
 80030dc:	333f      	adds	r3, #63	; 0x3f
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d122      	bne.n	800312a <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	440b      	add	r3, r1
 80030f2:	3358      	adds	r3, #88	; 0x58
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	0151      	lsls	r1, r2, #5
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	440a      	add	r2, r1
 800310e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003112:	f043 0302 	orr.w	r3, r3, #2
 8003116:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f001 ff4c 	bl	8004fc0 <USB_HC_Halt>
 8003128:	e045      	b.n	80031b6 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	333f      	adds	r3, #63	; 0x3f
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	333f      	adds	r3, #63	; 0x3f
 8003150:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003152:	2b02      	cmp	r3, #2
 8003154:	d12f      	bne.n	80031b6 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	3358      	adds	r3, #88	; 0x58
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d121      	bne.n	80031b6 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	440b      	add	r3, r1
 8003180:	335d      	adds	r3, #93	; 0x5d
 8003182:	2203      	movs	r2, #3
 8003184:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	0151      	lsls	r1, r2, #5
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	440a      	add	r2, r1
 800319c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a0:	f043 0302 	orr.w	r3, r3, #2
 80031a4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f001 ff05 	bl	8004fc0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c2:	461a      	mov	r2, r3
 80031c4:	2310      	movs	r3, #16
 80031c6:	6093      	str	r3, [r2, #8]
}
 80031c8:	bf00      	nop
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d119      	bne.n	8003234 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	461a      	mov	r2, r3
 800320e:	2304      	movs	r3, #4
 8003210:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	0151      	lsls	r1, r2, #5
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	440a      	add	r2, r1
 8003228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800322c:	f043 0302 	orr.w	r3, r3, #2
 8003230:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003232:	e33e      	b.n	80038b2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b20      	cmp	r3, #32
 8003248:	d141      	bne.n	80032ce <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003256:	461a      	mov	r2, r3
 8003258:	2320      	movs	r3, #32
 800325a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	333d      	adds	r3, #61	; 0x3d
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	f040 831f 	bne.w	80038b2 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	440b      	add	r3, r1
 8003282:	333d      	adds	r3, #61	; 0x3d
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	335c      	adds	r3, #92	; 0x5c
 8003298:	2202      	movs	r2, #2
 800329a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	0151      	lsls	r1, r2, #5
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	440a      	add	r2, r1
 80032b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 fe7a 	bl	8004fc0 <USB_HC_Halt>
}
 80032cc:	e2f1      	b.n	80038b2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d13f      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	335d      	adds	r3, #93	; 0x5d
 80032f4:	2204      	movs	r2, #4
 80032f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	440b      	add	r3, r1
 8003306:	333d      	adds	r3, #61	; 0x3d
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	440b      	add	r3, r1
 800331a:	3358      	adds	r3, #88	; 0x58
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	0151      	lsls	r1, r2, #5
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	440a      	add	r2, r1
 8003336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800333a:	f043 0302 	orr.w	r3, r3, #2
 800333e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f001 fe38 	bl	8004fc0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	461a      	mov	r2, r3
 800335e:	2340      	movs	r3, #64	; 0x40
 8003360:	6093      	str	r3, [r2, #8]
}
 8003362:	e2a6      	b.n	80038b2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337a:	d122      	bne.n	80033c2 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	0151      	lsls	r1, r2, #5
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	440a      	add	r2, r1
 8003392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 fe0a 	bl	8004fc0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b8:	461a      	mov	r2, r3
 80033ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033be:	6093      	str	r3, [r2, #8]
}
 80033c0:	e277      	b.n	80038b2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d135      	bne.n	8003444 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	440b      	add	r3, r1
 80033e6:	3358      	adds	r3, #88	; 0x58
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	0151      	lsls	r1, r2, #5
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	440a      	add	r2, r1
 8003402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003406:	f043 0302 	orr.w	r3, r3, #2
 800340a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f001 fdd2 	bl	8004fc0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003428:	461a      	mov	r2, r3
 800342a:	2301      	movs	r3, #1
 800342c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	440b      	add	r3, r1
 800343c:	335d      	adds	r3, #93	; 0x5d
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
}
 8003442:	e236      	b.n	80038b2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b08      	cmp	r3, #8
 8003458:	d12b      	bne.n	80034b2 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4413      	add	r3, r2
 8003462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003466:	461a      	mov	r2, r3
 8003468:	2308      	movs	r3, #8
 800346a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	0151      	lsls	r1, r2, #5
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	440a      	add	r2, r1
 8003482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003486:	f043 0302 	orr.w	r3, r3, #2
 800348a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	4611      	mov	r1, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fd92 	bl	8004fc0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	440b      	add	r3, r1
 80034aa:	335d      	adds	r3, #93	; 0x5d
 80034ac:	2205      	movs	r2, #5
 80034ae:	701a      	strb	r2, [r3, #0]
}
 80034b0:	e1ff      	b.n	80038b2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d155      	bne.n	8003574 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	3358      	adds	r3, #88	; 0x58
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	335d      	adds	r3, #93	; 0x5d
 80034ec:	2203      	movs	r2, #3
 80034ee:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	333d      	adds	r3, #61	; 0x3d
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d114      	bne.n	8003530 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	333c      	adds	r3, #60	; 0x3c
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	440b      	add	r3, r1
 800352a:	333d      	adds	r3, #61	; 0x3d
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	0151      	lsls	r1, r2, #5
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	440a      	add	r2, r1
 8003546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800354a:	f043 0302 	orr.w	r3, r3, #2
 800354e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f001 fd30 	bl	8004fc0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	461a      	mov	r2, r3
 800356e:	2310      	movs	r3, #16
 8003570:	6093      	str	r3, [r2, #8]
}
 8003572:	e19e      	b.n	80038b2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b80      	cmp	r3, #128	; 0x80
 8003588:	d12b      	bne.n	80035e2 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	0151      	lsls	r1, r2, #5
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	440a      	add	r2, r1
 80035a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035a4:	f043 0302 	orr.w	r3, r3, #2
 80035a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 fd03 	bl	8004fc0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	440b      	add	r3, r1
 80035c8:	335d      	adds	r3, #93	; 0x5d
 80035ca:	2206      	movs	r2, #6
 80035cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035da:	461a      	mov	r2, r3
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	6093      	str	r3, [r2, #8]
}
 80035e0:	e167      	b.n	80038b2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f8:	d135      	bne.n	8003666 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4413      	add	r3, r2
 8003602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	0151      	lsls	r1, r2, #5
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	440a      	add	r2, r1
 8003610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f001 fccb 	bl	8004fc0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	461a      	mov	r2, r3
 8003638:	2310      	movs	r3, #16
 800363a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003648:	461a      	mov	r2, r3
 800364a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800364e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	440b      	add	r3, r1
 800365e:	335d      	adds	r3, #93	; 0x5d
 8003660:	2208      	movs	r2, #8
 8003662:	701a      	strb	r2, [r3, #0]
}
 8003664:	e125      	b.n	80038b2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	f040 811a 	bne.w	80038b2 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4413      	add	r3, r2
 8003686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	0151      	lsls	r1, r2, #5
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	440a      	add	r2, r1
 8003694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003698:	f023 0302 	bic.w	r3, r3, #2
 800369c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	440b      	add	r3, r1
 80036ac:	335d      	adds	r3, #93	; 0x5d
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d137      	bne.n	8003724 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	440b      	add	r3, r1
 80036c2:	335c      	adds	r3, #92	; 0x5c
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	440b      	add	r3, r1
 80036d6:	333f      	adds	r3, #63	; 0x3f
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d00b      	beq.n	80036f6 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	440b      	add	r3, r1
 80036ec:	333f      	adds	r3, #63	; 0x3f
 80036ee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	f040 80c5 	bne.w	8003880 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	440b      	add	r3, r1
 8003704:	3351      	adds	r3, #81	; 0x51
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	f083 0301 	eor.w	r3, r3, #1
 800370c:	b2d8      	uxtb	r0, r3
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	440b      	add	r3, r1
 800371c:	3351      	adds	r3, #81	; 0x51
 800371e:	4602      	mov	r2, r0
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e0ad      	b.n	8003880 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	440b      	add	r3, r1
 8003732:	335d      	adds	r3, #93	; 0x5d
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d10a      	bne.n	8003750 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	440b      	add	r3, r1
 8003748:	335c      	adds	r3, #92	; 0x5c
 800374a:	2202      	movs	r2, #2
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e097      	b.n	8003880 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	440b      	add	r3, r1
 800375e:	335d      	adds	r3, #93	; 0x5d
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b04      	cmp	r3, #4
 8003764:	d10a      	bne.n	800377c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	440b      	add	r3, r1
 8003774:	335c      	adds	r3, #92	; 0x5c
 8003776:	2202      	movs	r2, #2
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e081      	b.n	8003880 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	440b      	add	r3, r1
 800378a:	335d      	adds	r3, #93	; 0x5d
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b05      	cmp	r3, #5
 8003790:	d10a      	bne.n	80037a8 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	440b      	add	r3, r1
 80037a0:	335c      	adds	r3, #92	; 0x5c
 80037a2:	2205      	movs	r2, #5
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e06b      	b.n	8003880 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	440b      	add	r3, r1
 80037b6:	335d      	adds	r3, #93	; 0x5d
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d00a      	beq.n	80037d4 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	440b      	add	r3, r1
 80037cc:	335d      	adds	r3, #93	; 0x5d
 80037ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d155      	bne.n	8003880 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	440b      	add	r3, r1
 80037e2:	3358      	adds	r3, #88	; 0x58
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	1c59      	adds	r1, r3, #1
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4403      	add	r3, r0
 80037f6:	3358      	adds	r3, #88	; 0x58
 80037f8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	440b      	add	r3, r1
 8003808:	3358      	adds	r3, #88	; 0x58
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d914      	bls.n	800383a <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	440b      	add	r3, r1
 800381e:	3358      	adds	r3, #88	; 0x58
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	440b      	add	r3, r1
 8003832:	335c      	adds	r3, #92	; 0x5c
 8003834:	2204      	movs	r2, #4
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e009      	b.n	800384e <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	440b      	add	r3, r1
 8003848:	335c      	adds	r3, #92	; 0x5c
 800384a:	2202      	movs	r2, #2
 800384c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4413      	add	r3, r2
 8003856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003864:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800386c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387a:	461a      	mov	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	461a      	mov	r2, r3
 800388e:	2302      	movs	r3, #2
 8003890:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	b2d8      	uxtb	r0, r3
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	440b      	add	r3, r1
 80038a4:	335c      	adds	r3, #92	; 0x5c
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	4601      	mov	r1, r0
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f001 fdeb 	bl	8005488 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038b2:	bf00      	nop
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	0c5b      	lsrs	r3, r3, #17
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d003      	beq.n	8003900 <HCD_RXQLVL_IRQHandler+0x44>
 80038f8:	2b05      	cmp	r3, #5
 80038fa:	f000 8082 	beq.w	8003a02 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038fe:	e083      	b.n	8003a08 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d07f      	beq.n	8003a06 <HCD_RXQLVL_IRQHandler+0x14a>
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	440b      	add	r3, r1
 8003914:	3344      	adds	r3, #68	; 0x44
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d074      	beq.n	8003a06 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	3344      	adds	r3, #68	; 0x44
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	b292      	uxth	r2, r2
 8003936:	4619      	mov	r1, r3
 8003938:	f001 fa74 	bl	8004e24 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	440b      	add	r3, r1
 800394a:	3344      	adds	r3, #68	; 0x44
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	18d1      	adds	r1, r2, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4403      	add	r3, r0
 8003960:	3344      	adds	r3, #68	; 0x44
 8003962:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	440b      	add	r3, r1
 8003972:	334c      	adds	r3, #76	; 0x4c
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	18d1      	adds	r1, r2, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4403      	add	r3, r0
 8003988:	334c      	adds	r3, #76	; 0x4c
 800398a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <HCD_RXQLVL_IRQHandler+0x154>)
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d031      	beq.n	8003a06 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039b8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039c0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	3350      	adds	r3, #80	; 0x50
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	f083 0301 	eor.w	r3, r3, #1
 80039ea:	b2d8      	uxtb	r0, r3
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	440b      	add	r3, r1
 80039fa:	3350      	adds	r3, #80	; 0x50
 80039fc:	4602      	mov	r2, r0
 80039fe:	701a      	strb	r2, [r3, #0]
      break;
 8003a00:	e001      	b.n	8003a06 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003a06:	bf00      	nop
  }
}
 8003a08:	bf00      	nop
 8003a0a:	3728      	adds	r7, #40	; 0x28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	1ff80000 	.word	0x1ff80000

08003a14 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a40:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d113      	bne.n	8003a74 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d10a      	bne.n	8003a6c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003a64:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f001 fcf2 	bl	8005450 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f043 0302 	orr.w	r3, r3, #2
 8003a72:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d147      	bne.n	8003b0e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f043 0308 	orr.w	r3, r3, #8
 8003a84:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d129      	bne.n	8003ae4 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d113      	bne.n	8003ac0 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aa2:	d106      	bne.n	8003ab2 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f001 fa04 	bl	8004eb8 <USB_InitFSLSPClkSel>
 8003ab0:	e011      	b.n	8003ad6 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 f9fd 	bl	8004eb8 <USB_InitFSLSPClkSel>
 8003abe:	e00a      	b.n	8003ad6 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d106      	bne.n	8003ad6 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ad4:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f001 fce4 	bl	80054a4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f001 fcb7 	bl	8005450 <HAL_HCD_Connect_Callback>
 8003ae2:	e014      	b.n	8003b0e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f001 fceb 	bl	80054c0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003af8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003afc:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003b0c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d103      	bne.n	8003b20 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f043 0320 	orr.w	r3, r3, #32
 8003b1e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b26:	461a      	mov	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	6013      	str	r3, [r2, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e25b      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d075      	beq.n	8003c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b52:	4ba3      	ldr	r3, [pc, #652]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d00c      	beq.n	8003b78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5e:	4ba0      	ldr	r3, [pc, #640]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d112      	bne.n	8003b90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6a:	4b9d      	ldr	r3, [pc, #628]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b76:	d10b      	bne.n	8003b90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	4b99      	ldr	r3, [pc, #612]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d05b      	beq.n	8003c3c <HAL_RCC_OscConfig+0x108>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d157      	bne.n	8003c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e236      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d106      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x74>
 8003b9a:	4b91      	ldr	r3, [pc, #580]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a90      	ldr	r2, [pc, #576]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e01d      	b.n	8003be4 <HAL_RCC_OscConfig+0xb0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x98>
 8003bb2:	4b8b      	ldr	r3, [pc, #556]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a8a      	ldr	r2, [pc, #552]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b88      	ldr	r3, [pc, #544]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a87      	ldr	r2, [pc, #540]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e00b      	b.n	8003be4 <HAL_RCC_OscConfig+0xb0>
 8003bcc:	4b84      	ldr	r3, [pc, #528]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a83      	ldr	r2, [pc, #524]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	4b81      	ldr	r3, [pc, #516]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a80      	ldr	r2, [pc, #512]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d013      	beq.n	8003c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fe f898 	bl	8001d20 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fe f894 	bl	8001d20 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e1fb      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c06:	4b76      	ldr	r3, [pc, #472]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0xc0>
 8003c12:	e014      	b.n	8003c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe f884 	bl	8001d20 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7fe f880 	bl	8001d20 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e1e7      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2e:	4b6c      	ldr	r3, [pc, #432]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0xe8>
 8003c3a:	e000      	b.n	8003c3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d063      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4a:	4b65      	ldr	r3, [pc, #404]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c56:	4b62      	ldr	r3, [pc, #392]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d11c      	bne.n	8003c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c62:	4b5f      	ldr	r3, [pc, #380]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d116      	bne.n	8003c9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6e:	4b5c      	ldr	r3, [pc, #368]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_RCC_OscConfig+0x152>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e1bb      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c86:	4b56      	ldr	r3, [pc, #344]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4952      	ldr	r1, [pc, #328]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9a:	e03a      	b.n	8003d12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca4:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <HAL_RCC_OscConfig+0x2b0>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fe f839 	bl	8001d20 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb2:	f7fe f835 	bl	8001d20 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e19c      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc4:	4b46      	ldr	r3, [pc, #280]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4940      	ldr	r1, [pc, #256]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]
 8003ce4:	e015      	b.n	8003d12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce6:	4b3f      	ldr	r3, [pc, #252]	; (8003de4 <HAL_RCC_OscConfig+0x2b0>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe f818 	bl	8001d20 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf4:	f7fe f814 	bl	8001d20 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e17b      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	4b36      	ldr	r3, [pc, #216]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d030      	beq.n	8003d80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d016      	beq.n	8003d54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d26:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <HAL_RCC_OscConfig+0x2b4>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fd fff8 	bl	8001d20 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d34:	f7fd fff4 	bl	8001d20 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e15b      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d46:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x200>
 8003d52:	e015      	b.n	8003d80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d54:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <HAL_RCC_OscConfig+0x2b4>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5a:	f7fd ffe1 	bl	8001d20 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d62:	f7fd ffdd 	bl	8001d20 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e144      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80a0 	beq.w	8003ece <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d92:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	4a0e      	ldr	r2, [pc, #56]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6413      	str	r3, [r2, #64]	; 0x40
 8003dae:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCC_OscConfig+0x2b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d121      	bne.n	8003e0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_RCC_OscConfig+0x2b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a07      	ldr	r2, [pc, #28]	; (8003dec <HAL_RCC_OscConfig+0x2b8>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd ffa3 	bl	8001d20 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	e011      	b.n	8003e02 <HAL_RCC_OscConfig+0x2ce>
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800
 8003de4:	42470000 	.word	0x42470000
 8003de8:	42470e80 	.word	0x42470e80
 8003dec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df0:	f7fd ff96 	bl	8001d20 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0fd      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	4b81      	ldr	r3, [pc, #516]	; (8004008 <HAL_RCC_OscConfig+0x4d4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d106      	bne.n	8003e24 <HAL_RCC_OscConfig+0x2f0>
 8003e16:	4b7d      	ldr	r3, [pc, #500]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4a7c      	ldr	r2, [pc, #496]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70
 8003e22:	e01c      	b.n	8003e5e <HAL_RCC_OscConfig+0x32a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b05      	cmp	r3, #5
 8003e2a:	d10c      	bne.n	8003e46 <HAL_RCC_OscConfig+0x312>
 8003e2c:	4b77      	ldr	r3, [pc, #476]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	4a76      	ldr	r2, [pc, #472]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e32:	f043 0304 	orr.w	r3, r3, #4
 8003e36:	6713      	str	r3, [r2, #112]	; 0x70
 8003e38:	4b74      	ldr	r3, [pc, #464]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a73      	ldr	r2, [pc, #460]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
 8003e44:	e00b      	b.n	8003e5e <HAL_RCC_OscConfig+0x32a>
 8003e46:	4b71      	ldr	r3, [pc, #452]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	4a70      	ldr	r2, [pc, #448]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	6713      	str	r3, [r2, #112]	; 0x70
 8003e52:	4b6e      	ldr	r3, [pc, #440]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a6d      	ldr	r2, [pc, #436]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e58:	f023 0304 	bic.w	r3, r3, #4
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d015      	beq.n	8003e92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e66:	f7fd ff5b 	bl	8001d20 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6c:	e00a      	b.n	8003e84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6e:	f7fd ff57 	bl	8001d20 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e0bc      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e84:	4b61      	ldr	r3, [pc, #388]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0ee      	beq.n	8003e6e <HAL_RCC_OscConfig+0x33a>
 8003e90:	e014      	b.n	8003ebc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e92:	f7fd ff45 	bl	8001d20 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fd ff41 	bl	8001d20 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0a6      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb0:	4b56      	ldr	r3, [pc, #344]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1ee      	bne.n	8003e9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d105      	bne.n	8003ece <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec2:	4b52      	ldr	r3, [pc, #328]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a51      	ldr	r2, [pc, #324]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8092 	beq.w	8003ffc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ed8:	4b4c      	ldr	r3, [pc, #304]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d05c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d141      	bne.n	8003f70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eec:	4b48      	ldr	r3, [pc, #288]	; (8004010 <HAL_RCC_OscConfig+0x4dc>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef2:	f7fd ff15 	bl	8001d20 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fd ff11 	bl	8001d20 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e078      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0c:	4b3f      	ldr	r3, [pc, #252]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	019b      	lsls	r3, r3, #6
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	085b      	lsrs	r3, r3, #1
 8003f30:	3b01      	subs	r3, #1
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	061b      	lsls	r3, r3, #24
 8003f3c:	4933      	ldr	r1, [pc, #204]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f42:	4b33      	ldr	r3, [pc, #204]	; (8004010 <HAL_RCC_OscConfig+0x4dc>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fd feea 	bl	8001d20 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd fee6 	bl	8001d20 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e04d      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	4b2a      	ldr	r3, [pc, #168]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x41c>
 8003f6e:	e045      	b.n	8003ffc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f70:	4b27      	ldr	r3, [pc, #156]	; (8004010 <HAL_RCC_OscConfig+0x4dc>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f76:	f7fd fed3 	bl	8001d20 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7e:	f7fd fecf 	bl	8001d20 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e036      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f90:	4b1e      	ldr	r3, [pc, #120]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0x44a>
 8003f9c:	e02e      	b.n	8003ffc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e029      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003faa:	4b18      	ldr	r3, [pc, #96]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d11c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d115      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d10d      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40007000 	.word	0x40007000
 800400c:	40023800 	.word	0x40023800
 8004010:	42470060 	.word	0x42470060

08004014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0cc      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004028:	4b68      	ldr	r3, [pc, #416]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d90c      	bls.n	8004050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b65      	ldr	r3, [pc, #404]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	4b63      	ldr	r3, [pc, #396]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0b8      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d020      	beq.n	800409e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004068:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	4a58      	ldr	r2, [pc, #352]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004080:	4b53      	ldr	r3, [pc, #332]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a52      	ldr	r2, [pc, #328]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800408a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408c:	4b50      	ldr	r3, [pc, #320]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	494d      	ldr	r1, [pc, #308]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d044      	beq.n	8004134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	4b47      	ldr	r3, [pc, #284]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d119      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e07f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d003      	beq.n	80040d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d2:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	4b3b      	ldr	r3, [pc, #236]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e067      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040f2:	4b37      	ldr	r3, [pc, #220]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 0203 	bic.w	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4934      	ldr	r1, [pc, #208]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004104:	f7fd fe0c 	bl	8001d20 <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	e00a      	b.n	8004122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410c:	f7fd fe08 	bl	8001d20 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	; 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e04f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 020c 	and.w	r2, r3, #12
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	429a      	cmp	r2, r3
 8004132:	d1eb      	bne.n	800410c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004134:	4b25      	ldr	r3, [pc, #148]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d20c      	bcs.n	800415c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b22      	ldr	r3, [pc, #136]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e032      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4916      	ldr	r1, [pc, #88]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004186:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	490e      	ldr	r1, [pc, #56]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800419a:	f000 f821 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 800419e:	4601      	mov	r1, r0
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <HAL_RCC_ClockConfig+0x1c0>)
 80041ac:	5cd3      	ldrb	r3, [r2, r3]
 80041ae:	fa21 f303 	lsr.w	r3, r1, r3
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd fd6c 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40023c00 	.word	0x40023c00
 80041d0:	40023800 	.word	0x40023800
 80041d4:	080065f8 	.word	0x080065f8
 80041d8:	20000000 	.word	0x20000000
 80041dc:	20000004 	.word	0x20000004

080041e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	2300      	movs	r3, #0
 80041f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f6:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d007      	beq.n	8004212 <HAL_RCC_GetSysClockFreq+0x32>
 8004202:	2b08      	cmp	r3, #8
 8004204:	d008      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x38>
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 80b4 	bne.w	8004374 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4b5e      	ldr	r3, [pc, #376]	; (8004388 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800420e:	60bb      	str	r3, [r7, #8]
       break;
 8004210:	e0b3      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004212:	4b5e      	ldr	r3, [pc, #376]	; (800438c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004214:	60bb      	str	r3, [r7, #8]
      break;
 8004216:	e0b0      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004218:	4b5a      	ldr	r3, [pc, #360]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004220:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004222:	4b58      	ldr	r3, [pc, #352]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d04a      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422e:	4b55      	ldr	r3, [pc, #340]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	f240 11ff 	movw	r1, #511	; 0x1ff
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	ea03 0501 	and.w	r5, r3, r1
 8004244:	ea04 0602 	and.w	r6, r4, r2
 8004248:	4629      	mov	r1, r5
 800424a:	4632      	mov	r2, r6
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	f04f 0400 	mov.w	r4, #0
 8004254:	0154      	lsls	r4, r2, #5
 8004256:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800425a:	014b      	lsls	r3, r1, #5
 800425c:	4619      	mov	r1, r3
 800425e:	4622      	mov	r2, r4
 8004260:	1b49      	subs	r1, r1, r5
 8004262:	eb62 0206 	sbc.w	r2, r2, r6
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	f04f 0400 	mov.w	r4, #0
 800426e:	0194      	lsls	r4, r2, #6
 8004270:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004274:	018b      	lsls	r3, r1, #6
 8004276:	1a5b      	subs	r3, r3, r1
 8004278:	eb64 0402 	sbc.w	r4, r4, r2
 800427c:	f04f 0100 	mov.w	r1, #0
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	00e2      	lsls	r2, r4, #3
 8004286:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800428a:	00d9      	lsls	r1, r3, #3
 800428c:	460b      	mov	r3, r1
 800428e:	4614      	mov	r4, r2
 8004290:	195b      	adds	r3, r3, r5
 8004292:	eb44 0406 	adc.w	r4, r4, r6
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	0262      	lsls	r2, r4, #9
 80042a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042a4:	0259      	lsls	r1, r3, #9
 80042a6:	460b      	mov	r3, r1
 80042a8:	4614      	mov	r4, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	4621      	mov	r1, r4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	461a      	mov	r2, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	f7fb ffda 	bl	8000270 <__aeabi_uldivmod>
 80042bc:	4603      	mov	r3, r0
 80042be:	460c      	mov	r4, r1
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	e049      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c4:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	099b      	lsrs	r3, r3, #6
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	ea03 0501 	and.w	r5, r3, r1
 80042da:	ea04 0602 	and.w	r6, r4, r2
 80042de:	4629      	mov	r1, r5
 80042e0:	4632      	mov	r2, r6
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	f04f 0400 	mov.w	r4, #0
 80042ea:	0154      	lsls	r4, r2, #5
 80042ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042f0:	014b      	lsls	r3, r1, #5
 80042f2:	4619      	mov	r1, r3
 80042f4:	4622      	mov	r2, r4
 80042f6:	1b49      	subs	r1, r1, r5
 80042f8:	eb62 0206 	sbc.w	r2, r2, r6
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	f04f 0400 	mov.w	r4, #0
 8004304:	0194      	lsls	r4, r2, #6
 8004306:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800430a:	018b      	lsls	r3, r1, #6
 800430c:	1a5b      	subs	r3, r3, r1
 800430e:	eb64 0402 	sbc.w	r4, r4, r2
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	00e2      	lsls	r2, r4, #3
 800431c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004320:	00d9      	lsls	r1, r3, #3
 8004322:	460b      	mov	r3, r1
 8004324:	4614      	mov	r4, r2
 8004326:	195b      	adds	r3, r3, r5
 8004328:	eb44 0406 	adc.w	r4, r4, r6
 800432c:	f04f 0100 	mov.w	r1, #0
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	02a2      	lsls	r2, r4, #10
 8004336:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800433a:	0299      	lsls	r1, r3, #10
 800433c:	460b      	mov	r3, r1
 800433e:	4614      	mov	r4, r2
 8004340:	4618      	mov	r0, r3
 8004342:	4621      	mov	r1, r4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f04f 0400 	mov.w	r4, #0
 800434a:	461a      	mov	r2, r3
 800434c:	4623      	mov	r3, r4
 800434e:	f7fb ff8f 	bl	8000270 <__aeabi_uldivmod>
 8004352:	4603      	mov	r3, r0
 8004354:	460c      	mov	r4, r1
 8004356:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	3301      	adds	r3, #1
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	60bb      	str	r3, [r7, #8]
      break;
 8004372:	e002      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004376:	60bb      	str	r3, [r7, #8]
      break;
 8004378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437a:	68bb      	ldr	r3, [r7, #8]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004384:	40023800 	.word	0x40023800
 8004388:	00f42400 	.word	0x00f42400
 800438c:	007a1200 	.word	0x007a1200

08004390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004394:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004396:	681b      	ldr	r3, [r3, #0]
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20000000 	.word	0x20000000

080043a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043ac:	f7ff fff0 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 80043b0:	4601      	mov	r1, r0
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	0a9b      	lsrs	r3, r3, #10
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	4a03      	ldr	r2, [pc, #12]	; (80043cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043be:	5cd3      	ldrb	r3, [r2, r3]
 80043c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40023800 	.word	0x40023800
 80043cc:	08006608 	.word	0x08006608

080043d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043d4:	f7ff ffdc 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 80043d8:	4601      	mov	r1, r0
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	0b5b      	lsrs	r3, r3, #13
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	4a03      	ldr	r2, [pc, #12]	; (80043f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043e6:	5cd3      	ldrb	r3, [r2, r3]
 80043e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40023800 	.word	0x40023800
 80043f4:	08006608 	.word	0x08006608

080043f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d105      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800441c:	2b00      	cmp	r3, #0
 800441e:	d035      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004420:	4b62      	ldr	r3, [pc, #392]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004426:	f7fd fc7b 	bl	8001d20 <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800442e:	f7fd fc77 	bl	8001d20 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e0b0      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004440:	4b5b      	ldr	r3, [pc, #364]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	019a      	lsls	r2, r3, #6
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	071b      	lsls	r3, r3, #28
 8004458:	4955      	ldr	r1, [pc, #340]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004460:	4b52      	ldr	r3, [pc, #328]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004462:	2201      	movs	r2, #1
 8004464:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004466:	f7fd fc5b 	bl	8001d20 <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800446e:	f7fd fc57 	bl	8001d20 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e090      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004480:	4b4b      	ldr	r3, [pc, #300]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8083 	beq.w	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	4b44      	ldr	r3, [pc, #272]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	4a43      	ldr	r2, [pc, #268]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6413      	str	r3, [r2, #64]	; 0x40
 80044aa:	4b41      	ldr	r3, [pc, #260]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044b6:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a3e      	ldr	r2, [pc, #248]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044c2:	f7fd fc2d 	bl	8001d20 <HAL_GetTick>
 80044c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044ca:	f7fd fc29 	bl	8001d20 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e062      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044dc:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e8:	4b31      	ldr	r3, [pc, #196]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d02f      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	429a      	cmp	r2, r3
 8004504:	d028      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004510:	4b29      	ldr	r3, [pc, #164]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004516:	4b28      	ldr	r3, [pc, #160]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800451c:	4a24      	ldr	r2, [pc, #144]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004522:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d114      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800452e:	f7fd fbf7 	bl	8001d20 <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fd fbf3 	bl	8001d20 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	; 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e02a      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454c:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ee      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004564:	d10d      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457a:	490d      	ldr	r1, [pc, #52]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800457c:	4313      	orrs	r3, r2
 800457e:	608b      	str	r3, [r1, #8]
 8004580:	e005      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004588:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800458c:	6093      	str	r3, [r2, #8]
 800458e:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004590:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459a:	4905      	ldr	r1, [pc, #20]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800459c:	4313      	orrs	r3, r2
 800459e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	42470068 	.word	0x42470068
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40007000 	.word	0x40007000
 80045b8:	42470e40 	.word	0x42470e40

080045bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e03f      	b.n	800464e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fd f9ba 	bl	800195c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2224      	movs	r2, #36	; 0x24
 80045ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f829 	bl	8004658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695a      	ldr	r2, [r3, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800469a:	f023 030c 	bic.w	r3, r3, #12
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	430b      	orrs	r3, r1
 80046a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c6:	f040 818b 	bne.w	80049e0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4ac1      	ldr	r2, [pc, #772]	; (80049d4 <UART_SetConfig+0x37c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d005      	beq.n	80046e0 <UART_SetConfig+0x88>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4abf      	ldr	r2, [pc, #764]	; (80049d8 <UART_SetConfig+0x380>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	f040 80bd 	bne.w	800485a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046e0:	f7ff fe76 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 80046e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	461d      	mov	r5, r3
 80046ea:	f04f 0600 	mov.w	r6, #0
 80046ee:	46a8      	mov	r8, r5
 80046f0:	46b1      	mov	r9, r6
 80046f2:	eb18 0308 	adds.w	r3, r8, r8
 80046f6:	eb49 0409 	adc.w	r4, r9, r9
 80046fa:	4698      	mov	r8, r3
 80046fc:	46a1      	mov	r9, r4
 80046fe:	eb18 0805 	adds.w	r8, r8, r5
 8004702:	eb49 0906 	adc.w	r9, r9, r6
 8004706:	f04f 0100 	mov.w	r1, #0
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004712:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004716:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800471a:	4688      	mov	r8, r1
 800471c:	4691      	mov	r9, r2
 800471e:	eb18 0005 	adds.w	r0, r8, r5
 8004722:	eb49 0106 	adc.w	r1, r9, r6
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	461d      	mov	r5, r3
 800472c:	f04f 0600 	mov.w	r6, #0
 8004730:	196b      	adds	r3, r5, r5
 8004732:	eb46 0406 	adc.w	r4, r6, r6
 8004736:	461a      	mov	r2, r3
 8004738:	4623      	mov	r3, r4
 800473a:	f7fb fd99 	bl	8000270 <__aeabi_uldivmod>
 800473e:	4603      	mov	r3, r0
 8004740:	460c      	mov	r4, r1
 8004742:	461a      	mov	r2, r3
 8004744:	4ba5      	ldr	r3, [pc, #660]	; (80049dc <UART_SetConfig+0x384>)
 8004746:	fba3 2302 	umull	r2, r3, r3, r2
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	461d      	mov	r5, r3
 8004754:	f04f 0600 	mov.w	r6, #0
 8004758:	46a9      	mov	r9, r5
 800475a:	46b2      	mov	sl, r6
 800475c:	eb19 0309 	adds.w	r3, r9, r9
 8004760:	eb4a 040a 	adc.w	r4, sl, sl
 8004764:	4699      	mov	r9, r3
 8004766:	46a2      	mov	sl, r4
 8004768:	eb19 0905 	adds.w	r9, r9, r5
 800476c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800477c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004780:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004784:	4689      	mov	r9, r1
 8004786:	4692      	mov	sl, r2
 8004788:	eb19 0005 	adds.w	r0, r9, r5
 800478c:	eb4a 0106 	adc.w	r1, sl, r6
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	461d      	mov	r5, r3
 8004796:	f04f 0600 	mov.w	r6, #0
 800479a:	196b      	adds	r3, r5, r5
 800479c:	eb46 0406 	adc.w	r4, r6, r6
 80047a0:	461a      	mov	r2, r3
 80047a2:	4623      	mov	r3, r4
 80047a4:	f7fb fd64 	bl	8000270 <__aeabi_uldivmod>
 80047a8:	4603      	mov	r3, r0
 80047aa:	460c      	mov	r4, r1
 80047ac:	461a      	mov	r2, r3
 80047ae:	4b8b      	ldr	r3, [pc, #556]	; (80049dc <UART_SetConfig+0x384>)
 80047b0:	fba3 1302 	umull	r1, r3, r3, r2
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	2164      	movs	r1, #100	; 0x64
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	3332      	adds	r3, #50	; 0x32
 80047c2:	4a86      	ldr	r2, [pc, #536]	; (80049dc <UART_SetConfig+0x384>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047d0:	4498      	add	r8, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	461d      	mov	r5, r3
 80047d6:	f04f 0600 	mov.w	r6, #0
 80047da:	46a9      	mov	r9, r5
 80047dc:	46b2      	mov	sl, r6
 80047de:	eb19 0309 	adds.w	r3, r9, r9
 80047e2:	eb4a 040a 	adc.w	r4, sl, sl
 80047e6:	4699      	mov	r9, r3
 80047e8:	46a2      	mov	sl, r4
 80047ea:	eb19 0905 	adds.w	r9, r9, r5
 80047ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80047f2:	f04f 0100 	mov.w	r1, #0
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004802:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004806:	4689      	mov	r9, r1
 8004808:	4692      	mov	sl, r2
 800480a:	eb19 0005 	adds.w	r0, r9, r5
 800480e:	eb4a 0106 	adc.w	r1, sl, r6
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	461d      	mov	r5, r3
 8004818:	f04f 0600 	mov.w	r6, #0
 800481c:	196b      	adds	r3, r5, r5
 800481e:	eb46 0406 	adc.w	r4, r6, r6
 8004822:	461a      	mov	r2, r3
 8004824:	4623      	mov	r3, r4
 8004826:	f7fb fd23 	bl	8000270 <__aeabi_uldivmod>
 800482a:	4603      	mov	r3, r0
 800482c:	460c      	mov	r4, r1
 800482e:	461a      	mov	r2, r3
 8004830:	4b6a      	ldr	r3, [pc, #424]	; (80049dc <UART_SetConfig+0x384>)
 8004832:	fba3 1302 	umull	r1, r3, r3, r2
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2164      	movs	r1, #100	; 0x64
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	3332      	adds	r3, #50	; 0x32
 8004844:	4a65      	ldr	r2, [pc, #404]	; (80049dc <UART_SetConfig+0x384>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	f003 0207 	and.w	r2, r3, #7
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4442      	add	r2, r8
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	e26f      	b.n	8004d3a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800485a:	f7ff fda5 	bl	80043a8 <HAL_RCC_GetPCLK1Freq>
 800485e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	461d      	mov	r5, r3
 8004864:	f04f 0600 	mov.w	r6, #0
 8004868:	46a8      	mov	r8, r5
 800486a:	46b1      	mov	r9, r6
 800486c:	eb18 0308 	adds.w	r3, r8, r8
 8004870:	eb49 0409 	adc.w	r4, r9, r9
 8004874:	4698      	mov	r8, r3
 8004876:	46a1      	mov	r9, r4
 8004878:	eb18 0805 	adds.w	r8, r8, r5
 800487c:	eb49 0906 	adc.w	r9, r9, r6
 8004880:	f04f 0100 	mov.w	r1, #0
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800488c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004890:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004894:	4688      	mov	r8, r1
 8004896:	4691      	mov	r9, r2
 8004898:	eb18 0005 	adds.w	r0, r8, r5
 800489c:	eb49 0106 	adc.w	r1, r9, r6
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	461d      	mov	r5, r3
 80048a6:	f04f 0600 	mov.w	r6, #0
 80048aa:	196b      	adds	r3, r5, r5
 80048ac:	eb46 0406 	adc.w	r4, r6, r6
 80048b0:	461a      	mov	r2, r3
 80048b2:	4623      	mov	r3, r4
 80048b4:	f7fb fcdc 	bl	8000270 <__aeabi_uldivmod>
 80048b8:	4603      	mov	r3, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	461a      	mov	r2, r3
 80048be:	4b47      	ldr	r3, [pc, #284]	; (80049dc <UART_SetConfig+0x384>)
 80048c0:	fba3 2302 	umull	r2, r3, r3, r2
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	461d      	mov	r5, r3
 80048ce:	f04f 0600 	mov.w	r6, #0
 80048d2:	46a9      	mov	r9, r5
 80048d4:	46b2      	mov	sl, r6
 80048d6:	eb19 0309 	adds.w	r3, r9, r9
 80048da:	eb4a 040a 	adc.w	r4, sl, sl
 80048de:	4699      	mov	r9, r3
 80048e0:	46a2      	mov	sl, r4
 80048e2:	eb19 0905 	adds.w	r9, r9, r5
 80048e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80048ea:	f04f 0100 	mov.w	r1, #0
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048fe:	4689      	mov	r9, r1
 8004900:	4692      	mov	sl, r2
 8004902:	eb19 0005 	adds.w	r0, r9, r5
 8004906:	eb4a 0106 	adc.w	r1, sl, r6
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	461d      	mov	r5, r3
 8004910:	f04f 0600 	mov.w	r6, #0
 8004914:	196b      	adds	r3, r5, r5
 8004916:	eb46 0406 	adc.w	r4, r6, r6
 800491a:	461a      	mov	r2, r3
 800491c:	4623      	mov	r3, r4
 800491e:	f7fb fca7 	bl	8000270 <__aeabi_uldivmod>
 8004922:	4603      	mov	r3, r0
 8004924:	460c      	mov	r4, r1
 8004926:	461a      	mov	r2, r3
 8004928:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <UART_SetConfig+0x384>)
 800492a:	fba3 1302 	umull	r1, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2164      	movs	r1, #100	; 0x64
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	3332      	adds	r3, #50	; 0x32
 800493c:	4a27      	ldr	r2, [pc, #156]	; (80049dc <UART_SetConfig+0x384>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800494a:	4498      	add	r8, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	461d      	mov	r5, r3
 8004950:	f04f 0600 	mov.w	r6, #0
 8004954:	46a9      	mov	r9, r5
 8004956:	46b2      	mov	sl, r6
 8004958:	eb19 0309 	adds.w	r3, r9, r9
 800495c:	eb4a 040a 	adc.w	r4, sl, sl
 8004960:	4699      	mov	r9, r3
 8004962:	46a2      	mov	sl, r4
 8004964:	eb19 0905 	adds.w	r9, r9, r5
 8004968:	eb4a 0a06 	adc.w	sl, sl, r6
 800496c:	f04f 0100 	mov.w	r1, #0
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004978:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800497c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004980:	4689      	mov	r9, r1
 8004982:	4692      	mov	sl, r2
 8004984:	eb19 0005 	adds.w	r0, r9, r5
 8004988:	eb4a 0106 	adc.w	r1, sl, r6
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	461d      	mov	r5, r3
 8004992:	f04f 0600 	mov.w	r6, #0
 8004996:	196b      	adds	r3, r5, r5
 8004998:	eb46 0406 	adc.w	r4, r6, r6
 800499c:	461a      	mov	r2, r3
 800499e:	4623      	mov	r3, r4
 80049a0:	f7fb fc66 	bl	8000270 <__aeabi_uldivmod>
 80049a4:	4603      	mov	r3, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	461a      	mov	r2, r3
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <UART_SetConfig+0x384>)
 80049ac:	fba3 1302 	umull	r1, r3, r3, r2
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	2164      	movs	r1, #100	; 0x64
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	3332      	adds	r3, #50	; 0x32
 80049be:	4a07      	ldr	r2, [pc, #28]	; (80049dc <UART_SetConfig+0x384>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	f003 0207 	and.w	r2, r3, #7
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4442      	add	r2, r8
 80049d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80049d2:	e1b2      	b.n	8004d3a <UART_SetConfig+0x6e2>
 80049d4:	40011000 	.word	0x40011000
 80049d8:	40011400 	.word	0x40011400
 80049dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4ad7      	ldr	r2, [pc, #860]	; (8004d44 <UART_SetConfig+0x6ec>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d005      	beq.n	80049f6 <UART_SetConfig+0x39e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4ad6      	ldr	r2, [pc, #856]	; (8004d48 <UART_SetConfig+0x6f0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	f040 80d1 	bne.w	8004b98 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80049f6:	f7ff fceb 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 80049fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	469a      	mov	sl, r3
 8004a00:	f04f 0b00 	mov.w	fp, #0
 8004a04:	46d0      	mov	r8, sl
 8004a06:	46d9      	mov	r9, fp
 8004a08:	eb18 0308 	adds.w	r3, r8, r8
 8004a0c:	eb49 0409 	adc.w	r4, r9, r9
 8004a10:	4698      	mov	r8, r3
 8004a12:	46a1      	mov	r9, r4
 8004a14:	eb18 080a 	adds.w	r8, r8, sl
 8004a18:	eb49 090b 	adc.w	r9, r9, fp
 8004a1c:	f04f 0100 	mov.w	r1, #0
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a30:	4688      	mov	r8, r1
 8004a32:	4691      	mov	r9, r2
 8004a34:	eb1a 0508 	adds.w	r5, sl, r8
 8004a38:	eb4b 0609 	adc.w	r6, fp, r9
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4619      	mov	r1, r3
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	f04f 0400 	mov.w	r4, #0
 8004a4e:	0094      	lsls	r4, r2, #2
 8004a50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a54:	008b      	lsls	r3, r1, #2
 8004a56:	461a      	mov	r2, r3
 8004a58:	4623      	mov	r3, r4
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	f7fb fc07 	bl	8000270 <__aeabi_uldivmod>
 8004a62:	4603      	mov	r3, r0
 8004a64:	460c      	mov	r4, r1
 8004a66:	461a      	mov	r2, r3
 8004a68:	4bb8      	ldr	r3, [pc, #736]	; (8004d4c <UART_SetConfig+0x6f4>)
 8004a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	469b      	mov	fp, r3
 8004a78:	f04f 0c00 	mov.w	ip, #0
 8004a7c:	46d9      	mov	r9, fp
 8004a7e:	46e2      	mov	sl, ip
 8004a80:	eb19 0309 	adds.w	r3, r9, r9
 8004a84:	eb4a 040a 	adc.w	r4, sl, sl
 8004a88:	4699      	mov	r9, r3
 8004a8a:	46a2      	mov	sl, r4
 8004a8c:	eb19 090b 	adds.w	r9, r9, fp
 8004a90:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a94:	f04f 0100 	mov.w	r1, #0
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aa0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004aa4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004aa8:	4689      	mov	r9, r1
 8004aaa:	4692      	mov	sl, r2
 8004aac:	eb1b 0509 	adds.w	r5, fp, r9
 8004ab0:	eb4c 060a 	adc.w	r6, ip, sl
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	f04f 0400 	mov.w	r4, #0
 8004ac6:	0094      	lsls	r4, r2, #2
 8004ac8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004acc:	008b      	lsls	r3, r1, #2
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4623      	mov	r3, r4
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	f7fb fbcb 	bl	8000270 <__aeabi_uldivmod>
 8004ada:	4603      	mov	r3, r0
 8004adc:	460c      	mov	r4, r1
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4b9a      	ldr	r3, [pc, #616]	; (8004d4c <UART_SetConfig+0x6f4>)
 8004ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	2164      	movs	r1, #100	; 0x64
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	3332      	adds	r3, #50	; 0x32
 8004af4:	4a95      	ldr	r2, [pc, #596]	; (8004d4c <UART_SetConfig+0x6f4>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b00:	4498      	add	r8, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	469b      	mov	fp, r3
 8004b06:	f04f 0c00 	mov.w	ip, #0
 8004b0a:	46d9      	mov	r9, fp
 8004b0c:	46e2      	mov	sl, ip
 8004b0e:	eb19 0309 	adds.w	r3, r9, r9
 8004b12:	eb4a 040a 	adc.w	r4, sl, sl
 8004b16:	4699      	mov	r9, r3
 8004b18:	46a2      	mov	sl, r4
 8004b1a:	eb19 090b 	adds.w	r9, r9, fp
 8004b1e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b22:	f04f 0100 	mov.w	r1, #0
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b36:	4689      	mov	r9, r1
 8004b38:	4692      	mov	sl, r2
 8004b3a:	eb1b 0509 	adds.w	r5, fp, r9
 8004b3e:	eb4c 060a 	adc.w	r6, ip, sl
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4619      	mov	r1, r3
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	f04f 0400 	mov.w	r4, #0
 8004b54:	0094      	lsls	r4, r2, #2
 8004b56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b5a:	008b      	lsls	r3, r1, #2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	4628      	mov	r0, r5
 8004b62:	4631      	mov	r1, r6
 8004b64:	f7fb fb84 	bl	8000270 <__aeabi_uldivmod>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b77      	ldr	r3, [pc, #476]	; (8004d4c <UART_SetConfig+0x6f4>)
 8004b70:	fba3 1302 	umull	r1, r3, r3, r2
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	2164      	movs	r1, #100	; 0x64
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	3332      	adds	r3, #50	; 0x32
 8004b82:	4a72      	ldr	r2, [pc, #456]	; (8004d4c <UART_SetConfig+0x6f4>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	f003 020f 	and.w	r2, r3, #15
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4442      	add	r2, r8
 8004b94:	609a      	str	r2, [r3, #8]
 8004b96:	e0d0      	b.n	8004d3a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b98:	f7ff fc06 	bl	80043a8 <HAL_RCC_GetPCLK1Freq>
 8004b9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	469a      	mov	sl, r3
 8004ba2:	f04f 0b00 	mov.w	fp, #0
 8004ba6:	46d0      	mov	r8, sl
 8004ba8:	46d9      	mov	r9, fp
 8004baa:	eb18 0308 	adds.w	r3, r8, r8
 8004bae:	eb49 0409 	adc.w	r4, r9, r9
 8004bb2:	4698      	mov	r8, r3
 8004bb4:	46a1      	mov	r9, r4
 8004bb6:	eb18 080a 	adds.w	r8, r8, sl
 8004bba:	eb49 090b 	adc.w	r9, r9, fp
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bd2:	4688      	mov	r8, r1
 8004bd4:	4691      	mov	r9, r2
 8004bd6:	eb1a 0508 	adds.w	r5, sl, r8
 8004bda:	eb4b 0609 	adc.w	r6, fp, r9
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	4619      	mov	r1, r3
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	f04f 0400 	mov.w	r4, #0
 8004bf0:	0094      	lsls	r4, r2, #2
 8004bf2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bf6:	008b      	lsls	r3, r1, #2
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	4631      	mov	r1, r6
 8004c00:	f7fb fb36 	bl	8000270 <__aeabi_uldivmod>
 8004c04:	4603      	mov	r3, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4b50      	ldr	r3, [pc, #320]	; (8004d4c <UART_SetConfig+0x6f4>)
 8004c0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	469b      	mov	fp, r3
 8004c1a:	f04f 0c00 	mov.w	ip, #0
 8004c1e:	46d9      	mov	r9, fp
 8004c20:	46e2      	mov	sl, ip
 8004c22:	eb19 0309 	adds.w	r3, r9, r9
 8004c26:	eb4a 040a 	adc.w	r4, sl, sl
 8004c2a:	4699      	mov	r9, r3
 8004c2c:	46a2      	mov	sl, r4
 8004c2e:	eb19 090b 	adds.w	r9, r9, fp
 8004c32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c36:	f04f 0100 	mov.w	r1, #0
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c4a:	4689      	mov	r9, r1
 8004c4c:	4692      	mov	sl, r2
 8004c4e:	eb1b 0509 	adds.w	r5, fp, r9
 8004c52:	eb4c 060a 	adc.w	r6, ip, sl
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	f04f 0400 	mov.w	r4, #0
 8004c68:	0094      	lsls	r4, r2, #2
 8004c6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c6e:	008b      	lsls	r3, r1, #2
 8004c70:	461a      	mov	r2, r3
 8004c72:	4623      	mov	r3, r4
 8004c74:	4628      	mov	r0, r5
 8004c76:	4631      	mov	r1, r6
 8004c78:	f7fb fafa 	bl	8000270 <__aeabi_uldivmod>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	461a      	mov	r2, r3
 8004c82:	4b32      	ldr	r3, [pc, #200]	; (8004d4c <UART_SetConfig+0x6f4>)
 8004c84:	fba3 1302 	umull	r1, r3, r3, r2
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	2164      	movs	r1, #100	; 0x64
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	3332      	adds	r3, #50	; 0x32
 8004c96:	4a2d      	ldr	r2, [pc, #180]	; (8004d4c <UART_SetConfig+0x6f4>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca2:	4498      	add	r8, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	469b      	mov	fp, r3
 8004ca8:	f04f 0c00 	mov.w	ip, #0
 8004cac:	46d9      	mov	r9, fp
 8004cae:	46e2      	mov	sl, ip
 8004cb0:	eb19 0309 	adds.w	r3, r9, r9
 8004cb4:	eb4a 040a 	adc.w	r4, sl, sl
 8004cb8:	4699      	mov	r9, r3
 8004cba:	46a2      	mov	sl, r4
 8004cbc:	eb19 090b 	adds.w	r9, r9, fp
 8004cc0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cd8:	4689      	mov	r9, r1
 8004cda:	4692      	mov	sl, r2
 8004cdc:	eb1b 0509 	adds.w	r5, fp, r9
 8004ce0:	eb4c 060a 	adc.w	r6, ip, sl
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	f04f 0400 	mov.w	r4, #0
 8004cf6:	0094      	lsls	r4, r2, #2
 8004cf8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cfc:	008b      	lsls	r3, r1, #2
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4623      	mov	r3, r4
 8004d02:	4628      	mov	r0, r5
 8004d04:	4631      	mov	r1, r6
 8004d06:	f7fb fab3 	bl	8000270 <__aeabi_uldivmod>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4b0e      	ldr	r3, [pc, #56]	; (8004d4c <UART_SetConfig+0x6f4>)
 8004d12:	fba3 1302 	umull	r1, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	2164      	movs	r1, #100	; 0x64
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	3332      	adds	r3, #50	; 0x32
 8004d24:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <UART_SetConfig+0x6f4>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	f003 020f 	and.w	r2, r3, #15
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4442      	add	r2, r8
 8004d36:	609a      	str	r2, [r3, #8]
}
 8004d38:	e7ff      	b.n	8004d3a <UART_SetConfig+0x6e2>
 8004d3a:	bf00      	nop
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d44:	40011000 	.word	0x40011000
 8004d48:	40011400 	.word	0x40011400
 8004d4c:	51eb851f 	.word	0x51eb851f

08004d50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f043 0201 	orr.w	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f023 0201 	bic.w	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	019b      	lsls	r3, r3, #6
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3301      	adds	r3, #1
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <USB_FlushTxFifo+0x48>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d901      	bls.n	8004dc0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e006      	b.n	8004dce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d0f0      	beq.n	8004dae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	00030d40 	.word	0x00030d40

08004de0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2210      	movs	r2, #16
 8004df0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4a09      	ldr	r2, [pc, #36]	; (8004e20 <USB_FlushRxFifo+0x40>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d901      	bls.n	8004e04 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e006      	b.n	8004e12 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d0f0      	beq.n	8004df2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	00030d40 	.word	0x00030d40

08004e24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	; 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	3303      	adds	r3, #3
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e00b      	b.n	8004e60 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	3304      	adds	r3, #4
 8004e58:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d3ef      	bcc.n	8004e48 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004e68:	69fb      	ldr	r3, [r7, #28]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3724      	adds	r7, #36	; 0x24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b085      	sub	sp, #20
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	68f9      	ldr	r1, [r7, #12]
 8004eec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d107      	bne.n	8004f0a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f00:	461a      	mov	r2, r3
 8004f02:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004f06:	6053      	str	r3, [r2, #4]
 8004f08:	e009      	b.n	8004f1e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d106      	bne.n	8004f1e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f16:	461a      	mov	r2, r3
 8004f18:	f241 7370 	movw	r3, #6000	; 0x1770
 8004f1c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d109      	bne.n	8004f70 <USB_DriveVbus+0x44>
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d106      	bne.n	8004f70 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f6e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7a:	d109      	bne.n	8004f90 <USB_DriveVbus+0x64>
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f8e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	b29b      	uxth	r3, r3
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	0c9b      	lsrs	r3, r3, #18
 8004fe8:	f003 0303 	and.w	r3, r3, #3
 8004fec:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <USB_HC_Halt+0x3a>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d16c      	bne.n	80050d4 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	440a      	add	r2, r1
 8005010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005014:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005018:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d143      	bne.n	80050ae <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	4413      	add	r3, r2
 800502e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	440a      	add	r2, r1
 800503c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005044:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4413      	add	r3, r2
 800504e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	440a      	add	r2, r1
 800505c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005064:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4413      	add	r3, r2
 800506e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	440a      	add	r2, r1
 800507c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005080:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005084:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	3301      	adds	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005092:	d81d      	bhi.n	80050d0 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4413      	add	r3, r2
 800509c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050aa:	d0ec      	beq.n	8005086 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050ac:	e080      	b.n	80051b0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050cc:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050ce:	e06f      	b.n	80051b0 <USB_HC_Halt+0x1f0>
          break;
 80050d0:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050d2:	e06d      	b.n	80051b0 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d143      	bne.n	800518c <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4413      	add	r3, r2
 800510c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	440a      	add	r2, r1
 800511a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800511e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005122:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	440a      	add	r2, r1
 800513a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800513e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005142:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	440a      	add	r2, r1
 800515a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800515e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005162:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	3301      	adds	r3, #1
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005170:	d81d      	bhi.n	80051ae <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4413      	add	r3, r2
 800517a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005188:	d0ec      	beq.n	8005164 <USB_HC_Halt+0x1a4>
 800518a:	e011      	b.n	80051b0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4413      	add	r3, r2
 8005194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	e000      	b.n	80051b0 <USB_HC_Halt+0x1f0>
          break;
 80051ae:	bf00      	nop
    }
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b086      	sub	sp, #24
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff fdcf 	bl	8004d72 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80051d4:	2110      	movs	r1, #16
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff fddc 	bl	8004d94 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fdff 	bl	8004de0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80051e2:	2300      	movs	r3, #0
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	e01f      	b.n	8005228 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051fe:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005206:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800520e:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521c:	461a      	mov	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	3301      	adds	r3, #1
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b0f      	cmp	r3, #15
 800522c:	d9dc      	bls.n	80051e8 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	e034      	b.n	800529e <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800524a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005252:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800525a:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005268:	461a      	mov	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	3301      	adds	r3, #1
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800527a:	d80c      	bhi.n	8005296 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800528e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005292:	d0ec      	beq.n	800526e <USB_StopHost+0xb0>
 8005294:	e000      	b.n	8005298 <USB_StopHost+0xda>
        break;
 8005296:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	3301      	adds	r3, #1
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b0f      	cmp	r3, #15
 80052a2:	d9c7      	bls.n	8005234 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052aa:	461a      	mov	r2, r3
 80052ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052b8:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fd48 	bl	8004d50 <USB_EnableGlobalInt>

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f804 	bl	80052ee <USBH_HandleSof>
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b0b      	cmp	r3, #11
 80052fe:	d10a      	bne.n	8005316 <USBH_HandleSof+0x28>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4798      	blx	r3
  }
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800532e:	bf00      	nop
}
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800534a:	bf00      	nop
}
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10f      	bne.n	8005388 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00e      	beq.n	8005398 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005380:	2104      	movs	r1, #4
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4798      	blx	r3
 8005386:	e007      	b.n	8005398 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800538e:	2b01      	cmp	r3, #1
 8005390:	d102      	bne.n	8005398 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f8b1 	bl	8005512 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	791b      	ldrb	r3, [r3, #4]
 80053b4:	4619      	mov	r1, r3
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f820 	bl	80053fc <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	795b      	ldrb	r3, [r3, #5]
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f81a 	bl	80053fc <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80053e0:	2105      	movs	r1, #5
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f878 	bl	80054dc <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2203      	movs	r2, #3
 80053f0:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	2b0a      	cmp	r3, #10
 800540c:	d80b      	bhi.n	8005426 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	32e0      	adds	r2, #224	; 0xe0
 8005414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	32e0      	adds	r2, #224	; 0xe0
 8005422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff ff41 	bl	80052ca <USBH_LL_IncTimer>
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff ff79 	bl	8005356 <USBH_LL_Connect>
}
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff ff91 	bl	80053a2 <USBH_LL_Disconnect>
}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	70fb      	strb	r3, [r7, #3]
 8005494:	4613      	mov	r3, r2
 8005496:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff ff33 	bl	800531e <USBH_LL_PortEnabled>
} 
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff ff33 	bl	800533a <USBH_LL_PortDisabled>
} 
 80054d4:	bf00      	nop
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fd fa95 	bl	8002a22 <HAL_HCD_Start>
 80054f8:	4603      	mov	r3, r0
 80054fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f822 	bl	8005548 <USBH_Get_USB_Status>
 8005504:	4603      	mov	r3, r0
 8005506:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005508:	7bbb      	ldrb	r3, [r7, #14]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005528:	4618      	mov	r0, r3
 800552a:	f7fd fa9d 	bl	8002a68 <HAL_HCD_Stop>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	4618      	mov	r0, r3
 8005536:	f000 f807 	bl	8005548 <USBH_Get_USB_Status>
 800553a:	4603      	mov	r3, r0
 800553c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800553e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	2b03      	cmp	r3, #3
 800555a:	d817      	bhi.n	800558c <USBH_Get_USB_Status+0x44>
 800555c:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <USBH_Get_USB_Status+0x1c>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005575 	.word	0x08005575
 8005568:	0800557b 	.word	0x0800557b
 800556c:	08005581 	.word	0x08005581
 8005570:	08005587 	.word	0x08005587
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]
    break;
 8005578:	e00b      	b.n	8005592 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800557a:	2302      	movs	r3, #2
 800557c:	73fb      	strb	r3, [r7, #15]
    break;
 800557e:	e008      	b.n	8005592 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
    break;
 8005584:	e005      	b.n	8005592 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8005586:	2302      	movs	r3, #2
 8005588:	73fb      	strb	r3, [r7, #15]
    break;
 800558a:	e002      	b.n	8005592 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800558c:	2302      	movs	r3, #2
 800558e:	73fb      	strb	r3, [r7, #15]
    break;
 8005590:	bf00      	nop
  }
  return usb_status;
 8005592:	7bfb      	ldrb	r3, [r7, #15]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <__cxa_pure_virtual>:
 80055a0:	b508      	push	{r3, lr}
 80055a2:	f000 f80d 	bl	80055c0 <_ZSt9terminatev>

080055a6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80055a6:	b508      	push	{r3, lr}
 80055a8:	4780      	blx	r0
 80055aa:	f000 f812 	bl	80055d2 <abort>
	...

080055b0 <_ZSt13get_terminatev>:
 80055b0:	4b02      	ldr	r3, [pc, #8]	; (80055bc <_ZSt13get_terminatev+0xc>)
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	f3bf 8f5b 	dmb	ish
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	2000000c 	.word	0x2000000c

080055c0 <_ZSt9terminatev>:
 80055c0:	b508      	push	{r3, lr}
 80055c2:	f7ff fff5 	bl	80055b0 <_ZSt13get_terminatev>
 80055c6:	f7ff ffee 	bl	80055a6 <_ZN10__cxxabiv111__terminateEPFvvE>

080055ca <_ZdlPvj>:
 80055ca:	f000 b800 	b.w	80055ce <_ZdlPv>

080055ce <_ZdlPv>:
 80055ce:	f000 b861 	b.w	8005694 <free>

080055d2 <abort>:
 80055d2:	b508      	push	{r3, lr}
 80055d4:	2006      	movs	r0, #6
 80055d6:	f000 fc25 	bl	8005e24 <raise>
 80055da:	2001      	movs	r0, #1
 80055dc:	f7fc fa56 	bl	8001a8c <_exit>

080055e0 <__assert_func>:
 80055e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055e2:	461c      	mov	r4, r3
 80055e4:	4b09      	ldr	r3, [pc, #36]	; (800560c <__assert_func+0x2c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4605      	mov	r5, r0
 80055ea:	68d8      	ldr	r0, [r3, #12]
 80055ec:	b152      	cbz	r2, 8005604 <__assert_func+0x24>
 80055ee:	4b08      	ldr	r3, [pc, #32]	; (8005610 <__assert_func+0x30>)
 80055f0:	9100      	str	r1, [sp, #0]
 80055f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80055f6:	4907      	ldr	r1, [pc, #28]	; (8005614 <__assert_func+0x34>)
 80055f8:	462b      	mov	r3, r5
 80055fa:	4622      	mov	r2, r4
 80055fc:	f000 f814 	bl	8005628 <fiprintf>
 8005600:	f7ff ffe7 	bl	80055d2 <abort>
 8005604:	4b04      	ldr	r3, [pc, #16]	; (8005618 <__assert_func+0x38>)
 8005606:	461a      	mov	r2, r3
 8005608:	e7f2      	b.n	80055f0 <__assert_func+0x10>
 800560a:	bf00      	nop
 800560c:	20000010 	.word	0x20000010
 8005610:	08006610 	.word	0x08006610
 8005614:	0800661d 	.word	0x0800661d
 8005618:	0800664b 	.word	0x0800664b

0800561c <__errno>:
 800561c:	4b01      	ldr	r3, [pc, #4]	; (8005624 <__errno+0x8>)
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000010 	.word	0x20000010

08005628 <fiprintf>:
 8005628:	b40e      	push	{r1, r2, r3}
 800562a:	b503      	push	{r0, r1, lr}
 800562c:	4601      	mov	r1, r0
 800562e:	ab03      	add	r3, sp, #12
 8005630:	4805      	ldr	r0, [pc, #20]	; (8005648 <fiprintf+0x20>)
 8005632:	f853 2b04 	ldr.w	r2, [r3], #4
 8005636:	6800      	ldr	r0, [r0, #0]
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	f000 f91d 	bl	8005878 <_vfiprintf_r>
 800563e:	b002      	add	sp, #8
 8005640:	f85d eb04 	ldr.w	lr, [sp], #4
 8005644:	b003      	add	sp, #12
 8005646:	4770      	bx	lr
 8005648:	20000010 	.word	0x20000010

0800564c <__libc_init_array>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	4e0d      	ldr	r6, [pc, #52]	; (8005684 <__libc_init_array+0x38>)
 8005650:	4c0d      	ldr	r4, [pc, #52]	; (8005688 <__libc_init_array+0x3c>)
 8005652:	1ba4      	subs	r4, r4, r6
 8005654:	10a4      	asrs	r4, r4, #2
 8005656:	2500      	movs	r5, #0
 8005658:	42a5      	cmp	r5, r4
 800565a:	d109      	bne.n	8005670 <__libc_init_array+0x24>
 800565c:	4e0b      	ldr	r6, [pc, #44]	; (800568c <__libc_init_array+0x40>)
 800565e:	4c0c      	ldr	r4, [pc, #48]	; (8005690 <__libc_init_array+0x44>)
 8005660:	f000 ff48 	bl	80064f4 <_init>
 8005664:	1ba4      	subs	r4, r4, r6
 8005666:	10a4      	asrs	r4, r4, #2
 8005668:	2500      	movs	r5, #0
 800566a:	42a5      	cmp	r5, r4
 800566c:	d105      	bne.n	800567a <__libc_init_array+0x2e>
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005674:	4798      	blx	r3
 8005676:	3501      	adds	r5, #1
 8005678:	e7ee      	b.n	8005658 <__libc_init_array+0xc>
 800567a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800567e:	4798      	blx	r3
 8005680:	3501      	adds	r5, #1
 8005682:	e7f2      	b.n	800566a <__libc_init_array+0x1e>
 8005684:	080066ec 	.word	0x080066ec
 8005688:	080066ec 	.word	0x080066ec
 800568c:	080066ec 	.word	0x080066ec
 8005690:	080066f0 	.word	0x080066f0

08005694 <free>:
 8005694:	4b02      	ldr	r3, [pc, #8]	; (80056a0 <free+0xc>)
 8005696:	4601      	mov	r1, r0
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	f000 b81b 	b.w	80056d4 <_free_r>
 800569e:	bf00      	nop
 80056a0:	20000010 	.word	0x20000010

080056a4 <memcmp>:
 80056a4:	b530      	push	{r4, r5, lr}
 80056a6:	2400      	movs	r4, #0
 80056a8:	42a2      	cmp	r2, r4
 80056aa:	d101      	bne.n	80056b0 <memcmp+0xc>
 80056ac:	2000      	movs	r0, #0
 80056ae:	e007      	b.n	80056c0 <memcmp+0x1c>
 80056b0:	5d03      	ldrb	r3, [r0, r4]
 80056b2:	3401      	adds	r4, #1
 80056b4:	190d      	adds	r5, r1, r4
 80056b6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80056ba:	42ab      	cmp	r3, r5
 80056bc:	d0f4      	beq.n	80056a8 <memcmp+0x4>
 80056be:	1b58      	subs	r0, r3, r5
 80056c0:	bd30      	pop	{r4, r5, pc}

080056c2 <memset>:
 80056c2:	4402      	add	r2, r0
 80056c4:	4603      	mov	r3, r0
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d100      	bne.n	80056cc <memset+0xa>
 80056ca:	4770      	bx	lr
 80056cc:	f803 1b01 	strb.w	r1, [r3], #1
 80056d0:	e7f9      	b.n	80056c6 <memset+0x4>
	...

080056d4 <_free_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4605      	mov	r5, r0
 80056d8:	2900      	cmp	r1, #0
 80056da:	d045      	beq.n	8005768 <_free_r+0x94>
 80056dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e0:	1f0c      	subs	r4, r1, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bfb8      	it	lt
 80056e6:	18e4      	addlt	r4, r4, r3
 80056e8:	f000 fe56 	bl	8006398 <__malloc_lock>
 80056ec:	4a1f      	ldr	r2, [pc, #124]	; (800576c <_free_r+0x98>)
 80056ee:	6813      	ldr	r3, [r2, #0]
 80056f0:	4610      	mov	r0, r2
 80056f2:	b933      	cbnz	r3, 8005702 <_free_r+0x2e>
 80056f4:	6063      	str	r3, [r4, #4]
 80056f6:	6014      	str	r4, [r2, #0]
 80056f8:	4628      	mov	r0, r5
 80056fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056fe:	f000 be4c 	b.w	800639a <__malloc_unlock>
 8005702:	42a3      	cmp	r3, r4
 8005704:	d90c      	bls.n	8005720 <_free_r+0x4c>
 8005706:	6821      	ldr	r1, [r4, #0]
 8005708:	1862      	adds	r2, r4, r1
 800570a:	4293      	cmp	r3, r2
 800570c:	bf04      	itt	eq
 800570e:	681a      	ldreq	r2, [r3, #0]
 8005710:	685b      	ldreq	r3, [r3, #4]
 8005712:	6063      	str	r3, [r4, #4]
 8005714:	bf04      	itt	eq
 8005716:	1852      	addeq	r2, r2, r1
 8005718:	6022      	streq	r2, [r4, #0]
 800571a:	6004      	str	r4, [r0, #0]
 800571c:	e7ec      	b.n	80056f8 <_free_r+0x24>
 800571e:	4613      	mov	r3, r2
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	b10a      	cbz	r2, 8005728 <_free_r+0x54>
 8005724:	42a2      	cmp	r2, r4
 8005726:	d9fa      	bls.n	800571e <_free_r+0x4a>
 8005728:	6819      	ldr	r1, [r3, #0]
 800572a:	1858      	adds	r0, r3, r1
 800572c:	42a0      	cmp	r0, r4
 800572e:	d10b      	bne.n	8005748 <_free_r+0x74>
 8005730:	6820      	ldr	r0, [r4, #0]
 8005732:	4401      	add	r1, r0
 8005734:	1858      	adds	r0, r3, r1
 8005736:	4282      	cmp	r2, r0
 8005738:	6019      	str	r1, [r3, #0]
 800573a:	d1dd      	bne.n	80056f8 <_free_r+0x24>
 800573c:	6810      	ldr	r0, [r2, #0]
 800573e:	6852      	ldr	r2, [r2, #4]
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	4401      	add	r1, r0
 8005744:	6019      	str	r1, [r3, #0]
 8005746:	e7d7      	b.n	80056f8 <_free_r+0x24>
 8005748:	d902      	bls.n	8005750 <_free_r+0x7c>
 800574a:	230c      	movs	r3, #12
 800574c:	602b      	str	r3, [r5, #0]
 800574e:	e7d3      	b.n	80056f8 <_free_r+0x24>
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	1821      	adds	r1, r4, r0
 8005754:	428a      	cmp	r2, r1
 8005756:	bf04      	itt	eq
 8005758:	6811      	ldreq	r1, [r2, #0]
 800575a:	6852      	ldreq	r2, [r2, #4]
 800575c:	6062      	str	r2, [r4, #4]
 800575e:	bf04      	itt	eq
 8005760:	1809      	addeq	r1, r1, r0
 8005762:	6021      	streq	r1, [r4, #0]
 8005764:	605c      	str	r4, [r3, #4]
 8005766:	e7c7      	b.n	80056f8 <_free_r+0x24>
 8005768:	bd38      	pop	{r3, r4, r5, pc}
 800576a:	bf00      	nop
 800576c:	200000d4 	.word	0x200000d4

08005770 <_malloc_r>:
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	1ccd      	adds	r5, r1, #3
 8005774:	f025 0503 	bic.w	r5, r5, #3
 8005778:	3508      	adds	r5, #8
 800577a:	2d0c      	cmp	r5, #12
 800577c:	bf38      	it	cc
 800577e:	250c      	movcc	r5, #12
 8005780:	2d00      	cmp	r5, #0
 8005782:	4606      	mov	r6, r0
 8005784:	db01      	blt.n	800578a <_malloc_r+0x1a>
 8005786:	42a9      	cmp	r1, r5
 8005788:	d903      	bls.n	8005792 <_malloc_r+0x22>
 800578a:	230c      	movs	r3, #12
 800578c:	6033      	str	r3, [r6, #0]
 800578e:	2000      	movs	r0, #0
 8005790:	bd70      	pop	{r4, r5, r6, pc}
 8005792:	f000 fe01 	bl	8006398 <__malloc_lock>
 8005796:	4a21      	ldr	r2, [pc, #132]	; (800581c <_malloc_r+0xac>)
 8005798:	6814      	ldr	r4, [r2, #0]
 800579a:	4621      	mov	r1, r4
 800579c:	b991      	cbnz	r1, 80057c4 <_malloc_r+0x54>
 800579e:	4c20      	ldr	r4, [pc, #128]	; (8005820 <_malloc_r+0xb0>)
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	b91b      	cbnz	r3, 80057ac <_malloc_r+0x3c>
 80057a4:	4630      	mov	r0, r6
 80057a6:	f000 fb05 	bl	8005db4 <_sbrk_r>
 80057aa:	6020      	str	r0, [r4, #0]
 80057ac:	4629      	mov	r1, r5
 80057ae:	4630      	mov	r0, r6
 80057b0:	f000 fb00 	bl	8005db4 <_sbrk_r>
 80057b4:	1c43      	adds	r3, r0, #1
 80057b6:	d124      	bne.n	8005802 <_malloc_r+0x92>
 80057b8:	230c      	movs	r3, #12
 80057ba:	6033      	str	r3, [r6, #0]
 80057bc:	4630      	mov	r0, r6
 80057be:	f000 fdec 	bl	800639a <__malloc_unlock>
 80057c2:	e7e4      	b.n	800578e <_malloc_r+0x1e>
 80057c4:	680b      	ldr	r3, [r1, #0]
 80057c6:	1b5b      	subs	r3, r3, r5
 80057c8:	d418      	bmi.n	80057fc <_malloc_r+0x8c>
 80057ca:	2b0b      	cmp	r3, #11
 80057cc:	d90f      	bls.n	80057ee <_malloc_r+0x7e>
 80057ce:	600b      	str	r3, [r1, #0]
 80057d0:	50cd      	str	r5, [r1, r3]
 80057d2:	18cc      	adds	r4, r1, r3
 80057d4:	4630      	mov	r0, r6
 80057d6:	f000 fde0 	bl	800639a <__malloc_unlock>
 80057da:	f104 000b 	add.w	r0, r4, #11
 80057de:	1d23      	adds	r3, r4, #4
 80057e0:	f020 0007 	bic.w	r0, r0, #7
 80057e4:	1ac3      	subs	r3, r0, r3
 80057e6:	d0d3      	beq.n	8005790 <_malloc_r+0x20>
 80057e8:	425a      	negs	r2, r3
 80057ea:	50e2      	str	r2, [r4, r3]
 80057ec:	e7d0      	b.n	8005790 <_malloc_r+0x20>
 80057ee:	428c      	cmp	r4, r1
 80057f0:	684b      	ldr	r3, [r1, #4]
 80057f2:	bf16      	itet	ne
 80057f4:	6063      	strne	r3, [r4, #4]
 80057f6:	6013      	streq	r3, [r2, #0]
 80057f8:	460c      	movne	r4, r1
 80057fa:	e7eb      	b.n	80057d4 <_malloc_r+0x64>
 80057fc:	460c      	mov	r4, r1
 80057fe:	6849      	ldr	r1, [r1, #4]
 8005800:	e7cc      	b.n	800579c <_malloc_r+0x2c>
 8005802:	1cc4      	adds	r4, r0, #3
 8005804:	f024 0403 	bic.w	r4, r4, #3
 8005808:	42a0      	cmp	r0, r4
 800580a:	d005      	beq.n	8005818 <_malloc_r+0xa8>
 800580c:	1a21      	subs	r1, r4, r0
 800580e:	4630      	mov	r0, r6
 8005810:	f000 fad0 	bl	8005db4 <_sbrk_r>
 8005814:	3001      	adds	r0, #1
 8005816:	d0cf      	beq.n	80057b8 <_malloc_r+0x48>
 8005818:	6025      	str	r5, [r4, #0]
 800581a:	e7db      	b.n	80057d4 <_malloc_r+0x64>
 800581c:	200000d4 	.word	0x200000d4
 8005820:	200000d8 	.word	0x200000d8

08005824 <__sfputc_r>:
 8005824:	6893      	ldr	r3, [r2, #8]
 8005826:	3b01      	subs	r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	b410      	push	{r4}
 800582c:	6093      	str	r3, [r2, #8]
 800582e:	da08      	bge.n	8005842 <__sfputc_r+0x1e>
 8005830:	6994      	ldr	r4, [r2, #24]
 8005832:	42a3      	cmp	r3, r4
 8005834:	db01      	blt.n	800583a <__sfputc_r+0x16>
 8005836:	290a      	cmp	r1, #10
 8005838:	d103      	bne.n	8005842 <__sfputc_r+0x1e>
 800583a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800583e:	f000 bb0d 	b.w	8005e5c <__swbuf_r>
 8005842:	6813      	ldr	r3, [r2, #0]
 8005844:	1c58      	adds	r0, r3, #1
 8005846:	6010      	str	r0, [r2, #0]
 8005848:	7019      	strb	r1, [r3, #0]
 800584a:	4608      	mov	r0, r1
 800584c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005850:	4770      	bx	lr

08005852 <__sfputs_r>:
 8005852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005854:	4606      	mov	r6, r0
 8005856:	460f      	mov	r7, r1
 8005858:	4614      	mov	r4, r2
 800585a:	18d5      	adds	r5, r2, r3
 800585c:	42ac      	cmp	r4, r5
 800585e:	d101      	bne.n	8005864 <__sfputs_r+0x12>
 8005860:	2000      	movs	r0, #0
 8005862:	e007      	b.n	8005874 <__sfputs_r+0x22>
 8005864:	463a      	mov	r2, r7
 8005866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586a:	4630      	mov	r0, r6
 800586c:	f7ff ffda 	bl	8005824 <__sfputc_r>
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	d1f3      	bne.n	800585c <__sfputs_r+0xa>
 8005874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005878 <_vfiprintf_r>:
 8005878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587c:	460c      	mov	r4, r1
 800587e:	b09d      	sub	sp, #116	; 0x74
 8005880:	4617      	mov	r7, r2
 8005882:	461d      	mov	r5, r3
 8005884:	4606      	mov	r6, r0
 8005886:	b118      	cbz	r0, 8005890 <_vfiprintf_r+0x18>
 8005888:	6983      	ldr	r3, [r0, #24]
 800588a:	b90b      	cbnz	r3, 8005890 <_vfiprintf_r+0x18>
 800588c:	f000 fc96 	bl	80061bc <__sinit>
 8005890:	4b7c      	ldr	r3, [pc, #496]	; (8005a84 <_vfiprintf_r+0x20c>)
 8005892:	429c      	cmp	r4, r3
 8005894:	d158      	bne.n	8005948 <_vfiprintf_r+0xd0>
 8005896:	6874      	ldr	r4, [r6, #4]
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	0718      	lsls	r0, r3, #28
 800589c:	d55e      	bpl.n	800595c <_vfiprintf_r+0xe4>
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d05b      	beq.n	800595c <_vfiprintf_r+0xe4>
 80058a4:	2300      	movs	r3, #0
 80058a6:	9309      	str	r3, [sp, #36]	; 0x24
 80058a8:	2320      	movs	r3, #32
 80058aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058ae:	2330      	movs	r3, #48	; 0x30
 80058b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058b4:	9503      	str	r5, [sp, #12]
 80058b6:	f04f 0b01 	mov.w	fp, #1
 80058ba:	46b8      	mov	r8, r7
 80058bc:	4645      	mov	r5, r8
 80058be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80058c2:	b10b      	cbz	r3, 80058c8 <_vfiprintf_r+0x50>
 80058c4:	2b25      	cmp	r3, #37	; 0x25
 80058c6:	d154      	bne.n	8005972 <_vfiprintf_r+0xfa>
 80058c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80058cc:	d00b      	beq.n	80058e6 <_vfiprintf_r+0x6e>
 80058ce:	4653      	mov	r3, sl
 80058d0:	463a      	mov	r2, r7
 80058d2:	4621      	mov	r1, r4
 80058d4:	4630      	mov	r0, r6
 80058d6:	f7ff ffbc 	bl	8005852 <__sfputs_r>
 80058da:	3001      	adds	r0, #1
 80058dc:	f000 80c2 	beq.w	8005a64 <_vfiprintf_r+0x1ec>
 80058e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e2:	4453      	add	r3, sl
 80058e4:	9309      	str	r3, [sp, #36]	; 0x24
 80058e6:	f898 3000 	ldrb.w	r3, [r8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 80ba 	beq.w	8005a64 <_vfiprintf_r+0x1ec>
 80058f0:	2300      	movs	r3, #0
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058fa:	9304      	str	r3, [sp, #16]
 80058fc:	9307      	str	r3, [sp, #28]
 80058fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005902:	931a      	str	r3, [sp, #104]	; 0x68
 8005904:	46a8      	mov	r8, r5
 8005906:	2205      	movs	r2, #5
 8005908:	f818 1b01 	ldrb.w	r1, [r8], #1
 800590c:	485e      	ldr	r0, [pc, #376]	; (8005a88 <_vfiprintf_r+0x210>)
 800590e:	f7fa fc5f 	bl	80001d0 <memchr>
 8005912:	9b04      	ldr	r3, [sp, #16]
 8005914:	bb78      	cbnz	r0, 8005976 <_vfiprintf_r+0xfe>
 8005916:	06d9      	lsls	r1, r3, #27
 8005918:	bf44      	itt	mi
 800591a:	2220      	movmi	r2, #32
 800591c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005920:	071a      	lsls	r2, r3, #28
 8005922:	bf44      	itt	mi
 8005924:	222b      	movmi	r2, #43	; 0x2b
 8005926:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800592a:	782a      	ldrb	r2, [r5, #0]
 800592c:	2a2a      	cmp	r2, #42	; 0x2a
 800592e:	d02a      	beq.n	8005986 <_vfiprintf_r+0x10e>
 8005930:	9a07      	ldr	r2, [sp, #28]
 8005932:	46a8      	mov	r8, r5
 8005934:	2000      	movs	r0, #0
 8005936:	250a      	movs	r5, #10
 8005938:	4641      	mov	r1, r8
 800593a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800593e:	3b30      	subs	r3, #48	; 0x30
 8005940:	2b09      	cmp	r3, #9
 8005942:	d969      	bls.n	8005a18 <_vfiprintf_r+0x1a0>
 8005944:	b360      	cbz	r0, 80059a0 <_vfiprintf_r+0x128>
 8005946:	e024      	b.n	8005992 <_vfiprintf_r+0x11a>
 8005948:	4b50      	ldr	r3, [pc, #320]	; (8005a8c <_vfiprintf_r+0x214>)
 800594a:	429c      	cmp	r4, r3
 800594c:	d101      	bne.n	8005952 <_vfiprintf_r+0xda>
 800594e:	68b4      	ldr	r4, [r6, #8]
 8005950:	e7a2      	b.n	8005898 <_vfiprintf_r+0x20>
 8005952:	4b4f      	ldr	r3, [pc, #316]	; (8005a90 <_vfiprintf_r+0x218>)
 8005954:	429c      	cmp	r4, r3
 8005956:	bf08      	it	eq
 8005958:	68f4      	ldreq	r4, [r6, #12]
 800595a:	e79d      	b.n	8005898 <_vfiprintf_r+0x20>
 800595c:	4621      	mov	r1, r4
 800595e:	4630      	mov	r0, r6
 8005960:	f000 face 	bl	8005f00 <__swsetup_r>
 8005964:	2800      	cmp	r0, #0
 8005966:	d09d      	beq.n	80058a4 <_vfiprintf_r+0x2c>
 8005968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800596c:	b01d      	add	sp, #116	; 0x74
 800596e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005972:	46a8      	mov	r8, r5
 8005974:	e7a2      	b.n	80058bc <_vfiprintf_r+0x44>
 8005976:	4a44      	ldr	r2, [pc, #272]	; (8005a88 <_vfiprintf_r+0x210>)
 8005978:	1a80      	subs	r0, r0, r2
 800597a:	fa0b f000 	lsl.w	r0, fp, r0
 800597e:	4318      	orrs	r0, r3
 8005980:	9004      	str	r0, [sp, #16]
 8005982:	4645      	mov	r5, r8
 8005984:	e7be      	b.n	8005904 <_vfiprintf_r+0x8c>
 8005986:	9a03      	ldr	r2, [sp, #12]
 8005988:	1d11      	adds	r1, r2, #4
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	9103      	str	r1, [sp, #12]
 800598e:	2a00      	cmp	r2, #0
 8005990:	db01      	blt.n	8005996 <_vfiprintf_r+0x11e>
 8005992:	9207      	str	r2, [sp, #28]
 8005994:	e004      	b.n	80059a0 <_vfiprintf_r+0x128>
 8005996:	4252      	negs	r2, r2
 8005998:	f043 0302 	orr.w	r3, r3, #2
 800599c:	9207      	str	r2, [sp, #28]
 800599e:	9304      	str	r3, [sp, #16]
 80059a0:	f898 3000 	ldrb.w	r3, [r8]
 80059a4:	2b2e      	cmp	r3, #46	; 0x2e
 80059a6:	d10e      	bne.n	80059c6 <_vfiprintf_r+0x14e>
 80059a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80059ac:	2b2a      	cmp	r3, #42	; 0x2a
 80059ae:	d138      	bne.n	8005a22 <_vfiprintf_r+0x1aa>
 80059b0:	9b03      	ldr	r3, [sp, #12]
 80059b2:	1d1a      	adds	r2, r3, #4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	9203      	str	r2, [sp, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bfb8      	it	lt
 80059bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059c0:	f108 0802 	add.w	r8, r8, #2
 80059c4:	9305      	str	r3, [sp, #20]
 80059c6:	4d33      	ldr	r5, [pc, #204]	; (8005a94 <_vfiprintf_r+0x21c>)
 80059c8:	f898 1000 	ldrb.w	r1, [r8]
 80059cc:	2203      	movs	r2, #3
 80059ce:	4628      	mov	r0, r5
 80059d0:	f7fa fbfe 	bl	80001d0 <memchr>
 80059d4:	b140      	cbz	r0, 80059e8 <_vfiprintf_r+0x170>
 80059d6:	2340      	movs	r3, #64	; 0x40
 80059d8:	1b40      	subs	r0, r0, r5
 80059da:	fa03 f000 	lsl.w	r0, r3, r0
 80059de:	9b04      	ldr	r3, [sp, #16]
 80059e0:	4303      	orrs	r3, r0
 80059e2:	f108 0801 	add.w	r8, r8, #1
 80059e6:	9304      	str	r3, [sp, #16]
 80059e8:	f898 1000 	ldrb.w	r1, [r8]
 80059ec:	482a      	ldr	r0, [pc, #168]	; (8005a98 <_vfiprintf_r+0x220>)
 80059ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f2:	2206      	movs	r2, #6
 80059f4:	f108 0701 	add.w	r7, r8, #1
 80059f8:	f7fa fbea 	bl	80001d0 <memchr>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d037      	beq.n	8005a70 <_vfiprintf_r+0x1f8>
 8005a00:	4b26      	ldr	r3, [pc, #152]	; (8005a9c <_vfiprintf_r+0x224>)
 8005a02:	bb1b      	cbnz	r3, 8005a4c <_vfiprintf_r+0x1d4>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	3307      	adds	r3, #7
 8005a08:	f023 0307 	bic.w	r3, r3, #7
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a12:	444b      	add	r3, r9
 8005a14:	9309      	str	r3, [sp, #36]	; 0x24
 8005a16:	e750      	b.n	80058ba <_vfiprintf_r+0x42>
 8005a18:	fb05 3202 	mla	r2, r5, r2, r3
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	4688      	mov	r8, r1
 8005a20:	e78a      	b.n	8005938 <_vfiprintf_r+0xc0>
 8005a22:	2300      	movs	r3, #0
 8005a24:	f108 0801 	add.w	r8, r8, #1
 8005a28:	9305      	str	r3, [sp, #20]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	250a      	movs	r5, #10
 8005a2e:	4640      	mov	r0, r8
 8005a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a34:	3a30      	subs	r2, #48	; 0x30
 8005a36:	2a09      	cmp	r2, #9
 8005a38:	d903      	bls.n	8005a42 <_vfiprintf_r+0x1ca>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0c3      	beq.n	80059c6 <_vfiprintf_r+0x14e>
 8005a3e:	9105      	str	r1, [sp, #20]
 8005a40:	e7c1      	b.n	80059c6 <_vfiprintf_r+0x14e>
 8005a42:	fb05 2101 	mla	r1, r5, r1, r2
 8005a46:	2301      	movs	r3, #1
 8005a48:	4680      	mov	r8, r0
 8005a4a:	e7f0      	b.n	8005a2e <_vfiprintf_r+0x1b6>
 8005a4c:	ab03      	add	r3, sp, #12
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	4622      	mov	r2, r4
 8005a52:	4b13      	ldr	r3, [pc, #76]	; (8005aa0 <_vfiprintf_r+0x228>)
 8005a54:	a904      	add	r1, sp, #16
 8005a56:	4630      	mov	r0, r6
 8005a58:	f3af 8000 	nop.w
 8005a5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005a60:	4681      	mov	r9, r0
 8005a62:	d1d5      	bne.n	8005a10 <_vfiprintf_r+0x198>
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	065b      	lsls	r3, r3, #25
 8005a68:	f53f af7e 	bmi.w	8005968 <_vfiprintf_r+0xf0>
 8005a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a6e:	e77d      	b.n	800596c <_vfiprintf_r+0xf4>
 8005a70:	ab03      	add	r3, sp, #12
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	4622      	mov	r2, r4
 8005a76:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <_vfiprintf_r+0x228>)
 8005a78:	a904      	add	r1, sp, #16
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	f000 f888 	bl	8005b90 <_printf_i>
 8005a80:	e7ec      	b.n	8005a5c <_vfiprintf_r+0x1e4>
 8005a82:	bf00      	nop
 8005a84:	080066a4 	.word	0x080066a4
 8005a88:	08006650 	.word	0x08006650
 8005a8c:	080066c4 	.word	0x080066c4
 8005a90:	08006684 	.word	0x08006684
 8005a94:	08006656 	.word	0x08006656
 8005a98:	0800665a 	.word	0x0800665a
 8005a9c:	00000000 	.word	0x00000000
 8005aa0:	08005853 	.word	0x08005853

08005aa4 <_printf_common>:
 8005aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	4691      	mov	r9, r2
 8005aaa:	461f      	mov	r7, r3
 8005aac:	688a      	ldr	r2, [r1, #8]
 8005aae:	690b      	ldr	r3, [r1, #16]
 8005ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	bfb8      	it	lt
 8005ab8:	4613      	movlt	r3, r2
 8005aba:	f8c9 3000 	str.w	r3, [r9]
 8005abe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	b112      	cbz	r2, 8005ace <_printf_common+0x2a>
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f8c9 3000 	str.w	r3, [r9]
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	0699      	lsls	r1, r3, #26
 8005ad2:	bf42      	ittt	mi
 8005ad4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ad8:	3302      	addmi	r3, #2
 8005ada:	f8c9 3000 	strmi.w	r3, [r9]
 8005ade:	6825      	ldr	r5, [r4, #0]
 8005ae0:	f015 0506 	ands.w	r5, r5, #6
 8005ae4:	d107      	bne.n	8005af6 <_printf_common+0x52>
 8005ae6:	f104 0a19 	add.w	sl, r4, #25
 8005aea:	68e3      	ldr	r3, [r4, #12]
 8005aec:	f8d9 2000 	ldr.w	r2, [r9]
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	42ab      	cmp	r3, r5
 8005af4:	dc28      	bgt.n	8005b48 <_printf_common+0xa4>
 8005af6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	3300      	adds	r3, #0
 8005afe:	bf18      	it	ne
 8005b00:	2301      	movne	r3, #1
 8005b02:	0692      	lsls	r2, r2, #26
 8005b04:	d42d      	bmi.n	8005b62 <_printf_common+0xbe>
 8005b06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	47c0      	blx	r8
 8005b10:	3001      	adds	r0, #1
 8005b12:	d020      	beq.n	8005b56 <_printf_common+0xb2>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	68e5      	ldr	r5, [r4, #12]
 8005b18:	f8d9 2000 	ldr.w	r2, [r9]
 8005b1c:	f003 0306 	and.w	r3, r3, #6
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	bf08      	it	eq
 8005b24:	1aad      	subeq	r5, r5, r2
 8005b26:	68a3      	ldr	r3, [r4, #8]
 8005b28:	6922      	ldr	r2, [r4, #16]
 8005b2a:	bf0c      	ite	eq
 8005b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b30:	2500      	movne	r5, #0
 8005b32:	4293      	cmp	r3, r2
 8005b34:	bfc4      	itt	gt
 8005b36:	1a9b      	subgt	r3, r3, r2
 8005b38:	18ed      	addgt	r5, r5, r3
 8005b3a:	f04f 0900 	mov.w	r9, #0
 8005b3e:	341a      	adds	r4, #26
 8005b40:	454d      	cmp	r5, r9
 8005b42:	d11a      	bne.n	8005b7a <_printf_common+0xd6>
 8005b44:	2000      	movs	r0, #0
 8005b46:	e008      	b.n	8005b5a <_printf_common+0xb6>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	4652      	mov	r2, sl
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	4630      	mov	r0, r6
 8005b50:	47c0      	blx	r8
 8005b52:	3001      	adds	r0, #1
 8005b54:	d103      	bne.n	8005b5e <_printf_common+0xba>
 8005b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5e:	3501      	adds	r5, #1
 8005b60:	e7c3      	b.n	8005aea <_printf_common+0x46>
 8005b62:	18e1      	adds	r1, r4, r3
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	2030      	movs	r0, #48	; 0x30
 8005b68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b6c:	4422      	add	r2, r4
 8005b6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b76:	3302      	adds	r3, #2
 8005b78:	e7c5      	b.n	8005b06 <_printf_common+0x62>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4622      	mov	r2, r4
 8005b7e:	4639      	mov	r1, r7
 8005b80:	4630      	mov	r0, r6
 8005b82:	47c0      	blx	r8
 8005b84:	3001      	adds	r0, #1
 8005b86:	d0e6      	beq.n	8005b56 <_printf_common+0xb2>
 8005b88:	f109 0901 	add.w	r9, r9, #1
 8005b8c:	e7d8      	b.n	8005b40 <_printf_common+0x9c>
	...

08005b90 <_printf_i>:
 8005b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b98:	460c      	mov	r4, r1
 8005b9a:	7e09      	ldrb	r1, [r1, #24]
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	296e      	cmp	r1, #110	; 0x6e
 8005ba0:	4617      	mov	r7, r2
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	4698      	mov	r8, r3
 8005ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ba8:	f000 80b3 	beq.w	8005d12 <_printf_i+0x182>
 8005bac:	d822      	bhi.n	8005bf4 <_printf_i+0x64>
 8005bae:	2963      	cmp	r1, #99	; 0x63
 8005bb0:	d036      	beq.n	8005c20 <_printf_i+0x90>
 8005bb2:	d80a      	bhi.n	8005bca <_printf_i+0x3a>
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	f000 80b9 	beq.w	8005d2c <_printf_i+0x19c>
 8005bba:	2958      	cmp	r1, #88	; 0x58
 8005bbc:	f000 8083 	beq.w	8005cc6 <_printf_i+0x136>
 8005bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005bc8:	e032      	b.n	8005c30 <_printf_i+0xa0>
 8005bca:	2964      	cmp	r1, #100	; 0x64
 8005bcc:	d001      	beq.n	8005bd2 <_printf_i+0x42>
 8005bce:	2969      	cmp	r1, #105	; 0x69
 8005bd0:	d1f6      	bne.n	8005bc0 <_printf_i+0x30>
 8005bd2:	6820      	ldr	r0, [r4, #0]
 8005bd4:	6813      	ldr	r3, [r2, #0]
 8005bd6:	0605      	lsls	r5, r0, #24
 8005bd8:	f103 0104 	add.w	r1, r3, #4
 8005bdc:	d52a      	bpl.n	8005c34 <_printf_i+0xa4>
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6011      	str	r1, [r2, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	da03      	bge.n	8005bee <_printf_i+0x5e>
 8005be6:	222d      	movs	r2, #45	; 0x2d
 8005be8:	425b      	negs	r3, r3
 8005bea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005bee:	486f      	ldr	r0, [pc, #444]	; (8005dac <_printf_i+0x21c>)
 8005bf0:	220a      	movs	r2, #10
 8005bf2:	e039      	b.n	8005c68 <_printf_i+0xd8>
 8005bf4:	2973      	cmp	r1, #115	; 0x73
 8005bf6:	f000 809d 	beq.w	8005d34 <_printf_i+0x1a4>
 8005bfa:	d808      	bhi.n	8005c0e <_printf_i+0x7e>
 8005bfc:	296f      	cmp	r1, #111	; 0x6f
 8005bfe:	d020      	beq.n	8005c42 <_printf_i+0xb2>
 8005c00:	2970      	cmp	r1, #112	; 0x70
 8005c02:	d1dd      	bne.n	8005bc0 <_printf_i+0x30>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	f043 0320 	orr.w	r3, r3, #32
 8005c0a:	6023      	str	r3, [r4, #0]
 8005c0c:	e003      	b.n	8005c16 <_printf_i+0x86>
 8005c0e:	2975      	cmp	r1, #117	; 0x75
 8005c10:	d017      	beq.n	8005c42 <_printf_i+0xb2>
 8005c12:	2978      	cmp	r1, #120	; 0x78
 8005c14:	d1d4      	bne.n	8005bc0 <_printf_i+0x30>
 8005c16:	2378      	movs	r3, #120	; 0x78
 8005c18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c1c:	4864      	ldr	r0, [pc, #400]	; (8005db0 <_printf_i+0x220>)
 8005c1e:	e055      	b.n	8005ccc <_printf_i+0x13c>
 8005c20:	6813      	ldr	r3, [r2, #0]
 8005c22:	1d19      	adds	r1, r3, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6011      	str	r1, [r2, #0]
 8005c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c30:	2301      	movs	r3, #1
 8005c32:	e08c      	b.n	8005d4e <_printf_i+0x1be>
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6011      	str	r1, [r2, #0]
 8005c38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c3c:	bf18      	it	ne
 8005c3e:	b21b      	sxthne	r3, r3
 8005c40:	e7cf      	b.n	8005be2 <_printf_i+0x52>
 8005c42:	6813      	ldr	r3, [r2, #0]
 8005c44:	6825      	ldr	r5, [r4, #0]
 8005c46:	1d18      	adds	r0, r3, #4
 8005c48:	6010      	str	r0, [r2, #0]
 8005c4a:	0628      	lsls	r0, r5, #24
 8005c4c:	d501      	bpl.n	8005c52 <_printf_i+0xc2>
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	e002      	b.n	8005c58 <_printf_i+0xc8>
 8005c52:	0668      	lsls	r0, r5, #25
 8005c54:	d5fb      	bpl.n	8005c4e <_printf_i+0xbe>
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	4854      	ldr	r0, [pc, #336]	; (8005dac <_printf_i+0x21c>)
 8005c5a:	296f      	cmp	r1, #111	; 0x6f
 8005c5c:	bf14      	ite	ne
 8005c5e:	220a      	movne	r2, #10
 8005c60:	2208      	moveq	r2, #8
 8005c62:	2100      	movs	r1, #0
 8005c64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c68:	6865      	ldr	r5, [r4, #4]
 8005c6a:	60a5      	str	r5, [r4, #8]
 8005c6c:	2d00      	cmp	r5, #0
 8005c6e:	f2c0 8095 	blt.w	8005d9c <_printf_i+0x20c>
 8005c72:	6821      	ldr	r1, [r4, #0]
 8005c74:	f021 0104 	bic.w	r1, r1, #4
 8005c78:	6021      	str	r1, [r4, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d13d      	bne.n	8005cfa <_printf_i+0x16a>
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	f040 808e 	bne.w	8005da0 <_printf_i+0x210>
 8005c84:	4665      	mov	r5, ip
 8005c86:	2a08      	cmp	r2, #8
 8005c88:	d10b      	bne.n	8005ca2 <_printf_i+0x112>
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	07db      	lsls	r3, r3, #31
 8005c8e:	d508      	bpl.n	8005ca2 <_printf_i+0x112>
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	6862      	ldr	r2, [r4, #4]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	bfde      	ittt	le
 8005c98:	2330      	movle	r3, #48	; 0x30
 8005c9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c9e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ca2:	ebac 0305 	sub.w	r3, ip, r5
 8005ca6:	6123      	str	r3, [r4, #16]
 8005ca8:	f8cd 8000 	str.w	r8, [sp]
 8005cac:	463b      	mov	r3, r7
 8005cae:	aa03      	add	r2, sp, #12
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f7ff fef6 	bl	8005aa4 <_printf_common>
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d14d      	bne.n	8005d58 <_printf_i+0x1c8>
 8005cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cc0:	b005      	add	sp, #20
 8005cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cc6:	4839      	ldr	r0, [pc, #228]	; (8005dac <_printf_i+0x21c>)
 8005cc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ccc:	6813      	ldr	r3, [r2, #0]
 8005cce:	6821      	ldr	r1, [r4, #0]
 8005cd0:	1d1d      	adds	r5, r3, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6015      	str	r5, [r2, #0]
 8005cd6:	060a      	lsls	r2, r1, #24
 8005cd8:	d50b      	bpl.n	8005cf2 <_printf_i+0x162>
 8005cda:	07ca      	lsls	r2, r1, #31
 8005cdc:	bf44      	itt	mi
 8005cde:	f041 0120 	orrmi.w	r1, r1, #32
 8005ce2:	6021      	strmi	r1, [r4, #0]
 8005ce4:	b91b      	cbnz	r3, 8005cee <_printf_i+0x15e>
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	f022 0220 	bic.w	r2, r2, #32
 8005cec:	6022      	str	r2, [r4, #0]
 8005cee:	2210      	movs	r2, #16
 8005cf0:	e7b7      	b.n	8005c62 <_printf_i+0xd2>
 8005cf2:	064d      	lsls	r5, r1, #25
 8005cf4:	bf48      	it	mi
 8005cf6:	b29b      	uxthmi	r3, r3
 8005cf8:	e7ef      	b.n	8005cda <_printf_i+0x14a>
 8005cfa:	4665      	mov	r5, ip
 8005cfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d00:	fb02 3311 	mls	r3, r2, r1, r3
 8005d04:	5cc3      	ldrb	r3, [r0, r3]
 8005d06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d1f5      	bne.n	8005cfc <_printf_i+0x16c>
 8005d10:	e7b9      	b.n	8005c86 <_printf_i+0xf6>
 8005d12:	6813      	ldr	r3, [r2, #0]
 8005d14:	6825      	ldr	r5, [r4, #0]
 8005d16:	6961      	ldr	r1, [r4, #20]
 8005d18:	1d18      	adds	r0, r3, #4
 8005d1a:	6010      	str	r0, [r2, #0]
 8005d1c:	0628      	lsls	r0, r5, #24
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	d501      	bpl.n	8005d26 <_printf_i+0x196>
 8005d22:	6019      	str	r1, [r3, #0]
 8005d24:	e002      	b.n	8005d2c <_printf_i+0x19c>
 8005d26:	066a      	lsls	r2, r5, #25
 8005d28:	d5fb      	bpl.n	8005d22 <_printf_i+0x192>
 8005d2a:	8019      	strh	r1, [r3, #0]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	6123      	str	r3, [r4, #16]
 8005d30:	4665      	mov	r5, ip
 8005d32:	e7b9      	b.n	8005ca8 <_printf_i+0x118>
 8005d34:	6813      	ldr	r3, [r2, #0]
 8005d36:	1d19      	adds	r1, r3, #4
 8005d38:	6011      	str	r1, [r2, #0]
 8005d3a:	681d      	ldr	r5, [r3, #0]
 8005d3c:	6862      	ldr	r2, [r4, #4]
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4628      	mov	r0, r5
 8005d42:	f7fa fa45 	bl	80001d0 <memchr>
 8005d46:	b108      	cbz	r0, 8005d4c <_printf_i+0x1bc>
 8005d48:	1b40      	subs	r0, r0, r5
 8005d4a:	6060      	str	r0, [r4, #4]
 8005d4c:	6863      	ldr	r3, [r4, #4]
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	2300      	movs	r3, #0
 8005d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d56:	e7a7      	b.n	8005ca8 <_printf_i+0x118>
 8005d58:	6923      	ldr	r3, [r4, #16]
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	4639      	mov	r1, r7
 8005d5e:	4630      	mov	r0, r6
 8005d60:	47c0      	blx	r8
 8005d62:	3001      	adds	r0, #1
 8005d64:	d0aa      	beq.n	8005cbc <_printf_i+0x12c>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	079b      	lsls	r3, r3, #30
 8005d6a:	d413      	bmi.n	8005d94 <_printf_i+0x204>
 8005d6c:	68e0      	ldr	r0, [r4, #12]
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	4298      	cmp	r0, r3
 8005d72:	bfb8      	it	lt
 8005d74:	4618      	movlt	r0, r3
 8005d76:	e7a3      	b.n	8005cc0 <_printf_i+0x130>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	464a      	mov	r2, r9
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	4630      	mov	r0, r6
 8005d80:	47c0      	blx	r8
 8005d82:	3001      	adds	r0, #1
 8005d84:	d09a      	beq.n	8005cbc <_printf_i+0x12c>
 8005d86:	3501      	adds	r5, #1
 8005d88:	68e3      	ldr	r3, [r4, #12]
 8005d8a:	9a03      	ldr	r2, [sp, #12]
 8005d8c:	1a9b      	subs	r3, r3, r2
 8005d8e:	42ab      	cmp	r3, r5
 8005d90:	dcf2      	bgt.n	8005d78 <_printf_i+0x1e8>
 8005d92:	e7eb      	b.n	8005d6c <_printf_i+0x1dc>
 8005d94:	2500      	movs	r5, #0
 8005d96:	f104 0919 	add.w	r9, r4, #25
 8005d9a:	e7f5      	b.n	8005d88 <_printf_i+0x1f8>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1ac      	bne.n	8005cfa <_printf_i+0x16a>
 8005da0:	7803      	ldrb	r3, [r0, #0]
 8005da2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005da6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005daa:	e76c      	b.n	8005c86 <_printf_i+0xf6>
 8005dac:	08006661 	.word	0x08006661
 8005db0:	08006672 	.word	0x08006672

08005db4 <_sbrk_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4c06      	ldr	r4, [pc, #24]	; (8005dd0 <_sbrk_r+0x1c>)
 8005db8:	2300      	movs	r3, #0
 8005dba:	4605      	mov	r5, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	6023      	str	r3, [r4, #0]
 8005dc0:	f7fb fedc 	bl	8001b7c <_sbrk>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_sbrk_r+0x1a>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_sbrk_r+0x1a>
 8005dcc:	602b      	str	r3, [r5, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	200003c4 	.word	0x200003c4

08005dd4 <_raise_r>:
 8005dd4:	291f      	cmp	r1, #31
 8005dd6:	b538      	push	{r3, r4, r5, lr}
 8005dd8:	4604      	mov	r4, r0
 8005dda:	460d      	mov	r5, r1
 8005ddc:	d904      	bls.n	8005de8 <_raise_r+0x14>
 8005dde:	2316      	movs	r3, #22
 8005de0:	6003      	str	r3, [r0, #0]
 8005de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005dea:	b112      	cbz	r2, 8005df2 <_raise_r+0x1e>
 8005dec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005df0:	b94b      	cbnz	r3, 8005e06 <_raise_r+0x32>
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 f830 	bl	8005e58 <_getpid_r>
 8005df8:	462a      	mov	r2, r5
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e02:	f000 b817 	b.w	8005e34 <_kill_r>
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d00a      	beq.n	8005e20 <_raise_r+0x4c>
 8005e0a:	1c59      	adds	r1, r3, #1
 8005e0c:	d103      	bne.n	8005e16 <_raise_r+0x42>
 8005e0e:	2316      	movs	r3, #22
 8005e10:	6003      	str	r3, [r0, #0]
 8005e12:	2001      	movs	r0, #1
 8005e14:	e7e7      	b.n	8005de6 <_raise_r+0x12>
 8005e16:	2400      	movs	r4, #0
 8005e18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	4798      	blx	r3
 8005e20:	2000      	movs	r0, #0
 8005e22:	e7e0      	b.n	8005de6 <_raise_r+0x12>

08005e24 <raise>:
 8005e24:	4b02      	ldr	r3, [pc, #8]	; (8005e30 <raise+0xc>)
 8005e26:	4601      	mov	r1, r0
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	f7ff bfd3 	b.w	8005dd4 <_raise_r>
 8005e2e:	bf00      	nop
 8005e30:	20000010 	.word	0x20000010

08005e34 <_kill_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4c07      	ldr	r4, [pc, #28]	; (8005e54 <_kill_r+0x20>)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	4611      	mov	r1, r2
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	f7fb fe13 	bl	8001a6c <_kill>
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	d102      	bne.n	8005e50 <_kill_r+0x1c>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	b103      	cbz	r3, 8005e50 <_kill_r+0x1c>
 8005e4e:	602b      	str	r3, [r5, #0]
 8005e50:	bd38      	pop	{r3, r4, r5, pc}
 8005e52:	bf00      	nop
 8005e54:	200003c4 	.word	0x200003c4

08005e58 <_getpid_r>:
 8005e58:	f7fb be00 	b.w	8001a5c <_getpid>

08005e5c <__swbuf_r>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	460e      	mov	r6, r1
 8005e60:	4614      	mov	r4, r2
 8005e62:	4605      	mov	r5, r0
 8005e64:	b118      	cbz	r0, 8005e6e <__swbuf_r+0x12>
 8005e66:	6983      	ldr	r3, [r0, #24]
 8005e68:	b90b      	cbnz	r3, 8005e6e <__swbuf_r+0x12>
 8005e6a:	f000 f9a7 	bl	80061bc <__sinit>
 8005e6e:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <__swbuf_r+0x98>)
 8005e70:	429c      	cmp	r4, r3
 8005e72:	d12a      	bne.n	8005eca <__swbuf_r+0x6e>
 8005e74:	686c      	ldr	r4, [r5, #4]
 8005e76:	69a3      	ldr	r3, [r4, #24]
 8005e78:	60a3      	str	r3, [r4, #8]
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	071a      	lsls	r2, r3, #28
 8005e7e:	d52e      	bpl.n	8005ede <__swbuf_r+0x82>
 8005e80:	6923      	ldr	r3, [r4, #16]
 8005e82:	b363      	cbz	r3, 8005ede <__swbuf_r+0x82>
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	6820      	ldr	r0, [r4, #0]
 8005e88:	1ac0      	subs	r0, r0, r3
 8005e8a:	6963      	ldr	r3, [r4, #20]
 8005e8c:	b2f6      	uxtb	r6, r6
 8005e8e:	4283      	cmp	r3, r0
 8005e90:	4637      	mov	r7, r6
 8005e92:	dc04      	bgt.n	8005e9e <__swbuf_r+0x42>
 8005e94:	4621      	mov	r1, r4
 8005e96:	4628      	mov	r0, r5
 8005e98:	f000 f926 	bl	80060e8 <_fflush_r>
 8005e9c:	bb28      	cbnz	r0, 8005eea <__swbuf_r+0x8e>
 8005e9e:	68a3      	ldr	r3, [r4, #8]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	60a3      	str	r3, [r4, #8]
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	6022      	str	r2, [r4, #0]
 8005eaa:	701e      	strb	r6, [r3, #0]
 8005eac:	6963      	ldr	r3, [r4, #20]
 8005eae:	3001      	adds	r0, #1
 8005eb0:	4283      	cmp	r3, r0
 8005eb2:	d004      	beq.n	8005ebe <__swbuf_r+0x62>
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	07db      	lsls	r3, r3, #31
 8005eb8:	d519      	bpl.n	8005eee <__swbuf_r+0x92>
 8005eba:	2e0a      	cmp	r6, #10
 8005ebc:	d117      	bne.n	8005eee <__swbuf_r+0x92>
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 f911 	bl	80060e8 <_fflush_r>
 8005ec6:	b190      	cbz	r0, 8005eee <__swbuf_r+0x92>
 8005ec8:	e00f      	b.n	8005eea <__swbuf_r+0x8e>
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <__swbuf_r+0x9c>)
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	d101      	bne.n	8005ed4 <__swbuf_r+0x78>
 8005ed0:	68ac      	ldr	r4, [r5, #8]
 8005ed2:	e7d0      	b.n	8005e76 <__swbuf_r+0x1a>
 8005ed4:	4b09      	ldr	r3, [pc, #36]	; (8005efc <__swbuf_r+0xa0>)
 8005ed6:	429c      	cmp	r4, r3
 8005ed8:	bf08      	it	eq
 8005eda:	68ec      	ldreq	r4, [r5, #12]
 8005edc:	e7cb      	b.n	8005e76 <__swbuf_r+0x1a>
 8005ede:	4621      	mov	r1, r4
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 f80d 	bl	8005f00 <__swsetup_r>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d0cc      	beq.n	8005e84 <__swbuf_r+0x28>
 8005eea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005eee:	4638      	mov	r0, r7
 8005ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	080066a4 	.word	0x080066a4
 8005ef8:	080066c4 	.word	0x080066c4
 8005efc:	08006684 	.word	0x08006684

08005f00 <__swsetup_r>:
 8005f00:	4b32      	ldr	r3, [pc, #200]	; (8005fcc <__swsetup_r+0xcc>)
 8005f02:	b570      	push	{r4, r5, r6, lr}
 8005f04:	681d      	ldr	r5, [r3, #0]
 8005f06:	4606      	mov	r6, r0
 8005f08:	460c      	mov	r4, r1
 8005f0a:	b125      	cbz	r5, 8005f16 <__swsetup_r+0x16>
 8005f0c:	69ab      	ldr	r3, [r5, #24]
 8005f0e:	b913      	cbnz	r3, 8005f16 <__swsetup_r+0x16>
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 f953 	bl	80061bc <__sinit>
 8005f16:	4b2e      	ldr	r3, [pc, #184]	; (8005fd0 <__swsetup_r+0xd0>)
 8005f18:	429c      	cmp	r4, r3
 8005f1a:	d10f      	bne.n	8005f3c <__swsetup_r+0x3c>
 8005f1c:	686c      	ldr	r4, [r5, #4]
 8005f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	0715      	lsls	r5, r2, #28
 8005f26:	d42c      	bmi.n	8005f82 <__swsetup_r+0x82>
 8005f28:	06d0      	lsls	r0, r2, #27
 8005f2a:	d411      	bmi.n	8005f50 <__swsetup_r+0x50>
 8005f2c:	2209      	movs	r2, #9
 8005f2e:	6032      	str	r2, [r6, #0]
 8005f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f34:	81a3      	strh	r3, [r4, #12]
 8005f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f3a:	e03e      	b.n	8005fba <__swsetup_r+0xba>
 8005f3c:	4b25      	ldr	r3, [pc, #148]	; (8005fd4 <__swsetup_r+0xd4>)
 8005f3e:	429c      	cmp	r4, r3
 8005f40:	d101      	bne.n	8005f46 <__swsetup_r+0x46>
 8005f42:	68ac      	ldr	r4, [r5, #8]
 8005f44:	e7eb      	b.n	8005f1e <__swsetup_r+0x1e>
 8005f46:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <__swsetup_r+0xd8>)
 8005f48:	429c      	cmp	r4, r3
 8005f4a:	bf08      	it	eq
 8005f4c:	68ec      	ldreq	r4, [r5, #12]
 8005f4e:	e7e6      	b.n	8005f1e <__swsetup_r+0x1e>
 8005f50:	0751      	lsls	r1, r2, #29
 8005f52:	d512      	bpl.n	8005f7a <__swsetup_r+0x7a>
 8005f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f56:	b141      	cbz	r1, 8005f6a <__swsetup_r+0x6a>
 8005f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f5c:	4299      	cmp	r1, r3
 8005f5e:	d002      	beq.n	8005f66 <__swsetup_r+0x66>
 8005f60:	4630      	mov	r0, r6
 8005f62:	f7ff fbb7 	bl	80056d4 <_free_r>
 8005f66:	2300      	movs	r3, #0
 8005f68:	6363      	str	r3, [r4, #52]	; 0x34
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f70:	81a3      	strh	r3, [r4, #12]
 8005f72:	2300      	movs	r3, #0
 8005f74:	6063      	str	r3, [r4, #4]
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	f043 0308 	orr.w	r3, r3, #8
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	b94b      	cbnz	r3, 8005f9a <__swsetup_r+0x9a>
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f90:	d003      	beq.n	8005f9a <__swsetup_r+0x9a>
 8005f92:	4621      	mov	r1, r4
 8005f94:	4630      	mov	r0, r6
 8005f96:	f000 f9bf 	bl	8006318 <__smakebuf_r>
 8005f9a:	89a2      	ldrh	r2, [r4, #12]
 8005f9c:	f012 0301 	ands.w	r3, r2, #1
 8005fa0:	d00c      	beq.n	8005fbc <__swsetup_r+0xbc>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60a3      	str	r3, [r4, #8]
 8005fa6:	6963      	ldr	r3, [r4, #20]
 8005fa8:	425b      	negs	r3, r3
 8005faa:	61a3      	str	r3, [r4, #24]
 8005fac:	6923      	ldr	r3, [r4, #16]
 8005fae:	b953      	cbnz	r3, 8005fc6 <__swsetup_r+0xc6>
 8005fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005fb8:	d1ba      	bne.n	8005f30 <__swsetup_r+0x30>
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	0792      	lsls	r2, r2, #30
 8005fbe:	bf58      	it	pl
 8005fc0:	6963      	ldrpl	r3, [r4, #20]
 8005fc2:	60a3      	str	r3, [r4, #8]
 8005fc4:	e7f2      	b.n	8005fac <__swsetup_r+0xac>
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	e7f7      	b.n	8005fba <__swsetup_r+0xba>
 8005fca:	bf00      	nop
 8005fcc:	20000010 	.word	0x20000010
 8005fd0:	080066a4 	.word	0x080066a4
 8005fd4:	080066c4 	.word	0x080066c4
 8005fd8:	08006684 	.word	0x08006684

08005fdc <__sflush_r>:
 8005fdc:	898a      	ldrh	r2, [r1, #12]
 8005fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	0710      	lsls	r0, r2, #28
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	d458      	bmi.n	800609c <__sflush_r+0xc0>
 8005fea:	684b      	ldr	r3, [r1, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dc05      	bgt.n	8005ffc <__sflush_r+0x20>
 8005ff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	dc02      	bgt.n	8005ffc <__sflush_r+0x20>
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ffe:	2e00      	cmp	r6, #0
 8006000:	d0f9      	beq.n	8005ff6 <__sflush_r+0x1a>
 8006002:	2300      	movs	r3, #0
 8006004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006008:	682f      	ldr	r7, [r5, #0]
 800600a:	6a21      	ldr	r1, [r4, #32]
 800600c:	602b      	str	r3, [r5, #0]
 800600e:	d032      	beq.n	8006076 <__sflush_r+0x9a>
 8006010:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	075a      	lsls	r2, r3, #29
 8006016:	d505      	bpl.n	8006024 <__sflush_r+0x48>
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	1ac0      	subs	r0, r0, r3
 800601c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800601e:	b10b      	cbz	r3, 8006024 <__sflush_r+0x48>
 8006020:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006022:	1ac0      	subs	r0, r0, r3
 8006024:	2300      	movs	r3, #0
 8006026:	4602      	mov	r2, r0
 8006028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800602a:	6a21      	ldr	r1, [r4, #32]
 800602c:	4628      	mov	r0, r5
 800602e:	47b0      	blx	r6
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	89a3      	ldrh	r3, [r4, #12]
 8006034:	d106      	bne.n	8006044 <__sflush_r+0x68>
 8006036:	6829      	ldr	r1, [r5, #0]
 8006038:	291d      	cmp	r1, #29
 800603a:	d848      	bhi.n	80060ce <__sflush_r+0xf2>
 800603c:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <__sflush_r+0x108>)
 800603e:	40ca      	lsrs	r2, r1
 8006040:	07d6      	lsls	r6, r2, #31
 8006042:	d544      	bpl.n	80060ce <__sflush_r+0xf2>
 8006044:	2200      	movs	r2, #0
 8006046:	6062      	str	r2, [r4, #4]
 8006048:	04d9      	lsls	r1, r3, #19
 800604a:	6922      	ldr	r2, [r4, #16]
 800604c:	6022      	str	r2, [r4, #0]
 800604e:	d504      	bpl.n	800605a <__sflush_r+0x7e>
 8006050:	1c42      	adds	r2, r0, #1
 8006052:	d101      	bne.n	8006058 <__sflush_r+0x7c>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	b903      	cbnz	r3, 800605a <__sflush_r+0x7e>
 8006058:	6560      	str	r0, [r4, #84]	; 0x54
 800605a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800605c:	602f      	str	r7, [r5, #0]
 800605e:	2900      	cmp	r1, #0
 8006060:	d0c9      	beq.n	8005ff6 <__sflush_r+0x1a>
 8006062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006066:	4299      	cmp	r1, r3
 8006068:	d002      	beq.n	8006070 <__sflush_r+0x94>
 800606a:	4628      	mov	r0, r5
 800606c:	f7ff fb32 	bl	80056d4 <_free_r>
 8006070:	2000      	movs	r0, #0
 8006072:	6360      	str	r0, [r4, #52]	; 0x34
 8006074:	e7c0      	b.n	8005ff8 <__sflush_r+0x1c>
 8006076:	2301      	movs	r3, #1
 8006078:	4628      	mov	r0, r5
 800607a:	47b0      	blx	r6
 800607c:	1c41      	adds	r1, r0, #1
 800607e:	d1c8      	bne.n	8006012 <__sflush_r+0x36>
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0c5      	beq.n	8006012 <__sflush_r+0x36>
 8006086:	2b1d      	cmp	r3, #29
 8006088:	d001      	beq.n	800608e <__sflush_r+0xb2>
 800608a:	2b16      	cmp	r3, #22
 800608c:	d101      	bne.n	8006092 <__sflush_r+0xb6>
 800608e:	602f      	str	r7, [r5, #0]
 8006090:	e7b1      	b.n	8005ff6 <__sflush_r+0x1a>
 8006092:	89a3      	ldrh	r3, [r4, #12]
 8006094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006098:	81a3      	strh	r3, [r4, #12]
 800609a:	e7ad      	b.n	8005ff8 <__sflush_r+0x1c>
 800609c:	690f      	ldr	r7, [r1, #16]
 800609e:	2f00      	cmp	r7, #0
 80060a0:	d0a9      	beq.n	8005ff6 <__sflush_r+0x1a>
 80060a2:	0793      	lsls	r3, r2, #30
 80060a4:	680e      	ldr	r6, [r1, #0]
 80060a6:	bf08      	it	eq
 80060a8:	694b      	ldreq	r3, [r1, #20]
 80060aa:	600f      	str	r7, [r1, #0]
 80060ac:	bf18      	it	ne
 80060ae:	2300      	movne	r3, #0
 80060b0:	eba6 0807 	sub.w	r8, r6, r7
 80060b4:	608b      	str	r3, [r1, #8]
 80060b6:	f1b8 0f00 	cmp.w	r8, #0
 80060ba:	dd9c      	ble.n	8005ff6 <__sflush_r+0x1a>
 80060bc:	4643      	mov	r3, r8
 80060be:	463a      	mov	r2, r7
 80060c0:	6a21      	ldr	r1, [r4, #32]
 80060c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b0      	blx	r6
 80060c8:	2800      	cmp	r0, #0
 80060ca:	dc06      	bgt.n	80060da <__sflush_r+0xfe>
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060d8:	e78e      	b.n	8005ff8 <__sflush_r+0x1c>
 80060da:	4407      	add	r7, r0
 80060dc:	eba8 0800 	sub.w	r8, r8, r0
 80060e0:	e7e9      	b.n	80060b6 <__sflush_r+0xda>
 80060e2:	bf00      	nop
 80060e4:	20400001 	.word	0x20400001

080060e8 <_fflush_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	690b      	ldr	r3, [r1, #16]
 80060ec:	4605      	mov	r5, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	b1db      	cbz	r3, 800612a <_fflush_r+0x42>
 80060f2:	b118      	cbz	r0, 80060fc <_fflush_r+0x14>
 80060f4:	6983      	ldr	r3, [r0, #24]
 80060f6:	b90b      	cbnz	r3, 80060fc <_fflush_r+0x14>
 80060f8:	f000 f860 	bl	80061bc <__sinit>
 80060fc:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <_fflush_r+0x48>)
 80060fe:	429c      	cmp	r4, r3
 8006100:	d109      	bne.n	8006116 <_fflush_r+0x2e>
 8006102:	686c      	ldr	r4, [r5, #4]
 8006104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006108:	b17b      	cbz	r3, 800612a <_fflush_r+0x42>
 800610a:	4621      	mov	r1, r4
 800610c:	4628      	mov	r0, r5
 800610e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006112:	f7ff bf63 	b.w	8005fdc <__sflush_r>
 8006116:	4b07      	ldr	r3, [pc, #28]	; (8006134 <_fflush_r+0x4c>)
 8006118:	429c      	cmp	r4, r3
 800611a:	d101      	bne.n	8006120 <_fflush_r+0x38>
 800611c:	68ac      	ldr	r4, [r5, #8]
 800611e:	e7f1      	b.n	8006104 <_fflush_r+0x1c>
 8006120:	4b05      	ldr	r3, [pc, #20]	; (8006138 <_fflush_r+0x50>)
 8006122:	429c      	cmp	r4, r3
 8006124:	bf08      	it	eq
 8006126:	68ec      	ldreq	r4, [r5, #12]
 8006128:	e7ec      	b.n	8006104 <_fflush_r+0x1c>
 800612a:	2000      	movs	r0, #0
 800612c:	bd38      	pop	{r3, r4, r5, pc}
 800612e:	bf00      	nop
 8006130:	080066a4 	.word	0x080066a4
 8006134:	080066c4 	.word	0x080066c4
 8006138:	08006684 	.word	0x08006684

0800613c <std>:
 800613c:	2300      	movs	r3, #0
 800613e:	b510      	push	{r4, lr}
 8006140:	4604      	mov	r4, r0
 8006142:	e9c0 3300 	strd	r3, r3, [r0]
 8006146:	6083      	str	r3, [r0, #8]
 8006148:	8181      	strh	r1, [r0, #12]
 800614a:	6643      	str	r3, [r0, #100]	; 0x64
 800614c:	81c2      	strh	r2, [r0, #14]
 800614e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006152:	6183      	str	r3, [r0, #24]
 8006154:	4619      	mov	r1, r3
 8006156:	2208      	movs	r2, #8
 8006158:	305c      	adds	r0, #92	; 0x5c
 800615a:	f7ff fab2 	bl	80056c2 <memset>
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <std+0x38>)
 8006160:	6263      	str	r3, [r4, #36]	; 0x24
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <std+0x3c>)
 8006164:	62a3      	str	r3, [r4, #40]	; 0x28
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <std+0x40>)
 8006168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800616a:	4b05      	ldr	r3, [pc, #20]	; (8006180 <std+0x44>)
 800616c:	6224      	str	r4, [r4, #32]
 800616e:	6323      	str	r3, [r4, #48]	; 0x30
 8006170:	bd10      	pop	{r4, pc}
 8006172:	bf00      	nop
 8006174:	0800639d 	.word	0x0800639d
 8006178:	080063bf 	.word	0x080063bf
 800617c:	080063f7 	.word	0x080063f7
 8006180:	0800641b 	.word	0x0800641b

08006184 <_cleanup_r>:
 8006184:	4901      	ldr	r1, [pc, #4]	; (800618c <_cleanup_r+0x8>)
 8006186:	f000 b885 	b.w	8006294 <_fwalk_reent>
 800618a:	bf00      	nop
 800618c:	080060e9 	.word	0x080060e9

08006190 <__sfmoreglue>:
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	1e4a      	subs	r2, r1, #1
 8006194:	2568      	movs	r5, #104	; 0x68
 8006196:	4355      	muls	r5, r2
 8006198:	460e      	mov	r6, r1
 800619a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800619e:	f7ff fae7 	bl	8005770 <_malloc_r>
 80061a2:	4604      	mov	r4, r0
 80061a4:	b140      	cbz	r0, 80061b8 <__sfmoreglue+0x28>
 80061a6:	2100      	movs	r1, #0
 80061a8:	e9c0 1600 	strd	r1, r6, [r0]
 80061ac:	300c      	adds	r0, #12
 80061ae:	60a0      	str	r0, [r4, #8]
 80061b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061b4:	f7ff fa85 	bl	80056c2 <memset>
 80061b8:	4620      	mov	r0, r4
 80061ba:	bd70      	pop	{r4, r5, r6, pc}

080061bc <__sinit>:
 80061bc:	6983      	ldr	r3, [r0, #24]
 80061be:	b510      	push	{r4, lr}
 80061c0:	4604      	mov	r4, r0
 80061c2:	bb33      	cbnz	r3, 8006212 <__sinit+0x56>
 80061c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80061c8:	6503      	str	r3, [r0, #80]	; 0x50
 80061ca:	4b12      	ldr	r3, [pc, #72]	; (8006214 <__sinit+0x58>)
 80061cc:	4a12      	ldr	r2, [pc, #72]	; (8006218 <__sinit+0x5c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6282      	str	r2, [r0, #40]	; 0x28
 80061d2:	4298      	cmp	r0, r3
 80061d4:	bf04      	itt	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	6183      	streq	r3, [r0, #24]
 80061da:	f000 f81f 	bl	800621c <__sfp>
 80061de:	6060      	str	r0, [r4, #4]
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 f81b 	bl	800621c <__sfp>
 80061e6:	60a0      	str	r0, [r4, #8]
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 f817 	bl	800621c <__sfp>
 80061ee:	2200      	movs	r2, #0
 80061f0:	60e0      	str	r0, [r4, #12]
 80061f2:	2104      	movs	r1, #4
 80061f4:	6860      	ldr	r0, [r4, #4]
 80061f6:	f7ff ffa1 	bl	800613c <std>
 80061fa:	2201      	movs	r2, #1
 80061fc:	2109      	movs	r1, #9
 80061fe:	68a0      	ldr	r0, [r4, #8]
 8006200:	f7ff ff9c 	bl	800613c <std>
 8006204:	2202      	movs	r2, #2
 8006206:	2112      	movs	r1, #18
 8006208:	68e0      	ldr	r0, [r4, #12]
 800620a:	f7ff ff97 	bl	800613c <std>
 800620e:	2301      	movs	r3, #1
 8006210:	61a3      	str	r3, [r4, #24]
 8006212:	bd10      	pop	{r4, pc}
 8006214:	0800664c 	.word	0x0800664c
 8006218:	08006185 	.word	0x08006185

0800621c <__sfp>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	4b1b      	ldr	r3, [pc, #108]	; (800628c <__sfp+0x70>)
 8006220:	681e      	ldr	r6, [r3, #0]
 8006222:	69b3      	ldr	r3, [r6, #24]
 8006224:	4607      	mov	r7, r0
 8006226:	b913      	cbnz	r3, 800622e <__sfp+0x12>
 8006228:	4630      	mov	r0, r6
 800622a:	f7ff ffc7 	bl	80061bc <__sinit>
 800622e:	3648      	adds	r6, #72	; 0x48
 8006230:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006234:	3b01      	subs	r3, #1
 8006236:	d503      	bpl.n	8006240 <__sfp+0x24>
 8006238:	6833      	ldr	r3, [r6, #0]
 800623a:	b133      	cbz	r3, 800624a <__sfp+0x2e>
 800623c:	6836      	ldr	r6, [r6, #0]
 800623e:	e7f7      	b.n	8006230 <__sfp+0x14>
 8006240:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006244:	b16d      	cbz	r5, 8006262 <__sfp+0x46>
 8006246:	3468      	adds	r4, #104	; 0x68
 8006248:	e7f4      	b.n	8006234 <__sfp+0x18>
 800624a:	2104      	movs	r1, #4
 800624c:	4638      	mov	r0, r7
 800624e:	f7ff ff9f 	bl	8006190 <__sfmoreglue>
 8006252:	6030      	str	r0, [r6, #0]
 8006254:	2800      	cmp	r0, #0
 8006256:	d1f1      	bne.n	800623c <__sfp+0x20>
 8006258:	230c      	movs	r3, #12
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	4604      	mov	r4, r0
 800625e:	4620      	mov	r0, r4
 8006260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006262:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <__sfp+0x74>)
 8006264:	6665      	str	r5, [r4, #100]	; 0x64
 8006266:	e9c4 5500 	strd	r5, r5, [r4]
 800626a:	60a5      	str	r5, [r4, #8]
 800626c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006270:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006274:	2208      	movs	r2, #8
 8006276:	4629      	mov	r1, r5
 8006278:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800627c:	f7ff fa21 	bl	80056c2 <memset>
 8006280:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006284:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006288:	e7e9      	b.n	800625e <__sfp+0x42>
 800628a:	bf00      	nop
 800628c:	0800664c 	.word	0x0800664c
 8006290:	ffff0001 	.word	0xffff0001

08006294 <_fwalk_reent>:
 8006294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006298:	4680      	mov	r8, r0
 800629a:	4689      	mov	r9, r1
 800629c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062a0:	2600      	movs	r6, #0
 80062a2:	b914      	cbnz	r4, 80062aa <_fwalk_reent+0x16>
 80062a4:	4630      	mov	r0, r6
 80062a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80062ae:	3f01      	subs	r7, #1
 80062b0:	d501      	bpl.n	80062b6 <_fwalk_reent+0x22>
 80062b2:	6824      	ldr	r4, [r4, #0]
 80062b4:	e7f5      	b.n	80062a2 <_fwalk_reent+0xe>
 80062b6:	89ab      	ldrh	r3, [r5, #12]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d907      	bls.n	80062cc <_fwalk_reent+0x38>
 80062bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062c0:	3301      	adds	r3, #1
 80062c2:	d003      	beq.n	80062cc <_fwalk_reent+0x38>
 80062c4:	4629      	mov	r1, r5
 80062c6:	4640      	mov	r0, r8
 80062c8:	47c8      	blx	r9
 80062ca:	4306      	orrs	r6, r0
 80062cc:	3568      	adds	r5, #104	; 0x68
 80062ce:	e7ee      	b.n	80062ae <_fwalk_reent+0x1a>

080062d0 <__swhatbuf_r>:
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	460e      	mov	r6, r1
 80062d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d8:	2900      	cmp	r1, #0
 80062da:	b096      	sub	sp, #88	; 0x58
 80062dc:	4614      	mov	r4, r2
 80062de:	461d      	mov	r5, r3
 80062e0:	da07      	bge.n	80062f2 <__swhatbuf_r+0x22>
 80062e2:	2300      	movs	r3, #0
 80062e4:	602b      	str	r3, [r5, #0]
 80062e6:	89b3      	ldrh	r3, [r6, #12]
 80062e8:	061a      	lsls	r2, r3, #24
 80062ea:	d410      	bmi.n	800630e <__swhatbuf_r+0x3e>
 80062ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062f0:	e00e      	b.n	8006310 <__swhatbuf_r+0x40>
 80062f2:	466a      	mov	r2, sp
 80062f4:	f000 f8b8 	bl	8006468 <_fstat_r>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	dbf2      	blt.n	80062e2 <__swhatbuf_r+0x12>
 80062fc:	9a01      	ldr	r2, [sp, #4]
 80062fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006302:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006306:	425a      	negs	r2, r3
 8006308:	415a      	adcs	r2, r3
 800630a:	602a      	str	r2, [r5, #0]
 800630c:	e7ee      	b.n	80062ec <__swhatbuf_r+0x1c>
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	2000      	movs	r0, #0
 8006312:	6023      	str	r3, [r4, #0]
 8006314:	b016      	add	sp, #88	; 0x58
 8006316:	bd70      	pop	{r4, r5, r6, pc}

08006318 <__smakebuf_r>:
 8006318:	898b      	ldrh	r3, [r1, #12]
 800631a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800631c:	079d      	lsls	r5, r3, #30
 800631e:	4606      	mov	r6, r0
 8006320:	460c      	mov	r4, r1
 8006322:	d507      	bpl.n	8006334 <__smakebuf_r+0x1c>
 8006324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	6123      	str	r3, [r4, #16]
 800632c:	2301      	movs	r3, #1
 800632e:	6163      	str	r3, [r4, #20]
 8006330:	b002      	add	sp, #8
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	ab01      	add	r3, sp, #4
 8006336:	466a      	mov	r2, sp
 8006338:	f7ff ffca 	bl	80062d0 <__swhatbuf_r>
 800633c:	9900      	ldr	r1, [sp, #0]
 800633e:	4605      	mov	r5, r0
 8006340:	4630      	mov	r0, r6
 8006342:	f7ff fa15 	bl	8005770 <_malloc_r>
 8006346:	b948      	cbnz	r0, 800635c <__smakebuf_r+0x44>
 8006348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800634c:	059a      	lsls	r2, r3, #22
 800634e:	d4ef      	bmi.n	8006330 <__smakebuf_r+0x18>
 8006350:	f023 0303 	bic.w	r3, r3, #3
 8006354:	f043 0302 	orr.w	r3, r3, #2
 8006358:	81a3      	strh	r3, [r4, #12]
 800635a:	e7e3      	b.n	8006324 <__smakebuf_r+0xc>
 800635c:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <__smakebuf_r+0x7c>)
 800635e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	6020      	str	r0, [r4, #0]
 8006364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006368:	81a3      	strh	r3, [r4, #12]
 800636a:	9b00      	ldr	r3, [sp, #0]
 800636c:	6163      	str	r3, [r4, #20]
 800636e:	9b01      	ldr	r3, [sp, #4]
 8006370:	6120      	str	r0, [r4, #16]
 8006372:	b15b      	cbz	r3, 800638c <__smakebuf_r+0x74>
 8006374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006378:	4630      	mov	r0, r6
 800637a:	f000 f887 	bl	800648c <_isatty_r>
 800637e:	b128      	cbz	r0, 800638c <__smakebuf_r+0x74>
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	81a3      	strh	r3, [r4, #12]
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	431d      	orrs	r5, r3
 8006390:	81a5      	strh	r5, [r4, #12]
 8006392:	e7cd      	b.n	8006330 <__smakebuf_r+0x18>
 8006394:	08006185 	.word	0x08006185

08006398 <__malloc_lock>:
 8006398:	4770      	bx	lr

0800639a <__malloc_unlock>:
 800639a:	4770      	bx	lr

0800639c <__sread>:
 800639c:	b510      	push	{r4, lr}
 800639e:	460c      	mov	r4, r1
 80063a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a4:	f000 f894 	bl	80064d0 <_read_r>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	bfab      	itete	ge
 80063ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063ae:	89a3      	ldrhlt	r3, [r4, #12]
 80063b0:	181b      	addge	r3, r3, r0
 80063b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063b6:	bfac      	ite	ge
 80063b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80063ba:	81a3      	strhlt	r3, [r4, #12]
 80063bc:	bd10      	pop	{r4, pc}

080063be <__swrite>:
 80063be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c2:	461f      	mov	r7, r3
 80063c4:	898b      	ldrh	r3, [r1, #12]
 80063c6:	05db      	lsls	r3, r3, #23
 80063c8:	4605      	mov	r5, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	4616      	mov	r6, r2
 80063ce:	d505      	bpl.n	80063dc <__swrite+0x1e>
 80063d0:	2302      	movs	r3, #2
 80063d2:	2200      	movs	r2, #0
 80063d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d8:	f000 f868 	bl	80064ac <_lseek_r>
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e6:	81a3      	strh	r3, [r4, #12]
 80063e8:	4632      	mov	r2, r6
 80063ea:	463b      	mov	r3, r7
 80063ec:	4628      	mov	r0, r5
 80063ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063f2:	f000 b817 	b.w	8006424 <_write_r>

080063f6 <__sseek>:
 80063f6:	b510      	push	{r4, lr}
 80063f8:	460c      	mov	r4, r1
 80063fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fe:	f000 f855 	bl	80064ac <_lseek_r>
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	bf15      	itete	ne
 8006408:	6560      	strne	r0, [r4, #84]	; 0x54
 800640a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800640e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006412:	81a3      	strheq	r3, [r4, #12]
 8006414:	bf18      	it	ne
 8006416:	81a3      	strhne	r3, [r4, #12]
 8006418:	bd10      	pop	{r4, pc}

0800641a <__sclose>:
 800641a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800641e:	f000 b813 	b.w	8006448 <_close_r>
	...

08006424 <_write_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4c07      	ldr	r4, [pc, #28]	; (8006444 <_write_r+0x20>)
 8006428:	4605      	mov	r5, r0
 800642a:	4608      	mov	r0, r1
 800642c:	4611      	mov	r1, r2
 800642e:	2200      	movs	r2, #0
 8006430:	6022      	str	r2, [r4, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	f7fb fb51 	bl	8001ada <_write>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	d102      	bne.n	8006442 <_write_r+0x1e>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	b103      	cbz	r3, 8006442 <_write_r+0x1e>
 8006440:	602b      	str	r3, [r5, #0]
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	200003c4 	.word	0x200003c4

08006448 <_close_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4c06      	ldr	r4, [pc, #24]	; (8006464 <_close_r+0x1c>)
 800644c:	2300      	movs	r3, #0
 800644e:	4605      	mov	r5, r0
 8006450:	4608      	mov	r0, r1
 8006452:	6023      	str	r3, [r4, #0]
 8006454:	f7fb fb5d 	bl	8001b12 <_close>
 8006458:	1c43      	adds	r3, r0, #1
 800645a:	d102      	bne.n	8006462 <_close_r+0x1a>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	b103      	cbz	r3, 8006462 <_close_r+0x1a>
 8006460:	602b      	str	r3, [r5, #0]
 8006462:	bd38      	pop	{r3, r4, r5, pc}
 8006464:	200003c4 	.word	0x200003c4

08006468 <_fstat_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4c07      	ldr	r4, [pc, #28]	; (8006488 <_fstat_r+0x20>)
 800646c:	2300      	movs	r3, #0
 800646e:	4605      	mov	r5, r0
 8006470:	4608      	mov	r0, r1
 8006472:	4611      	mov	r1, r2
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	f7fb fb58 	bl	8001b2a <_fstat>
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	d102      	bne.n	8006484 <_fstat_r+0x1c>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	b103      	cbz	r3, 8006484 <_fstat_r+0x1c>
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	bd38      	pop	{r3, r4, r5, pc}
 8006486:	bf00      	nop
 8006488:	200003c4 	.word	0x200003c4

0800648c <_isatty_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4c06      	ldr	r4, [pc, #24]	; (80064a8 <_isatty_r+0x1c>)
 8006490:	2300      	movs	r3, #0
 8006492:	4605      	mov	r5, r0
 8006494:	4608      	mov	r0, r1
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	f7fb fb57 	bl	8001b4a <_isatty>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d102      	bne.n	80064a6 <_isatty_r+0x1a>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	b103      	cbz	r3, 80064a6 <_isatty_r+0x1a>
 80064a4:	602b      	str	r3, [r5, #0]
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	200003c4 	.word	0x200003c4

080064ac <_lseek_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4c07      	ldr	r4, [pc, #28]	; (80064cc <_lseek_r+0x20>)
 80064b0:	4605      	mov	r5, r0
 80064b2:	4608      	mov	r0, r1
 80064b4:	4611      	mov	r1, r2
 80064b6:	2200      	movs	r2, #0
 80064b8:	6022      	str	r2, [r4, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	f7fb fb50 	bl	8001b60 <_lseek>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d102      	bne.n	80064ca <_lseek_r+0x1e>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	b103      	cbz	r3, 80064ca <_lseek_r+0x1e>
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	bd38      	pop	{r3, r4, r5, pc}
 80064cc:	200003c4 	.word	0x200003c4

080064d0 <_read_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4c07      	ldr	r4, [pc, #28]	; (80064f0 <_read_r+0x20>)
 80064d4:	4605      	mov	r5, r0
 80064d6:	4608      	mov	r0, r1
 80064d8:	4611      	mov	r1, r2
 80064da:	2200      	movs	r2, #0
 80064dc:	6022      	str	r2, [r4, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	f7fb fade 	bl	8001aa0 <_read>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_read_r+0x1e>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_read_r+0x1e>
 80064ec:	602b      	str	r3, [r5, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	200003c4 	.word	0x200003c4

080064f4 <_init>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	bf00      	nop
 80064f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fa:	bc08      	pop	{r3}
 80064fc:	469e      	mov	lr, r3
 80064fe:	4770      	bx	lr

08006500 <_fini>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	bf00      	nop
 8006504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006506:	bc08      	pop	{r3}
 8006508:	469e      	mov	lr, r3
 800650a:	4770      	bx	lr
